
PowerDistributionFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047bc  080047bc  00006090  2**0
                  CONTENTS
  4 .ARM          00000000  080047bc  080047bc  00006090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047bc  080047bc  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080047c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000090  08004854  00006090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08004854  000063bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc10  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed6  00000000  00000000  00011cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00013ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000760  00000000  00000000  00014540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f53  00000000  00000000  00014ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4f8  00000000  00000000  0002abf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088711  00000000  00000000  000370eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002634  00000000  00000000  000bf840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c1e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000090 	.word	0x20000090
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004694 	.word	0x08004694

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000094 	.word	0x20000094
 80000fc:	08004694 	.word	0x08004694

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <LL_RCC_HSI_Enable+0x18>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <LL_RCC_HSI_Enable+0x18>)
 800041a:	2180      	movs	r1, #128	@ 0x80
 800041c:	0049      	lsls	r1, r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000430:	4b07      	ldr	r3, [pc, #28]	@ (8000450 <LL_RCC_HSI_IsReady+0x24>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	401a      	ands	r2, r3
 800043a:	2380      	movs	r3, #128	@ 0x80
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	429a      	cmp	r2, r3
 8000440:	d101      	bne.n	8000446 <LL_RCC_HSI_IsReady+0x1a>
 8000442:	2301      	movs	r3, #1
 8000444:	e000      	b.n	8000448 <LL_RCC_HSI_IsReady+0x1c>
 8000446:	2300      	movs	r3, #0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <LL_RCC_SetSysClkSource+0x24>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2207      	movs	r2, #7
 8000462:	4393      	bics	r3, r2
 8000464:	0019      	movs	r1, r3
 8000466:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <LL_RCC_SetSysClkSource+0x24>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	430a      	orrs	r2, r1
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000480:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <LL_RCC_GetSysClkSource+0x14>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	2238      	movs	r2, #56	@ 0x38
 8000486:	4013      	ands	r3, r2
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	40021000 	.word	0x40021000

08000494 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a06      	ldr	r2, [pc, #24]	@ (80004bc <LL_RCC_SetAHBPrescaler+0x28>)
 80004a2:	4013      	ands	r3, r2
 80004a4:	0019      	movs	r1, r3
 80004a6:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	609a      	str	r2, [r3, #8]
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	fffff0ff 	.word	0xfffff0ff

080004c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004ce:	4013      	ands	r3, r2
 80004d0:	0019      	movs	r1, r3
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	430a      	orrs	r2, r1
 80004d8:	609a      	str	r2, [r3, #8]
}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000
 80004e8:	ffff8fff 	.word	0xffff8fff

080004ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004f0:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f6:	2180      	movs	r1, #128	@ 0x80
 80004f8:	0449      	lsls	r1, r1, #17
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <LL_RCC_PLL_IsReady+0x24>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	049b      	lsls	r3, r3, #18
 8000514:	401a      	ands	r2, r3
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	049b      	lsls	r3, r3, #18
 800051a:	429a      	cmp	r2, r3
 800051c:	d101      	bne.n	8000522 <LL_RCC_PLL_IsReady+0x1a>
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <LL_RCC_PLL_IsReady+0x1c>
 8000522:	2300      	movs	r3, #0
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000544:	4013      	ands	r3, r2
 8000546:	0019      	movs	r1, r3
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	431a      	orrs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	431a      	orrs	r2, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	431a      	orrs	r2, r3
 8000558:	4b03      	ldr	r3, [pc, #12]	@ (8000568 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800055a:	430a      	orrs	r2, r1
 800055c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b004      	add	sp, #16
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	40021000 	.word	0x40021000
 800056c:	1fff808c 	.word	0x1fff808c

08000570 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	0549      	lsls	r1, r1, #21
 800057e:	430a      	orrs	r2, r1
 8000580:	60da      	str	r2, [r3, #12]
}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000596:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	430a      	orrs	r2, r1
 800059e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b004      	add	sp, #16
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2207      	movs	r2, #7
 80005c6:	4393      	bics	r3, r2
 80005c8:	0019      	movs	r1, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	40022000 	.word	0x40022000

080005e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <LL_FLASH_GetLatency+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2207      	movs	r2, #7
 80005ea:	4013      	ands	r3, r2
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40022000 	.word	0x40022000

080005f8 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4013      	ands	r3, r2
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	d101      	bne.n	8000614 <LL_GPIO_IsInputPinSet+0x1c>
 8000610:	2301      	movs	r3, #1
 8000612:	e000      	b.n	8000616 <LL_GPIO_IsInputPinSet+0x1e>
 8000614:	2300      	movs	r3, #0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	619a      	str	r2, [r3, #24]
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}

0800064e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4013      	ands	r3, r2
 8000664:	041a      	lsls	r2, r3, #16
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	43db      	mvns	r3, r3
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	400b      	ands	r3, r1
 800066e:	431a      	orrs	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	619a      	str	r2, [r3, #24]
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b004      	add	sp, #16
 800067a:	bd80      	pop	{r7, pc}

0800067c <SwitchTimingHandlar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SwitchTimingHandlar(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	timeoutPwrOff ++;
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <SwitchTimingHandlar+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <SwitchTimingHandlar+0x28>)
 8000688:	601a      	str	r2, [r3, #0]
	if(leaveSwitch)
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <SwitchTimingHandlar+0x2c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d105      	bne.n	800069e <SwitchTimingHandlar+0x22>
	{
		return;
	}
	counterSwitch ++;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <SwitchTimingHandlar+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <SwitchTimingHandlar+0x30>)
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e000      	b.n	80006a0 <SwitchTimingHandlar+0x24>
		return;
 800069e:	46c0      	nop			@ (mov r8, r8)
}
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000148 	.word	0x20000148
 80006a8:	20000145 	.word	0x20000145
 80006ac:	20000140 	.word	0x20000140

080006b0 <LED_GreenHandler>:

uint8_t greenLEDState = 0;
uint32_t greenLedTimer = 0;
void LED_GreenHandler (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0


	if(greenLEDState == 0)
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <LED_GreenHandler+0x5c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d024      	beq.n	8000706 <LED_GreenHandler+0x56>
	{
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
	}

	if(greenLEDState == 1)
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <LED_GreenHandler+0x5c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d114      	bne.n	80006ee <LED_GreenHandler+0x3e>
	{
		greenLedTimer++;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <LED_GreenHandler+0x60>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <LED_GreenHandler+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]

		if(greenLedTimer > TIME_LED_GREEN_BLINK)
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <LED_GreenHandler+0x60>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	23fa      	movs	r3, #250	@ 0xfa
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d909      	bls.n	80006ee <LED_GreenHandler+0x3e>
		{
			greenLedTimer = 0;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <LED_GreenHandler+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <LED_GreenHandler+0x64>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f7ff ffb0 	bl	800064e <LL_GPIO_TogglePin>
		}
	}

	if(greenLEDState == 2)
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <LED_GreenHandler+0x5c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d108      	bne.n	8000708 <LED_GreenHandler+0x58>
	{
		LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <LED_GreenHandler+0x64>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f7ff ff8d 	bl	800061e <LL_GPIO_SetOutputPin>
 8000704:	e000      	b.n	8000708 <LED_GreenHandler+0x58>
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000706:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000014c 	.word	0x2000014c
 8000710:	20000150 	.word	0x20000150
 8000714:	50000400 	.word	0x50000400

08000718 <HAL_UART_RxCpltCallback>:
int i = 0;
uint8_t power_state = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08d      	sub	sp, #52	@ 0x34
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(rx_byte == 0x0D)
 8000720:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_UART_RxCpltCallback+0xd8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b0d      	cmp	r3, #13
 8000726:	d14e      	bne.n	80007c6 <HAL_UART_RxCpltCallback+0xae>
  {
	 for(i = 0; i < CMD_NUM; i++)
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <HAL_UART_RxCpltCallback+0xdc>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e020      	b.n	8000772 <HAL_UART_RxCpltCallback+0x5a>
	 {
		 char *ptData = NULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
		 ptData = strstr((char*)&rx_buff[0], (char*)&cmd_list[i][0]);
 8000734:	4b2f      	ldr	r3, [pc, #188]	@ (80007f4 <HAL_UART_RxCpltCallback+0xdc>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	0013      	movs	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	189b      	adds	r3, r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4a2d      	ldr	r2, [pc, #180]	@ (80007f8 <HAL_UART_RxCpltCallback+0xe0>)
 8000742:	189a      	adds	r2, r3, r2
 8000744:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <HAL_UART_RxCpltCallback+0xe4>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f003 fb17 	bl	8003d7c <strstr>
 800074e:	0003      	movs	r3, r0
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
		 if(ptData != NULL)
 8000752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000754:	2b00      	cmp	r3, #0
 8000756:	d007      	beq.n	8000768 <HAL_UART_RxCpltCallback+0x50>
		 {
			 get_cmd = i + 1;
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <HAL_UART_RxCpltCallback+0xdc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <HAL_UART_RxCpltCallback+0xe8>)
 8000764:	701a      	strb	r2, [r3, #0]
			 break;
 8000766:	e008      	b.n	800077a <HAL_UART_RxCpltCallback+0x62>
	 for(i = 0; i < CMD_NUM; i++)
 8000768:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <HAL_UART_RxCpltCallback+0xdc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <HAL_UART_RxCpltCallback+0xdc>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <HAL_UART_RxCpltCallback+0xdc>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	ddda      	ble.n	8000730 <HAL_UART_RxCpltCallback+0x18>
		 }
	 }
	 if(get_cmd == CMD_NUM)
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <HAL_UART_RxCpltCallback+0xe8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b05      	cmp	r3, #5
 8000780:	d117      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x9a>
	 {
		get_cmd = 0;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <HAL_UART_RxCpltCallback+0xe8>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		char tempBuff[32] = {0};
 8000788:	240c      	movs	r4, #12
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	3304      	adds	r3, #4
 8000792:	221c      	movs	r2, #28
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f003 fae8 	bl	8003d6c <memset>
		sprintf(tempBuff, "count:%d;", cnt_reboot);
 800079c:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <HAL_UART_RxCpltCallback+0xec>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4919      	ldr	r1, [pc, #100]	@ (8000808 <HAL_UART_RxCpltCallback+0xf0>)
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f003 fac1 	bl	8003d2c <siprintf>
		Send_RS485_Data(tempBuff);
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 f87d 	bl	80008ac <Send_RS485_Data>

	 }
	 memset((char*)&rx_buff[0], 0x00, sizeof(rx_buff));
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_UART_RxCpltCallback+0xe4>)
 80007b4:	22ff      	movs	r2, #255	@ 0xff
 80007b6:	2100      	movs	r1, #0
 80007b8:	0018      	movs	r0, r3
 80007ba:	f003 fad7 	bl	8003d6c <memset>
	 rx_cnt = 0;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <HAL_UART_RxCpltCallback+0xf4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	e00a      	b.n	80007dc <HAL_UART_RxCpltCallback+0xc4>
  }
  else
  {
	  rx_buff[rx_cnt++] = rx_byte;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <HAL_UART_RxCpltCallback+0xf4>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	b2d1      	uxtb	r1, r2
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <HAL_UART_RxCpltCallback+0xf4>)
 80007d0:	7011      	strb	r1, [r2, #0]
 80007d2:	001a      	movs	r2, r3
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_UART_RxCpltCallback+0xd8>)
 80007d6:	7819      	ldrb	r1, [r3, #0]
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_UART_RxCpltCallback+0xe4>)
 80007da:	5499      	strb	r1, [r3, r2]
  }
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80007dc:	4904      	ldr	r1, [pc, #16]	@ (80007f0 <HAL_UART_RxCpltCallback+0xd8>)
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <HAL_UART_RxCpltCallback+0xf8>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 fa80 	bl	8001ce8 <HAL_UART_Receive_IT>
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b00d      	add	sp, #52	@ 0x34
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	20000155 	.word	0x20000155
 80007f4:	20000260 	.word	0x20000260
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000158 	.word	0x20000158
 8000800:	20000258 	.word	0x20000258
 8000804:	2000025c 	.word	0x2000025c
 8000808:	080046ac 	.word	0x080046ac
 800080c:	20000257 	.word	0x20000257
 8000810:	200000ac 	.word	0x200000ac

08000814 <PowerOn>:

void PowerOn (void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	greenLEDState = 2;
 8000818:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <PowerOn+0x3c>)
 800081a:	2202      	movs	r2, #2
 800081c:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	4a0c      	ldr	r2, [pc, #48]	@ (8000854 <PowerOn+0x40>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f7ff fef9 	bl	800061e <LL_GPIO_SetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <PowerOn+0x44>)
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fd80 	bl	8001334 <HAL_Delay>
	LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <PowerOn+0x40>)
 800083a:	0019      	movs	r1, r3
 800083c:	0010      	movs	r0, r2
 800083e:	f7ff feee 	bl	800061e <LL_GPIO_SetOutputPin>
	power_state = 1;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <PowerOn+0x48>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	2000014c 	.word	0x2000014c
 8000854:	50000400 	.word	0x50000400
 8000858:	00001388 	.word	0x00001388
 800085c:	20000264 	.word	0x20000264

08000860 <PowerOff>:

void PowerOff (void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <PowerOff+0x3c>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f7ff fee2 	bl	8000636 <LL_GPIO_ResetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <PowerOff+0x40>)
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fd5d 	bl	8001334 <HAL_Delay>
	LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	4a07      	ldr	r2, [pc, #28]	@ (800089c <PowerOff+0x3c>)
 8000880:	0019      	movs	r1, r3
 8000882:	0010      	movs	r0, r2
 8000884:	f7ff fed7 	bl	8000636 <LL_GPIO_ResetOutputPin>
	greenLEDState = 1;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <PowerOff+0x44>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
	power_state = 0;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <PowerOff+0x48>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	50000400 	.word	0x50000400
 80008a0:	00001388 	.word	0x00001388
 80008a4:	2000014c 	.word	0x2000014c
 80008a8:	20000264 	.word	0x20000264

080008ac <Send_RS485_Data>:

void Send_RS485_Data (char *buff)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(buff);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff fc22 	bl	8000100 <strlen>
 80008bc:	0002      	movs	r2, r0
 80008be:	240f      	movs	r4, #15
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(DE2_GPIO_Port, DE2_Pin);
 80008c4:	23a0      	movs	r3, #160	@ 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2102      	movs	r1, #2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fea7 	bl	800061e <LL_GPIO_SetOutputPin>
	HAL_Delay(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f000 fd2f 	bl	8001334 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, len *2);
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b29a      	uxth	r2, r3
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	4808      	ldr	r0, [pc, #32]	@ (8000908 <Send_RS485_Data+0x5c>)
 80008e8:	f001 f95a 	bl	8001ba0 <HAL_UART_Transmit>
	HAL_Delay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fd21 	bl	8001334 <HAL_Delay>
	LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 80008f2:	23a0      	movs	r3, #160	@ 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2102      	movs	r1, #2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fe9c 	bl	8000636 <LL_GPIO_ResetOutputPin>
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b005      	add	sp, #20
 8000904:	bd90      	pop	{r4, r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	200000ac 	.word	0x200000ac

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f000 fc89 	bl	8001228 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 8000916:	23fa      	movs	r3, #250	@ 0xfa
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fd0a 	bl	8001334 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f9b2 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 fa42 	bl	8000dac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000928:	f000 f9f2 	bl	8000d10 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 800092c:	49bb      	ldr	r1, [pc, #748]	@ (8000c1c <main+0x310>)
 800092e:	4bbc      	ldr	r3, [pc, #752]	@ (8000c20 <main+0x314>)
 8000930:	2201      	movs	r2, #1
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f9d8 	bl	8001ce8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */
  uint8_t cnt400V[2] = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	801a      	strh	r2, [r3, #0]
  while(1)
  {
	  if(LL_GPIO_IsInputPinSet(CMP_400V_GPIO_Port,CMP_400V_Pin))
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	015b      	lsls	r3, r3, #5
 8000942:	4ab8      	ldr	r2, [pc, #736]	@ (8000c24 <main+0x318>)
 8000944:	0019      	movs	r1, r3
 8000946:	0010      	movs	r0, r2
 8000948:	f7ff fe56 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d009      	beq.n	8000964 <main+0x58>
	  {
		  cnt400V[0]++;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	701a      	strb	r2, [r3, #0]
		  cnt400V[1]=0;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	705a      	strb	r2, [r3, #1]
 8000962:	e008      	b.n	8000976 <main+0x6a>
	  }
	  else
	  {
		  cnt400V[1]++;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	3301      	adds	r3, #1
 800096a:	b2da      	uxtb	r2, r3
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	705a      	strb	r2, [r3, #1]
		  cnt400V[0]=0;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(33);
 8000976:	2021      	movs	r0, #33	@ 0x21
 8000978:	f000 fcdc 	bl	8001334 <HAL_Delay>

	  if(cnt400V[1] >= COUNT_400V_PULL)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d90c      	bls.n	800099e <main+0x92>
	  {
	       LL_GPIO_SetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000984:	2380      	movs	r3, #128	@ 0x80
 8000986:	019b      	lsls	r3, r3, #6
 8000988:	4aa6      	ldr	r2, [pc, #664]	@ (8000c24 <main+0x318>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f7ff fe46 	bl	800061e <LL_GPIO_SetOutputPin>
           LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000992:	4ba4      	ldr	r3, [pc, #656]	@ (8000c24 <main+0x318>)
 8000994:	2180      	movs	r1, #128	@ 0x80
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff fe41 	bl	800061e <LL_GPIO_SetOutputPin>
		  break;
 800099c:	e011      	b.n	80009c2 <main+0xb6>
	  }
	  else if(cnt400V[0] >= COUNT_400V_PULL)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d9cb      	bls.n	800093e <main+0x32>
	  {
		  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	4a9e      	ldr	r2, [pc, #632]	@ (8000c24 <main+0x318>)
 80009ac:	0019      	movs	r1, r3
 80009ae:	0010      	movs	r0, r2
 80009b0:	f7ff fe41 	bl	8000636 <LL_GPIO_ResetOutputPin>
		  LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4a9a      	ldr	r2, [pc, #616]	@ (8000c24 <main+0x318>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f7ff fe2e 	bl	800061e <LL_GPIO_SetOutputPin>
		  break;
	  }

  }
  //LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
  HAL_Delay(2000);
 80009c2:	23fa      	movs	r3, #250	@ 0xfa
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fcb4 	bl	8001334 <HAL_Delay>
  //LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
  greenLEDState = 1;
 80009cc:	4b96      	ldr	r3, [pc, #600]	@ (8000c28 <main+0x31c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 80009d2:	4b94      	ldr	r3, [pc, #592]	@ (8000c24 <main+0x318>)
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fe2d 	bl	8000636 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4a90      	ldr	r2, [pc, #576]	@ (8000c24 <main+0x318>)
 80009e2:	0019      	movs	r1, r3
 80009e4:	0010      	movs	r0, r2
 80009e6:	f7ff fe26 	bl	8000636 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80009ea:	2380      	movs	r3, #128	@ 0x80
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4a8d      	ldr	r2, [pc, #564]	@ (8000c24 <main+0x318>)
 80009f0:	0019      	movs	r1, r3
 80009f2:	0010      	movs	r0, r2
 80009f4:	f7ff fe1f 	bl	8000636 <LL_GPIO_ResetOutputPin>
  counterSwitch = 0;
 80009f8:	4b8c      	ldr	r3, [pc, #560]	@ (8000c2c <main+0x320>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	019b      	lsls	r3, r3, #6
 8000a02:	4a8b      	ldr	r2, [pc, #556]	@ (8000c30 <main+0x324>)
 8000a04:	0019      	movs	r1, r3
 8000a06:	0010      	movs	r0, r2
 8000a08:	f7ff fdf6 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d15b      	bne.n	8000ac8 <main+0x1bc>
	{
		if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000a10:	4b84      	ldr	r3, [pc, #528]	@ (8000c24 <main+0x318>)
 8000a12:	2104      	movs	r1, #4
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fdef 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d133      	bne.n	8000a86 <main+0x17a>
		{
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 8000a1e:	e012      	b.n	8000a46 <main+0x13a>
		   {
			  LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a20:	4b80      	ldr	r3, [pc, #512]	@ (8000c24 <main+0x318>)
 8000a22:	2180      	movs	r1, #128	@ 0x80
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fdfa 	bl	800061e <LL_GPIO_SetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4a7d      	ldr	r2, [pc, #500]	@ (8000c24 <main+0x318>)
 8000a30:	0019      	movs	r1, r3
 8000a32:	0010      	movs	r0, r2
 8000a34:	f7ff fdff 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000a38:	2380      	movs	r3, #128	@ 0x80
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4a79      	ldr	r2, [pc, #484]	@ (8000c24 <main+0x318>)
 8000a3e:	0019      	movs	r1, r3
 8000a40:	0010      	movs	r0, r2
 8000a42:	f7ff fdf8 	bl	8000636 <LL_GPIO_ResetOutputPin>
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 8000a46:	4b77      	ldr	r3, [pc, #476]	@ (8000c24 <main+0x318>)
 8000a48:	2104      	movs	r1, #4
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff fdd4 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d0e5      	beq.n	8000a20 <main+0x114>
		   }

			  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a54:	4b73      	ldr	r3, [pc, #460]	@ (8000c24 <main+0x318>)
 8000a56:	2180      	movs	r1, #128	@ 0x80
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fdec 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4a70      	ldr	r2, [pc, #448]	@ (8000c24 <main+0x318>)
 8000a64:	0019      	movs	r1, r3
 8000a66:	0010      	movs	r0, r2
 8000a68:	f7ff fde5 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000a6c:	2380      	movs	r3, #128	@ 0x80
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4a6c      	ldr	r2, [pc, #432]	@ (8000c24 <main+0x318>)
 8000a72:	0019      	movs	r1, r3
 8000a74:	0010      	movs	r0, r2
 8000a76:	f7ff fdde 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  counterSwitch = 0;
 8000a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8000c2c <main+0x320>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
			  leaveSwitch   = 0;
 8000a80:	4b6c      	ldr	r3, [pc, #432]	@ (8000c34 <main+0x328>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]

		}

		if( (counterSwitch > TIME_SWITCH_PRESSHED)&&(leaveSwitch == 0) )
 8000a86:	4b69      	ldr	r3, [pc, #420]	@ (8000c2c <main+0x320>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	23fa      	movs	r3, #250	@ 0xfa
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d920      	bls.n	8000ad4 <main+0x1c8>
 8000a92:	4b68      	ldr	r3, [pc, #416]	@ (8000c34 <main+0x328>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d11c      	bne.n	8000ad4 <main+0x1c8>
		{
			stateSwitch ^= 1;
 8000a9a:	4b67      	ldr	r3, [pc, #412]	@ (8000c38 <main+0x32c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4053      	eors	r3, r2
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b64      	ldr	r3, [pc, #400]	@ (8000c38 <main+0x32c>)
 8000aa6:	701a      	strb	r2, [r3, #0]

			if(stateSwitch)
 8000aa8:	4b63      	ldr	r3, [pc, #396]	@ (8000c38 <main+0x32c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <main+0x1b0>
			{
				PowerOn ();
 8000ab0:	f7ff feb0 	bl	8000814 <PowerOn>
				cntPwrOff = 0;
 8000ab4:	4b61      	ldr	r3, [pc, #388]	@ (8000c3c <main+0x330>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e001      	b.n	8000ac0 <main+0x1b4>
				//HAL_Delay(CYCLES_TIME_ON  * 1000);
			}
			else
			{
				PowerOff ();
 8000abc:	f7ff fed0 	bl	8000860 <PowerOff>

				//HAL_Delay(CYCLES_TIME_OFF  * 1000);
			}
			leaveSwitch = 1;
 8000ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8000c34 <main+0x328>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e005      	b.n	8000ad4 <main+0x1c8>
		 }
	  }
	  else
	  {
		counterSwitch = 0;
 8000ac8:	4b58      	ldr	r3, [pc, #352]	@ (8000c2c <main+0x320>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
		leaveSwitch   = 0;
 8000ace:	4b59      	ldr	r3, [pc, #356]	@ (8000c34 <main+0x328>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	  }

	if(get_cmd)
 8000ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8000c40 <main+0x334>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d100      	bne.n	8000ade <main+0x1d2>
 8000adc:	e06d      	b.n	8000bba <main+0x2ae>
	{
		switch(get_cmd)
 8000ade:	4b58      	ldr	r3, [pc, #352]	@ (8000c40 <main+0x334>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b05      	cmp	r3, #5
 8000ae4:	d866      	bhi.n	8000bb4 <main+0x2a8>
 8000ae6:	009a      	lsls	r2, r3, #2
 8000ae8:	4b56      	ldr	r3, [pc, #344]	@ (8000c44 <main+0x338>)
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	469f      	mov	pc, r3
		{

			case 1:
				if(power_state)
 8000af0:	4b55      	ldr	r3, [pc, #340]	@ (8000c48 <main+0x33c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d016      	beq.n	8000b26 <main+0x21a>
				{
					if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000af8:	4b4a      	ldr	r3, [pc, #296]	@ (8000c24 <main+0x318>)
 8000afa:	2104      	movs	r1, #4
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fd7b 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d104      	bne.n	8000b10 <main+0x204>
					{
						Send_RS485_Data("power_off:-1;");
 8000b06:	4b51      	ldr	r3, [pc, #324]	@ (8000c4c <main+0x340>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fecf 	bl	80008ac <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("power_off:1;");
				}
			break;
 8000b0e:	e051      	b.n	8000bb4 <main+0x2a8>
						Send_RS485_Data("power_off:0;");
 8000b10:	4b4f      	ldr	r3, [pc, #316]	@ (8000c50 <main+0x344>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff feca 	bl	80008ac <Send_RS485_Data>
						HAL_Delay(30000);
 8000b18:	4b4e      	ldr	r3, [pc, #312]	@ (8000c54 <main+0x348>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fc0a 	bl	8001334 <HAL_Delay>
						PowerOff ();
 8000b20:	f7ff fe9e 	bl	8000860 <PowerOff>
			break;
 8000b24:	e046      	b.n	8000bb4 <main+0x2a8>
					Send_RS485_Data("power_off:1;");
 8000b26:	4b4c      	ldr	r3, [pc, #304]	@ (8000c58 <main+0x34c>)
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff febf 	bl	80008ac <Send_RS485_Data>
			break;
 8000b2e:	e041      	b.n	8000bb4 <main+0x2a8>
			case 2:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000b30:	4b3c      	ldr	r3, [pc, #240]	@ (8000c24 <main+0x318>)
 8000b32:	2104      	movs	r1, #4
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fd5f 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d104      	bne.n	8000b48 <main+0x23c>
				{
					Send_RS485_Data("bus:1;");
 8000b3e:	4b47      	ldr	r3, [pc, #284]	@ (8000c5c <main+0x350>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff feb3 	bl	80008ac <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("bus:0;");
				}
			break;
 8000b46:	e035      	b.n	8000bb4 <main+0x2a8>
					Send_RS485_Data("bus:0;");
 8000b48:	4b45      	ldr	r3, [pc, #276]	@ (8000c60 <main+0x354>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff feae 	bl	80008ac <Send_RS485_Data>
			break;
 8000b50:	e030      	b.n	8000bb4 <main+0x2a8>
			case 3:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000b52:	4b34      	ldr	r3, [pc, #208]	@ (8000c24 <main+0x318>)
 8000b54:	2104      	movs	r1, #4
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fd4e 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d104      	bne.n	8000b6a <main+0x25e>
				{
					Send_RS485_Data("reboot:-1;");
 8000b60:	4b40      	ldr	r3, [pc, #256]	@ (8000c64 <main+0x358>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fea2 	bl	80008ac <Send_RS485_Data>
						reboot_time = HAL_GetTick();
						cnt_reboot ++;
						Send_RS485_Data("reboot:1;");
					}
				}
			break;
 8000b68:	e024      	b.n	8000bb4 <main+0x2a8>
					if(reboot_flag)
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c68 <main+0x35c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d004      	beq.n	8000b7c <main+0x270>
					    Send_RS485_Data("reboot:2;");
 8000b72:	4b3e      	ldr	r3, [pc, #248]	@ (8000c6c <main+0x360>)
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff fe99 	bl	80008ac <Send_RS485_Data>
			break;
 8000b7a:	e01b      	b.n	8000bb4 <main+0x2a8>
						reboot_flag = 1;
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c68 <main+0x35c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
						reboot_state_off = 1;
 8000b82:	4b3b      	ldr	r3, [pc, #236]	@ (8000c70 <main+0x364>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
						reboot_time = HAL_GetTick();
 8000b88:	f000 fbca 	bl	8001320 <HAL_GetTick>
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	4b39      	ldr	r3, [pc, #228]	@ (8000c74 <main+0x368>)
 8000b90:	601a      	str	r2, [r3, #0]
						cnt_reboot ++;
 8000b92:	4b39      	ldr	r3, [pc, #228]	@ (8000c78 <main+0x36c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	4b37      	ldr	r3, [pc, #220]	@ (8000c78 <main+0x36c>)
 8000b9a:	601a      	str	r2, [r3, #0]
						Send_RS485_Data("reboot:1;");
 8000b9c:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <main+0x370>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fe84 	bl	80008ac <Send_RS485_Data>
			break;
 8000ba4:	e006      	b.n	8000bb4 <main+0x2a8>
			case 4:
				Send_RS485_Data("power_on:1;");
 8000ba6:	4b36      	ldr	r3, [pc, #216]	@ (8000c80 <main+0x374>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fe7f 	bl	80008ac <Send_RS485_Data>
				PowerOn ();
 8000bae:	f7ff fe31 	bl	8000814 <PowerOn>
			break;
 8000bb2:	46c0      	nop			@ (mov r8, r8)
				sprintf(tempBuff, "count:%d;", cnt_reboot);
				Send_RS485_Data(tempBuff);*/
			break;

		}
		get_cmd = 0;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <main+0x334>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
     }

	if(reboot_flag)
 8000bba:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <main+0x35c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <main+0x2b8>
 8000bc2:	e71c      	b.n	80009fe <main+0xf2>
	{
	   if(reboot_state_off)
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <main+0x364>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d015      	beq.n	8000bf8 <main+0x2ec>
	   {
		   if(HAL_GetTick() > reboot_time + TIME_POWER_OFF)
 8000bcc:	f000 fba8 	bl	8001320 <HAL_GetTick>
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <main+0x368>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	491f      	ldr	r1, [pc, #124]	@ (8000c54 <main+0x348>)
 8000bd8:	468c      	mov	ip, r1
 8000bda:	4463      	add	r3, ip
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d800      	bhi.n	8000be2 <main+0x2d6>
 8000be0:	e70d      	b.n	80009fe <main+0xf2>
		   {
			   reboot_state_off = 0;
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <main+0x364>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
			   PowerOff ();
 8000be8:	f7ff fe3a 	bl	8000860 <PowerOff>
			   reboot_time = HAL_GetTick();
 8000bec:	f000 fb98 	bl	8001320 <HAL_GetTick>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <main+0x368>)
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e702      	b.n	80009fe <main+0xf2>
		   }
	   }
	   else
	   {
		   if(HAL_GetTick() > reboot_time + TIME_POWER_ON)
 8000bf8:	f000 fb92 	bl	8001320 <HAL_GetTick>
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <main+0x368>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4920      	ldr	r1, [pc, #128]	@ (8000c84 <main+0x378>)
 8000c04:	468c      	mov	ip, r1
 8000c06:	4463      	add	r3, ip
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d800      	bhi.n	8000c0e <main+0x302>
 8000c0c:	e6f7      	b.n	80009fe <main+0xf2>
		   {
			   PowerOn ();
 8000c0e:	f7ff fe01 	bl	8000814 <PowerOn>
			   reboot_flag = 0;
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <main+0x35c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 8000c18:	e6f1      	b.n	80009fe <main+0xf2>
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	20000155 	.word	0x20000155
 8000c20:	200000ac 	.word	0x200000ac
 8000c24:	50000400 	.word	0x50000400
 8000c28:	2000014c 	.word	0x2000014c
 8000c2c:	20000140 	.word	0x20000140
 8000c30:	50000800 	.word	0x50000800
 8000c34:	20000145 	.word	0x20000145
 8000c38:	20000144 	.word	0x20000144
 8000c3c:	20000154 	.word	0x20000154
 8000c40:	20000258 	.word	0x20000258
 8000c44:	08004728 	.word	0x08004728
 8000c48:	20000264 	.word	0x20000264
 8000c4c:	080046b8 	.word	0x080046b8
 8000c50:	080046c8 	.word	0x080046c8
 8000c54:	00007530 	.word	0x00007530
 8000c58:	080046d8 	.word	0x080046d8
 8000c5c:	080046e8 	.word	0x080046e8
 8000c60:	080046f0 	.word	0x080046f0
 8000c64:	080046f8 	.word	0x080046f8
 8000c68:	20000265 	.word	0x20000265
 8000c6c:	08004704 	.word	0x08004704
 8000c70:	20000266 	.word	0x20000266
 8000c74:	20000268 	.word	0x20000268
 8000c78:	2000025c 	.word	0x2000025c
 8000c7c:	08004710 	.word	0x08004710
 8000c80:	0800471c 	.word	0x0800471c
 8000c84:	00002710 	.word	0x00002710

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f7ff fc93 	bl	80005b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	f7ff fca4 	bl	80005e0 <LL_FLASH_GetLatency>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d1fa      	bne.n	8000c94 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000c9e:	f7ff fbb7 	bl	8000410 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	f7ff fbc2 	bl	800042c <LL_RCC_HSI_IsReady>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d1fa      	bne.n	8000ca4 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000cae:	2380      	movs	r3, #128	@ 0x80
 8000cb0:	059b      	lsls	r3, r3, #22
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fc3a 	bl	8000530 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cbc:	f7ff fc16 	bl	80004ec <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000cc0:	f7ff fc56 	bl	8000570 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	f7ff fc1f 	bl	8000508 <LL_RCC_PLL_IsReady>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d1fa      	bne.n	8000cc6 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fbdf 	bl	8000494 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f7ff fbbc 	bl	8000454 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	f7ff fbcd 	bl	800047c <LL_RCC_GetSysClkSource>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	d1fa      	bne.n	8000cde <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fbe9 	bl	80004c0 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <SystemClock_Config+0x84>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f003 f80d 	bl	8003d10 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 fab6 	bl	8001268 <HAL_InitTick>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000d00:	f000 f968 	bl	8000fd4 <Error_Handler>
  }
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	03d09000 	.word	0x03d09000

08000d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d14:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d16:	4a24      	ldr	r2, [pc, #144]	@ (8000da8 <MX_USART2_UART_Init+0x98>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1a:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d1c:	22e1      	movs	r2, #225	@ 0xe1
 8000d1e:	0252      	lsls	r2, r2, #9
 8000d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 feca 	bl	8001af4 <HAL_UART_Init>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d64:	f000 f936 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d68:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 fddb 	bl	8003928 <HAL_UARTEx_SetTxFifoThreshold>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d76:	f000 f92d 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 fe12 	bl	80039a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d88:	f000 f924 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <MX_USART2_UART_Init+0x94>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f002 fd90 	bl	80038b4 <HAL_UARTEx_DisableFifoMode>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f91c 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	200000ac 	.word	0x200000ac
 8000da8:	40004400 	.word	0x40004400

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	003b      	movs	r3, r7
 8000db4:	0018      	movs	r0, r3
 8000db6:	2318      	movs	r3, #24
 8000db8:	001a      	movs	r2, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f002 ffd6 	bl	8003d6c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	f7ff fbe3 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	f7ff fbe0 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff fbdd 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f7ff fbda 	bl	800058c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000dd8:	23a0      	movs	r3, #160	@ 0xa0
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	2102      	movs	r1, #2
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fc29 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4a78      	ldr	r2, [pc, #480]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f7ff fc22 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	4a75      	ldr	r2, [pc, #468]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000df8:	0019      	movs	r1, r3
 8000dfa:	0010      	movs	r0, r2
 8000dfc:	f7ff fc1b 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	4a71      	ldr	r2, [pc, #452]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000e06:	0019      	movs	r1, r3
 8000e08:	0010      	movs	r0, r2
 8000e0a:	f7ff fc14 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fc0f 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4a6b      	ldr	r2, [pc, #428]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f7ff fc08 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4a68      	ldr	r2, [pc, #416]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0010      	movs	r0, r2
 8000e30:	f7ff fc01 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	0192      	lsls	r2, r2, #6
 8000e3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2202      	movs	r2, #2
 8000e46:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000e48:	003b      	movs	r3, r7
 8000e4a:	4a61      	ldr	r2, [pc, #388]	@ (8000fd0 <MX_GPIO_Init+0x224>)
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	0010      	movs	r0, r2
 8000e50:	f002 ff03 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DE2_Pin;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2202      	movs	r2, #2
 8000e58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e60:	003b      	movs	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6c:	003b      	movs	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DE2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	003a      	movs	r2, r7
 8000e74:	23a0      	movs	r3, #160	@ 0xa0
 8000e76:	05db      	lsls	r3, r3, #23
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f002 feed 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RD_EN_Pin;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2204      	movs	r2, #4
 8000e84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2201      	movs	r2, #1
 8000e90:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RD_EN_GPIO_Port, &GPIO_InitStruct);
 8000e92:	003b      	movs	r3, r7
 8000e94:	4a4d      	ldr	r2, [pc, #308]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f002 fede 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PRECHRG_Pin;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2280      	movs	r2, #128	@ 0x80
 8000ea2:	00d2      	lsls	r2, r2, #3
 8000ea4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eac:	003b      	movs	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(PRECHRG_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	4a42      	ldr	r2, [pc, #264]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	f002 fec8 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MAINS_REL_Pin;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MAINS_REL_GPIO_Port, &GPIO_InitStruct);
 8000eea:	003b      	movs	r3, r7
 8000eec:	4a37      	ldr	r2, [pc, #220]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000eee:	0019      	movs	r1, r3
 8000ef0:	0010      	movs	r0, r2
 8000ef2:	f002 feb2 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CMP_400V_Pin;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	0152      	lsls	r2, r2, #5
 8000efc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000efe:	003b      	movs	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000f04:	003b      	movs	r3, r7
 8000f06:	2202      	movs	r2, #2
 8000f08:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CMP_400V_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000f0e:	0019      	movs	r1, r3
 8000f10:	0010      	movs	r0, r2
 8000f12:	f002 fea2 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SET_SERIAL_Pin;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	0192      	lsls	r2, r2, #6
 8000f1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f1e:	003b      	movs	r3, r7
 8000f20:	2201      	movs	r2, #1
 8000f22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f24:	003b      	movs	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f30:	003b      	movs	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SET_SERIAL_GPIO_Port, &GPIO_InitStruct);
 8000f36:	003b      	movs	r3, r7
 8000f38:	4a24      	ldr	r2, [pc, #144]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	f002 fe8c 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000f60:	003b      	movs	r3, r7
 8000f62:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000f64:	0019      	movs	r1, r3
 8000f66:	0010      	movs	r0, r2
 8000f68:	f002 fe77 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	0052      	lsls	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2201      	movs	r2, #1
 8000f78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000f90:	0019      	movs	r1, r3
 8000f92:	0010      	movs	r0, r2
 8000f94:	f002 fe61 	bl	8003c5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2280      	movs	r2, #128	@ 0x80
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	003b      	movs	r3, r7
 8000fba:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <MX_GPIO_Init+0x220>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f002 fe4b 	bl	8003c5a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	50000400 	.word	0x50000400
 8000fd0:	50000800 	.word	0x50000800

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <LL_RCC_SetUSARTClockSource>:
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	0c12      	lsrs	r2, r2, #16
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	041b      	lsls	r3, r3, #16
 8000ffa:	0c1a      	lsrs	r2, r3, #16
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000ffe:	430a      	orrs	r2, r1
 8001000:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_MspInit+0x44>)
 8001018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <HAL_MspInit+0x44>)
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <HAL_MspInit+0x44>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	2201      	movs	r2, #1
 8001028:	4013      	ands	r3, r2
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_MspInit+0x44>)
 8001030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <HAL_MspInit+0x44>)
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	0549      	lsls	r1, r1, #21
 8001038:	430a      	orrs	r2, r1
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_MspInit+0x44>)
 800103e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	055b      	lsls	r3, r3, #21
 8001044:	4013      	ands	r3, r2
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b08b      	sub	sp, #44	@ 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	2414      	movs	r4, #20
 8001062:	193b      	adds	r3, r7, r4
 8001064:	0018      	movs	r0, r3
 8001066:	2314      	movs	r3, #20
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f002 fe7e 	bl	8003d6c <memset>
  if(huart->Instance==USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <HAL_UART_MspInit+0xa8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d13d      	bne.n	80010f6 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800107a:	23c0      	movs	r3, #192	@ 0xc0
 800107c:	031b      	lsls	r3, r3, #12
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff ffae 	bl	8000fe0 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <HAL_UART_MspInit+0xac>)
 8001086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_UART_MspInit+0xac>)
 800108a:	2180      	movs	r1, #128	@ 0x80
 800108c:	0289      	lsls	r1, r1, #10
 800108e:	430a      	orrs	r2, r1
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_UART_MspInit+0xac>)
 8001094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_UART_MspInit+0xac>)
 80010a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_UART_MspInit+0xac>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_UART_MspInit+0xac>)
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	2201      	movs	r2, #1
 80010b2:	4013      	ands	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010b8:	0021      	movs	r1, r4
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	220c      	movs	r2, #12
 80010be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2202      	movs	r2, #2
 80010c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2201      	movs	r2, #1
 80010d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	187a      	adds	r2, r7, r1
 80010da:	23a0      	movs	r3, #160	@ 0xa0
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	0011      	movs	r1, r2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 faf5 	bl	80016d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	201c      	movs	r0, #28
 80010ec:	f000 f9f2 	bl	80014d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010f0:	201c      	movs	r0, #28
 80010f2:	f000 fa04 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b00b      	add	sp, #44	@ 0x2c
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	40004400 	.word	0x40004400
 8001104:	40021000 	.word	0x40021000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	46c0      	nop			@ (mov r8, r8)
 800110e:	e7fd      	b.n	800110c <NMI_Handler+0x4>

08001110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001114:	46c0      	nop			@ (mov r8, r8)
 8001116:	e7fd      	b.n	8001114 <HardFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  LED_GreenHandler ();
 8001130:	f7ff fabe 	bl	80006b0 <LED_GreenHandler>
  SwitchTimingHandlar();
 8001134:	f7ff faa2 	bl	800067c <SwitchTimingHandlar>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f8e0 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	46c0      	nop			@ (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <USART2_IRQHandler+0x14>)
 800114a:	0018      	movs	r0, r3
 800114c:	f000 fe24 	bl	8001d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	200000ac 	.word	0x200000ac

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f002 fe0c 	bl	8003da8 <__errno>
 8001190:	0003      	movs	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	2301      	movs	r3, #1
 8001198:	425b      	negs	r3, r3
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	18d2      	adds	r2, r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <_sbrk+0x64>)
 80011ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b006      	add	sp, #24
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20009000 	.word	0x20009000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	2000026c 	.word	0x2000026c
 80011c4:	200003c0 	.word	0x200003c0

080011c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d8:	f7ff fff6 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopForever+0x6>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopForever+0xe>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopForever+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001202:	f002 fdd7 	bl	8003db4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001206:	f7ff fb81 	bl	800090c <main>

0800120a <LoopForever>:

LoopForever:
  b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   r0, =_estack
 800120c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001218:	080047c4 	.word	0x080047c4
  ldr r2, =_sbss
 800121c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001220:	200003bc 	.word	0x200003bc

08001224 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_IRQHandler>
	...

08001228 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_Init+0x3c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Init+0x3c>)
 800123a:	2180      	movs	r1, #128	@ 0x80
 800123c:	0049      	lsls	r1, r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001242:	2003      	movs	r0, #3
 8001244:	f000 f810 	bl	8001268 <HAL_InitTick>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d003      	beq.n	8001254 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	e001      	b.n	8001258 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fedc 	bl	8001010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	230f      	movs	r3, #15
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <HAL_InitTick+0x88>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d02b      	beq.n	80012d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <HAL_InitTick+0x8c>)
 8001282:	681c      	ldr	r4, [r3, #0]
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_InitTick+0x88>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	0019      	movs	r1, r3
 800128a:	23fa      	movs	r3, #250	@ 0xfa
 800128c:	0098      	lsls	r0, r3, #2
 800128e:	f7fe ff49 	bl	8000124 <__udivsi3>
 8001292:	0003      	movs	r3, r0
 8001294:	0019      	movs	r1, r3
 8001296:	0020      	movs	r0, r4
 8001298:	f7fe ff44 	bl	8000124 <__udivsi3>
 800129c:	0003      	movs	r3, r0
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 f93d 	bl	800151e <HAL_SYSTICK_Config>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d112      	bne.n	80012ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d80a      	bhi.n	80012c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	2301      	movs	r3, #1
 80012b2:	425b      	negs	r3, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 f90c 	bl	80014d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <HAL_InitTick+0x90>)
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e00d      	b.n	80012e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e008      	b.n	80012e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ce:	230f      	movs	r3, #15
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e003      	b.n	80012e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d8:	230f      	movs	r3, #15
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012e0:	230f      	movs	r3, #15
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	781b      	ldrb	r3, [r3, #0]
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b005      	add	sp, #20
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	2000003c 	.word	0x2000003c
 80012f4:	20000034 	.word	0x20000034
 80012f8:	20000038 	.word	0x20000038

080012fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_IncTick+0x1c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	001a      	movs	r2, r3
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_IncTick+0x20>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	18d2      	adds	r2, r2, r3
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_IncTick+0x20>)
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	46c0      	nop			@ (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	2000003c 	.word	0x2000003c
 800131c:	20000270 	.word	0x20000270

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b02      	ldr	r3, [pc, #8]	@ (8001330 <HAL_GetTick+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	20000270 	.word	0x20000270

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff fff0 	bl	8001320 <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	001a      	movs	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	189b      	adds	r3, r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	f7ff ffe0 	bl	8001320 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	2000003c 	.word	0x2000003c

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b7f      	cmp	r3, #127	@ 0x7f
 800138e:	d809      	bhi.n	80013a4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	231f      	movs	r3, #31
 8001398:	401a      	ands	r2, r3
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_EnableIRQ+0x30>)
 800139c:	2101      	movs	r1, #1
 800139e:	4091      	lsls	r1, r2
 80013a0:	000a      	movs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013c4:	d828      	bhi.n	8001418 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <__NVIC_SetPriority+0xd4>)
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	33c0      	adds	r3, #192	@ 0xc0
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	589b      	ldr	r3, [r3, r2]
 80013d6:	1dfa      	adds	r2, r7, #7
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	0011      	movs	r1, r2
 80013dc:	2203      	movs	r2, #3
 80013de:	400a      	ands	r2, r1
 80013e0:	00d2      	lsls	r2, r2, #3
 80013e2:	21ff      	movs	r1, #255	@ 0xff
 80013e4:	4091      	lsls	r1, r2
 80013e6:	000a      	movs	r2, r1
 80013e8:	43d2      	mvns	r2, r2
 80013ea:	401a      	ands	r2, r3
 80013ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	22ff      	movs	r2, #255	@ 0xff
 80013f4:	401a      	ands	r2, r3
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	0018      	movs	r0, r3
 80013fc:	2303      	movs	r3, #3
 80013fe:	4003      	ands	r3, r0
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001404:	481f      	ldr	r0, [pc, #124]	@ (8001484 <__NVIC_SetPriority+0xd4>)
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	430a      	orrs	r2, r1
 8001410:	33c0      	adds	r3, #192	@ 0xc0
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001416:	e031      	b.n	800147c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <__NVIC_SetPriority+0xd8>)
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	0019      	movs	r1, r3
 8001420:	230f      	movs	r3, #15
 8001422:	400b      	ands	r3, r1
 8001424:	3b08      	subs	r3, #8
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3306      	adds	r3, #6
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1dfa      	adds	r2, r7, #7
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	0011      	movs	r1, r2
 8001438:	2203      	movs	r2, #3
 800143a:	400a      	ands	r2, r1
 800143c:	00d2      	lsls	r2, r2, #3
 800143e:	21ff      	movs	r1, #255	@ 0xff
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	43d2      	mvns	r2, r2
 8001446:	401a      	ands	r2, r3
 8001448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	22ff      	movs	r2, #255	@ 0xff
 8001450:	401a      	ands	r2, r3
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	0018      	movs	r0, r3
 8001458:	2303      	movs	r3, #3
 800145a:	4003      	ands	r3, r0
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <__NVIC_SetPriority+0xd8>)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	001c      	movs	r4, r3
 8001468:	230f      	movs	r3, #15
 800146a:	4023      	ands	r3, r4
 800146c:	3b08      	subs	r3, #8
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	430a      	orrs	r2, r1
 8001472:	3306      	adds	r3, #6
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	18c3      	adds	r3, r0, r3
 8001478:	3304      	adds	r3, #4
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b003      	add	sp, #12
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1e5a      	subs	r2, r3, #1
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	045b      	lsls	r3, r3, #17
 800149c:	429a      	cmp	r2, r3
 800149e:	d301      	bcc.n	80014a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a0:	2301      	movs	r3, #1
 80014a2:	e010      	b.n	80014c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <SysTick_Config+0x44>)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	3a01      	subs	r2, #1
 80014aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ac:	2301      	movs	r3, #1
 80014ae:	425b      	negs	r3, r3
 80014b0:	2103      	movs	r1, #3
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff ff7c 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <SysTick_Config+0x44>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <SysTick_Config+0x44>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	210f      	movs	r1, #15
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	1c02      	adds	r2, r0, #0
 80014e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	0002      	movs	r2, r0
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff33 	bl	800137c <__NVIC_EnableIRQ>
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ffaf 	bl	800148c <SysTick_Config>
 800152e:	0003      	movs	r3, r0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e050      	b.n	80015ec <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2225      	movs	r2, #37	@ 0x25
 800154e:	5c9b      	ldrb	r3, [r3, r2]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d008      	beq.n	8001568 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2204      	movs	r2, #4
 800155a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2224      	movs	r2, #36	@ 0x24
 8001560:	2100      	movs	r1, #0
 8001562:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e041      	b.n	80015ec <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	210e      	movs	r1, #14
 8001574:	438a      	bics	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	491c      	ldr	r1, [pc, #112]	@ (80015f4 <HAL_DMA_Abort+0xbc>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2101      	movs	r1, #1
 8001594:	438a      	bics	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <HAL_DMA_Abort+0xc0>)
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	221c      	movs	r2, #28
 80015a2:	4013      	ands	r3, r2
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <HAL_DMA_Abort+0xc0>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ca:	490a      	ldr	r1, [pc, #40]	@ (80015f4 <HAL_DMA_Abort+0xbc>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2225      	movs	r2, #37	@ 0x25
 80015de:	2101      	movs	r1, #1
 80015e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2224      	movs	r2, #36	@ 0x24
 80015e6:	2100      	movs	r1, #0
 80015e8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	fffffeff 	.word	0xfffffeff
 80015f8:	40020000 	.word	0x40020000

080015fc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	210f      	movs	r1, #15
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2225      	movs	r2, #37	@ 0x25
 8001610:	5c9b      	ldrb	r3, [r3, r2]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d006      	beq.n	8001626 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2204      	movs	r2, #4
 800161c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e049      	b.n	80016ba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	210e      	movs	r1, #14
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	438a      	bics	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001650:	491d      	ldr	r1, [pc, #116]	@ (80016c8 <HAL_DMA_Abort_IT+0xcc>)
 8001652:	400a      	ands	r2, r1
 8001654:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_DMA_Abort_IT+0xd0>)
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	221c      	movs	r2, #28
 8001660:	4013      	ands	r3, r2
 8001662:	2201      	movs	r2, #1
 8001664:	409a      	lsls	r2, r3
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_DMA_Abort_IT+0xd0>)
 8001668:	430a      	orrs	r2, r1
 800166a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001674:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00c      	beq.n	8001698 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001688:	490f      	ldr	r1, [pc, #60]	@ (80016c8 <HAL_DMA_Abort_IT+0xcc>)
 800168a:	400a      	ands	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001696:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2225      	movs	r2, #37	@ 0x25
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2224      	movs	r2, #36	@ 0x24
 80016a4:	2100      	movs	r1, #0
 80016a6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	0010      	movs	r0, r2
 80016b8:	4798      	blx	r3
    }
  }
  return status;
 80016ba:	230f      	movs	r3, #15
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	781b      	ldrb	r3, [r3, #0]
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b004      	add	sp, #16
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	fffffeff 	.word	0xfffffeff
 80016cc:	40020000 	.word	0x40020000

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e147      	b.n	8001970 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4091      	lsls	r1, r2
 80016ea:	000a      	movs	r2, r1
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d100      	bne.n	80016f8 <HAL_GPIO_Init+0x28>
 80016f6:	e138      	b.n	800196a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	4013      	ands	r3, r2
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_Init+0x40>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	4013      	ands	r3, r2
 800170c:	2b02      	cmp	r3, #2
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	409a      	lsls	r2, r3
 800171e:	0013      	movs	r3, r2
 8001720:	43da      	mvns	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	43da      	mvns	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	2201      	movs	r2, #1
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2203      	movs	r2, #3
 8001778:	4013      	ands	r3, r2
 800177a:	2b03      	cmp	r3, #3
 800177c:	d017      	beq.n	80017ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	409a      	lsls	r2, r3
 800178c:	0013      	movs	r3, r2
 800178e:	43da      	mvns	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	58d3      	ldr	r3, [r2, r3]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2207      	movs	r2, #7
 80017cc:	4013      	ands	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2107      	movs	r1, #7
 80017e6:	400b      	ands	r3, r1
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	6939      	ldr	r1, [r7, #16]
 8001800:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	43da      	mvns	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	401a      	ands	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	23c0      	movs	r3, #192	@ 0xc0
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d100      	bne.n	8001844 <HAL_GPIO_Init+0x174>
 8001842:	e092      	b.n	800196a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001844:	4a50      	ldr	r2, [pc, #320]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3318      	adds	r3, #24
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	589b      	ldr	r3, [r3, r2]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2203      	movs	r2, #3
 8001856:	4013      	ands	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	220f      	movs	r2, #15
 800185c:	409a      	lsls	r2, r3
 800185e:	0013      	movs	r3, r2
 8001860:	43da      	mvns	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	23a0      	movs	r3, #160	@ 0xa0
 800186c:	05db      	lsls	r3, r3, #23
 800186e:	429a      	cmp	r2, r3
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x1ca>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a45      	ldr	r2, [pc, #276]	@ (800198c <HAL_GPIO_Init+0x2bc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x1c6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a44      	ldr	r2, [pc, #272]	@ (8001990 <HAL_GPIO_Init+0x2c0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x1c2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a43      	ldr	r2, [pc, #268]	@ (8001994 <HAL_GPIO_Init+0x2c4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x1be>
 800188a:	2303      	movs	r3, #3
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 800188e:	2305      	movs	r3, #5
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 800189a:	2300      	movs	r3, #0
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	2103      	movs	r1, #3
 80018a0:	400a      	ands	r2, r1
 80018a2:	00d2      	lsls	r2, r2, #3
 80018a4:	4093      	lsls	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018ac:	4936      	ldr	r1, [pc, #216]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3318      	adds	r3, #24
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ba:	4b33      	ldr	r3, [pc, #204]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	035b      	lsls	r3, r3, #13
 80018d2:	4013      	ands	r3, r2
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018de:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018e4:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	039b      	lsls	r3, r3, #14
 80018fc:	4013      	ands	r3, r2
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800190e:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 8001910:	2384      	movs	r3, #132	@ 0x84
 8001912:	58d3      	ldr	r3, [r2, r3]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43da      	mvns	r2, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	029b      	lsls	r3, r3, #10
 8001928:	4013      	ands	r3, r2
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001934:	4914      	ldr	r1, [pc, #80]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 8001936:	2284      	movs	r2, #132	@ 0x84
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800193c:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	58d3      	ldr	r3, [r2, r3]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43da      	mvns	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	025b      	lsls	r3, r3, #9
 8001956:	4013      	ands	r3, r2
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001962:	4909      	ldr	r1, [pc, #36]	@ (8001988 <HAL_GPIO_Init+0x2b8>)
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	40da      	lsrs	r2, r3
 8001978:	1e13      	subs	r3, r2, #0
 800197a:	d000      	beq.n	800197e <HAL_GPIO_Init+0x2ae>
 800197c:	e6b0      	b.n	80016e0 <HAL_GPIO_Init+0x10>
  }
}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b006      	add	sp, #24
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021800 	.word	0x40021800
 800198c:	50000400 	.word	0x50000400
 8001990:	50000800 	.word	0x50000800
 8001994:	50000c00 	.word	0x50000c00

08001998 <LL_RCC_GetAPB1Prescaler>:
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	23e0      	movs	r3, #224	@ 0xe0
 80019a2:	01db      	lsls	r3, r3, #7
 80019a4:	4013      	ands	r3, r2
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b6:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2238      	movs	r2, #56	@ 0x38
 80019bc:	4013      	ands	r3, r2
 80019be:	d10f      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019c0:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0adb      	lsrs	r3, r3, #11
 80019c6:	2207      	movs	r2, #7
 80019c8:	4013      	ands	r3, r2
 80019ca:	2201      	movs	r2, #1
 80019cc:	409a      	lsls	r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	4835      	ldr	r0, [pc, #212]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xfc>)
 80019d6:	f7fe fba5 	bl	8000124 <__udivsi3>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e05d      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e0:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2238      	movs	r2, #56	@ 0x38
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019ec:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x100>)
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	e054      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2238      	movs	r2, #56	@ 0x38
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d138      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2203      	movs	r2, #3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	2207      	movs	r2, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	3301      	adds	r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	4824      	ldr	r0, [pc, #144]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a20:	f7fe fb80 	bl	8000124 <__udivsi3>
 8001a24:	0003      	movs	r3, r0
 8001a26:	0019      	movs	r1, r3
 8001a28:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	227f      	movs	r2, #127	@ 0x7f
 8001a30:	4013      	ands	r3, r2
 8001a32:	434b      	muls	r3, r1
 8001a34:	617b      	str	r3, [r7, #20]
        break;
 8001a36:	e00d      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	481c      	ldr	r0, [pc, #112]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a3c:	f7fe fb72 	bl	8000124 <__udivsi3>
 8001a40:	0003      	movs	r3, r0
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	227f      	movs	r2, #127	@ 0x7f
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	434b      	muls	r3, r1
 8001a50:	617b      	str	r3, [r7, #20]
        break;
 8001a52:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0f5b      	lsrs	r3, r3, #29
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	3301      	adds	r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7fe fb5d 	bl	8000124 <__udivsi3>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e015      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a70:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2238      	movs	r2, #56	@ 0x38
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d103      	bne.n	8001a84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2238      	movs	r2, #56	@ 0x38
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b18      	cmp	r3, #24
 8001a8e:	d103      	bne.n	8001a98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a90:	23fa      	movs	r3, #250	@ 0xfa
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	e001      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a9c:	693b      	ldr	r3, [r7, #16]
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b006      	add	sp, #24
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	007a1200 	.word	0x007a1200

08001ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	20000034 	.word	0x20000034

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001acc:	f7ff fff2 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad0:	0004      	movs	r4, r0
 8001ad2:	f7ff ff61 	bl	8001998 <LL_RCC_GetAPB1Prescaler>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	0b1a      	lsrs	r2, r3, #12
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	58d3      	ldr	r3, [r2, r3]
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	40dc      	lsrs	r4, r3
 8001ae6:	0023      	movs	r3, r4
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	08004740 	.word	0x08004740

08001af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e046      	b.n	8001b94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2288      	movs	r2, #136	@ 0x88
 8001b0a:	589b      	ldr	r3, [r3, r2]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2284      	movs	r2, #132	@ 0x84
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff fa9c 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2288      	movs	r2, #136	@ 0x88
 8001b24:	2124      	movs	r1, #36	@ 0x24
 8001b26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	438a      	bics	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 fe0e 	bl	8002764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 fc66 	bl	800241c <UART_SetConfig>
 8001b50:	0003      	movs	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01c      	b.n	8001b94 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	490d      	ldr	r1, [pc, #52]	@ (8001b9c <HAL_UART_Init+0xa8>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	212a      	movs	r1, #42	@ 0x2a
 8001b76:	438a      	bics	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fe9d 	bl	80028cc <UART_CheckIdleState>
 8001b92:	0003      	movs	r3, r0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	ffffb7ff 	.word	0xffffb7ff

08001ba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	1dbb      	adds	r3, r7, #6
 8001bae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2288      	movs	r2, #136	@ 0x88
 8001bb4:	589b      	ldr	r3, [r3, r2]
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d000      	beq.n	8001bbc <HAL_UART_Transmit+0x1c>
 8001bba:	e090      	b.n	8001cde <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_UART_Transmit+0x2a>
 8001bc2:	1dbb      	adds	r3, r7, #6
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e088      	b.n	8001ce0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	015b      	lsls	r3, r3, #5
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d109      	bne.n	8001bee <HAL_UART_Transmit+0x4e>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d001      	beq.n	8001bee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e078      	b.n	8001ce0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2290      	movs	r2, #144	@ 0x90
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2288      	movs	r2, #136	@ 0x88
 8001bfa:	2121      	movs	r1, #33	@ 0x21
 8001bfc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bfe:	f7ff fb8f 	bl	8001320 <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1dba      	adds	r2, r7, #6
 8001c0a:	2154      	movs	r1, #84	@ 0x54
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1dba      	adds	r2, r7, #6
 8001c14:	2156      	movs	r1, #86	@ 0x56
 8001c16:	8812      	ldrh	r2, [r2, #0]
 8001c18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	015b      	lsls	r3, r3, #5
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d108      	bne.n	8001c38 <HAL_UART_Transmit+0x98>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d104      	bne.n	8001c38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e003      	b.n	8001c40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c40:	e030      	b.n	8001ca4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2180      	movs	r1, #128	@ 0x80
 8001c50:	f000 fee6 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2288      	movs	r2, #136	@ 0x88
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e03d      	b.n	8001ce0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10b      	bne.n	8001c82 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	001a      	movs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	05d2      	lsls	r2, r2, #23
 8001c76:	0dd2      	lsrs	r2, r2, #23
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	e007      	b.n	8001c92 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2256      	movs	r2, #86	@ 0x56
 8001c96:	5a9b      	ldrh	r3, [r3, r2]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2256      	movs	r2, #86	@ 0x56
 8001ca2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2256      	movs	r2, #86	@ 0x56
 8001ca8:	5a9b      	ldrh	r3, [r3, r2]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1c8      	bne.n	8001c42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2140      	movs	r1, #64	@ 0x40
 8001cbe:	f000 feaf 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2288      	movs	r2, #136	@ 0x88
 8001cca:	2120      	movs	r1, #32
 8001ccc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e006      	b.n	8001ce0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2288      	movs	r2, #136	@ 0x88
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
  }
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b008      	add	sp, #32
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	1dbb      	adds	r3, r7, #6
 8001cf4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	228c      	movs	r2, #140	@ 0x8c
 8001cfa:	589b      	ldr	r3, [r3, r2]
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d145      	bne.n	8001d8c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_UART_Receive_IT+0x26>
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e03d      	b.n	8001d8e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	015b      	lsls	r3, r3, #5
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d109      	bne.n	8001d32 <HAL_UART_Receive_IT+0x4a>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d001      	beq.n	8001d32 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e02d      	b.n	8001d8e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	4013      	ands	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d46:	f3ef 8310 	mrs	r3, PRIMASK
 8001d4a:	613b      	str	r3, [r7, #16]
  return(result);
 8001d4c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	2301      	movs	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f383 8810 	msr	PRIMASK, r3
}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	04c9      	lsls	r1, r1, #19
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f383 8810 	msr	PRIMASK, r3
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d7a:	1dbb      	adds	r3, r7, #6
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 febc 	bl	8002b00 <UART_Start_Receive_IT>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	e000      	b.n	8001d8e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
  }
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b008      	add	sp, #32
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b0aa      	sub	sp, #168	@ 0xa8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	22a4      	movs	r2, #164	@ 0xa4
 8001da8:	18b9      	adds	r1, r7, r2
 8001daa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	20a0      	movs	r0, #160	@ 0xa0
 8001db4:	1839      	adds	r1, r7, r0
 8001db6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	249c      	movs	r4, #156	@ 0x9c
 8001dc0:	1939      	adds	r1, r7, r4
 8001dc2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001dc4:	0011      	movs	r1, r2
 8001dc6:	18bb      	adds	r3, r7, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4aa2      	ldr	r2, [pc, #648]	@ (8002054 <HAL_UART_IRQHandler+0x2bc>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2298      	movs	r2, #152	@ 0x98
 8001dd0:	18bd      	adds	r5, r7, r2
 8001dd2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001dd4:	18bb      	adds	r3, r7, r2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11a      	bne.n	8001e12 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2220      	movs	r2, #32
 8001de2:	4013      	ands	r3, r2
 8001de4:	d015      	beq.n	8001e12 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2220      	movs	r2, #32
 8001dec:	4013      	ands	r3, r2
 8001dee:	d105      	bne.n	8001dfc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	055b      	lsls	r3, r3, #21
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d00a      	beq.n	8001e12 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <HAL_UART_IRQHandler+0x6e>
 8001e04:	e2dc      	b.n	80023c0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	0010      	movs	r0, r2
 8001e0e:	4798      	blx	r3
      }
      return;
 8001e10:	e2d6      	b.n	80023c0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e12:	2398      	movs	r3, #152	@ 0x98
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d100      	bne.n	8001e1e <HAL_UART_IRQHandler+0x86>
 8001e1c:	e122      	b.n	8002064 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001e1e:	239c      	movs	r3, #156	@ 0x9c
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a8c      	ldr	r2, [pc, #560]	@ (8002058 <HAL_UART_IRQHandler+0x2c0>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	d106      	bne.n	8001e38 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001e2a:	23a0      	movs	r3, #160	@ 0xa0
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a8a      	ldr	r2, [pc, #552]	@ (800205c <HAL_UART_IRQHandler+0x2c4>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	d100      	bne.n	8001e38 <HAL_UART_IRQHandler+0xa0>
 8001e36:	e115      	b.n	8002064 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e38:	23a4      	movs	r3, #164	@ 0xa4
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d012      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
 8001e44:	23a0      	movs	r3, #160	@ 0xa0
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2290      	movs	r2, #144	@ 0x90
 8001e5e:	589b      	ldr	r3, [r3, r2]
 8001e60:	2201      	movs	r2, #1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2190      	movs	r1, #144	@ 0x90
 8001e68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e6a:	23a4      	movs	r3, #164	@ 0xa4
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d011      	beq.n	8001e9a <HAL_UART_IRQHandler+0x102>
 8001e76:	239c      	movs	r3, #156	@ 0x9c
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d00b      	beq.n	8001e9a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2202      	movs	r2, #2
 8001e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2290      	movs	r2, #144	@ 0x90
 8001e8e:	589b      	ldr	r3, [r3, r2]
 8001e90:	2204      	movs	r2, #4
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2190      	movs	r1, #144	@ 0x90
 8001e98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e9a:	23a4      	movs	r3, #164	@ 0xa4
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d011      	beq.n	8001eca <HAL_UART_IRQHandler+0x132>
 8001ea6:	239c      	movs	r3, #156	@ 0x9c
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2290      	movs	r2, #144	@ 0x90
 8001ebe:	589b      	ldr	r3, [r3, r2]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2190      	movs	r1, #144	@ 0x90
 8001ec8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001eca:	23a4      	movs	r3, #164	@ 0xa4
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d017      	beq.n	8001f06 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001ed6:	23a0      	movs	r3, #160	@ 0xa0
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2220      	movs	r2, #32
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d105      	bne.n	8001eee <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001ee2:	239c      	movs	r3, #156	@ 0x9c
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5b      	ldr	r2, [pc, #364]	@ (8002058 <HAL_UART_IRQHandler+0x2c0>)
 8001eea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001eec:	d00b      	beq.n	8001f06 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2290      	movs	r2, #144	@ 0x90
 8001efa:	589b      	ldr	r3, [r3, r2]
 8001efc:	2208      	movs	r2, #8
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2190      	movs	r1, #144	@ 0x90
 8001f04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001f06:	23a4      	movs	r3, #164	@ 0xa4
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_UART_IRQHandler+0x1a4>
 8001f14:	23a0      	movs	r3, #160	@ 0xa0
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	04db      	lsls	r3, r3, #19
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d00c      	beq.n	8001f3c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2280      	movs	r2, #128	@ 0x80
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2290      	movs	r2, #144	@ 0x90
 8001f30:	589b      	ldr	r3, [r3, r2]
 8001f32:	2220      	movs	r2, #32
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2190      	movs	r1, #144	@ 0x90
 8001f3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2290      	movs	r2, #144	@ 0x90
 8001f40:	589b      	ldr	r3, [r3, r2]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d100      	bne.n	8001f48 <HAL_UART_IRQHandler+0x1b0>
 8001f46:	e23d      	b.n	80023c4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001f48:	23a4      	movs	r3, #164	@ 0xa4
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	4013      	ands	r3, r2
 8001f52:	d015      	beq.n	8001f80 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001f54:	23a0      	movs	r3, #160	@ 0xa0
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d106      	bne.n	8001f6e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001f60:	239c      	movs	r3, #156	@ 0x9c
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	055b      	lsls	r3, r3, #21
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d008      	beq.n	8001f80 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2290      	movs	r2, #144	@ 0x90
 8001f84:	589b      	ldr	r3, [r3, r2]
 8001f86:	2194      	movs	r1, #148	@ 0x94
 8001f88:	187a      	adds	r2, r7, r1
 8001f8a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b40      	cmp	r3, #64	@ 0x40
 8001f98:	d004      	beq.n	8001fa4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2228      	movs	r2, #40	@ 0x28
 8001fa0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fa2:	d04c      	beq.n	800203e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 fece 	bl	8002d48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b40      	cmp	r3, #64	@ 0x40
 8001fb8:	d13c      	bne.n	8002034 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fba:	f3ef 8310 	mrs	r3, PRIMASK
 8001fbe:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001fc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc2:	2090      	movs	r0, #144	@ 0x90
 8001fc4:	183a      	adds	r2, r7, r0
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fce:	f383 8810 	msr	PRIMASK, r3
}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2140      	movs	r1, #64	@ 0x40
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	183b      	adds	r3, r7, r0
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fec:	f383 8810 	msr	PRIMASK, r3
}
 8001ff0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	589b      	ldr	r3, [r3, r2]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d016      	beq.n	800202a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	589b      	ldr	r3, [r3, r2]
 8002002:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <HAL_UART_IRQHandler+0x2c8>)
 8002004:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	589b      	ldr	r3, [r3, r2]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff faf5 	bl	80015fc <HAL_DMA_Abort_IT>
 8002012:	1e03      	subs	r3, r0, #0
 8002014:	d01c      	beq.n	8002050 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2280      	movs	r2, #128	@ 0x80
 800201a:	589b      	ldr	r3, [r3, r2]
 800201c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	2180      	movs	r1, #128	@ 0x80
 8002022:	5852      	ldr	r2, [r2, r1]
 8002024:	0010      	movs	r0, r2
 8002026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	e012      	b.n	8002050 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f000 f9e1 	bl	80023f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002032:	e00d      	b.n	8002050 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f9dc 	bl	80023f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800203c:	e008      	b.n	8002050 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f000 f9d7 	bl	80023f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2290      	movs	r2, #144	@ 0x90
 800204a:	2100      	movs	r1, #0
 800204c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800204e:	e1b9      	b.n	80023c4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002050:	46c0      	nop			@ (mov r8, r8)
    return;
 8002052:	e1b7      	b.n	80023c4 <HAL_UART_IRQHandler+0x62c>
 8002054:	0000080f 	.word	0x0000080f
 8002058:	10000001 	.word	0x10000001
 800205c:	04000120 	.word	0x04000120
 8002060:	08002e15 	.word	0x08002e15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d000      	beq.n	800206e <HAL_UART_IRQHandler+0x2d6>
 800206c:	e13e      	b.n	80022ec <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800206e:	23a4      	movs	r3, #164	@ 0xa4
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2210      	movs	r2, #16
 8002076:	4013      	ands	r3, r2
 8002078:	d100      	bne.n	800207c <HAL_UART_IRQHandler+0x2e4>
 800207a:	e137      	b.n	80022ec <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800207c:	23a0      	movs	r3, #160	@ 0xa0
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2210      	movs	r2, #16
 8002084:	4013      	ands	r3, r2
 8002086:	d100      	bne.n	800208a <HAL_UART_IRQHandler+0x2f2>
 8002088:	e130      	b.n	80022ec <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2210      	movs	r2, #16
 8002090:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2240      	movs	r2, #64	@ 0x40
 800209a:	4013      	ands	r3, r2
 800209c:	2b40      	cmp	r3, #64	@ 0x40
 800209e:	d000      	beq.n	80020a2 <HAL_UART_IRQHandler+0x30a>
 80020a0:	e0a4      	b.n	80021ec <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	589b      	ldr	r3, [r3, r2]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	217e      	movs	r1, #126	@ 0x7e
 80020ae:	187b      	adds	r3, r7, r1
 80020b0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d100      	bne.n	80020bc <HAL_UART_IRQHandler+0x324>
 80020ba:	e185      	b.n	80023c8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	225c      	movs	r2, #92	@ 0x5c
 80020c0:	5a9b      	ldrh	r3, [r3, r2]
 80020c2:	187a      	adds	r2, r7, r1
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d300      	bcc.n	80020cc <HAL_UART_IRQHandler+0x334>
 80020ca:	e17d      	b.n	80023c8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	187a      	adds	r2, r7, r1
 80020d0:	215e      	movs	r1, #94	@ 0x5e
 80020d2:	8812      	ldrh	r2, [r2, #0]
 80020d4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2280      	movs	r2, #128	@ 0x80
 80020da:	589b      	ldr	r3, [r3, r2]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2220      	movs	r2, #32
 80020e2:	4013      	ands	r3, r2
 80020e4:	d170      	bne.n	80021c8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e6:	f3ef 8310 	mrs	r3, PRIMASK
 80020ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80020ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020f0:	2301      	movs	r3, #1
 80020f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f6:	f383 8810 	msr	PRIMASK, r3
}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	49b4      	ldr	r1, [pc, #720]	@ (80023d8 <HAL_UART_IRQHandler+0x640>)
 8002108:	400a      	ands	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002112:	f383 8810 	msr	PRIMASK, r3
}
 8002116:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002118:	f3ef 8310 	mrs	r3, PRIMASK
 800211c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800211e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002120:	677b      	str	r3, [r7, #116]	@ 0x74
 8002122:	2301      	movs	r3, #1
 8002124:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002128:	f383 8810 	msr	PRIMASK, r3
}
 800212c:	46c0      	nop			@ (mov r8, r8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	438a      	bics	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002140:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002144:	f383 8810 	msr	PRIMASK, r3
}
 8002148:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800214a:	f3ef 8310 	mrs	r3, PRIMASK
 800214e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002152:	673b      	str	r3, [r7, #112]	@ 0x70
 8002154:	2301      	movs	r3, #1
 8002156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800215a:	f383 8810 	msr	PRIMASK, r3
}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2140      	movs	r1, #64	@ 0x40
 800216c:	438a      	bics	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002172:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002176:	f383 8810 	msr	PRIMASK, r3
}
 800217a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	228c      	movs	r2, #140	@ 0x8c
 8002180:	2120      	movs	r1, #32
 8002182:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218a:	f3ef 8310 	mrs	r3, PRIMASK
 800218e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002192:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002194:	2301      	movs	r3, #1
 8002196:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800219a:	f383 8810 	msr	PRIMASK, r3
}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2110      	movs	r1, #16
 80021ac:	438a      	bics	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b6:	f383 8810 	msr	PRIMASK, r3
}
 80021ba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	589b      	ldr	r3, [r3, r2]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7ff f9b8 	bl	8001538 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	225c      	movs	r2, #92	@ 0x5c
 80021d2:	5a9a      	ldrh	r2, [r3, r2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	215e      	movs	r1, #94	@ 0x5e
 80021d8:	5a5b      	ldrh	r3, [r3, r1]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0011      	movs	r1, r2
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f90d 	bl	8002404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021ea:	e0ed      	b.n	80023c8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	225c      	movs	r2, #92	@ 0x5c
 80021f0:	5a99      	ldrh	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	225e      	movs	r2, #94	@ 0x5e
 80021f6:	5a9b      	ldrh	r3, [r3, r2]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	208e      	movs	r0, #142	@ 0x8e
 80021fc:	183b      	adds	r3, r7, r0
 80021fe:	1a8a      	subs	r2, r1, r2
 8002200:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	225e      	movs	r2, #94	@ 0x5e
 8002206:	5a9b      	ldrh	r3, [r3, r2]
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d100      	bne.n	8002210 <HAL_UART_IRQHandler+0x478>
 800220e:	e0dd      	b.n	80023cc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002210:	183b      	adds	r3, r7, r0
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d100      	bne.n	800221a <HAL_UART_IRQHandler+0x482>
 8002218:	e0d8      	b.n	80023cc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221a:	f3ef 8310 	mrs	r3, PRIMASK
 800221e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002220:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002222:	2488      	movs	r4, #136	@ 0x88
 8002224:	193a      	adds	r2, r7, r4
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f383 8810 	msr	PRIMASK, r3
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4967      	ldr	r1, [pc, #412]	@ (80023dc <HAL_UART_IRQHandler+0x644>)
 8002240:	400a      	ands	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	193b      	adds	r3, r7, r4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f383 8810 	msr	PRIMASK, r3
}
 8002250:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002252:	f3ef 8310 	mrs	r3, PRIMASK
 8002256:	61bb      	str	r3, [r7, #24]
  return(result);
 8002258:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800225a:	2484      	movs	r4, #132	@ 0x84
 800225c:	193a      	adds	r2, r7, r4
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f383 8810 	msr	PRIMASK, r3
}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	495a      	ldr	r1, [pc, #360]	@ (80023e0 <HAL_UART_IRQHandler+0x648>)
 8002278:	400a      	ands	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	193b      	adds	r3, r7, r4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f383 8810 	msr	PRIMASK, r3
}
 8002288:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	228c      	movs	r2, #140	@ 0x8c
 800228e:	2120      	movs	r1, #32
 8002290:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229e:	f3ef 8310 	mrs	r3, PRIMASK
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a6:	2480      	movs	r4, #128	@ 0x80
 80022a8:	193a      	adds	r2, r7, r4
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	2301      	movs	r3, #1
 80022ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b2:	f383 8810 	msr	PRIMASK, r3
}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2110      	movs	r1, #16
 80022c4:	438a      	bics	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	193b      	adds	r3, r7, r4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d0:	f383 8810 	msr	PRIMASK, r3
}
 80022d4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022dc:	183b      	adds	r3, r7, r0
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0011      	movs	r1, r2
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f88d 	bl	8002404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80022ea:	e06f      	b.n	80023cc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80022ec:	23a4      	movs	r3, #164	@ 0xa4
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	035b      	lsls	r3, r3, #13
 80022f6:	4013      	ands	r3, r2
 80022f8:	d010      	beq.n	800231c <HAL_UART_IRQHandler+0x584>
 80022fa:	239c      	movs	r3, #156	@ 0x9c
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	03db      	lsls	r3, r3, #15
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	0352      	lsls	r2, r2, #13
 8002310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f001 fab5 	bl	8003884 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800231a:	e05a      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800231c:	23a4      	movs	r3, #164	@ 0xa4
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2280      	movs	r2, #128	@ 0x80
 8002324:	4013      	ands	r3, r2
 8002326:	d016      	beq.n	8002356 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002328:	23a0      	movs	r3, #160	@ 0xa0
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2280      	movs	r2, #128	@ 0x80
 8002330:	4013      	ands	r3, r2
 8002332:	d106      	bne.n	8002342 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002334:	239c      	movs	r3, #156	@ 0x9c
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	4013      	ands	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002346:	2b00      	cmp	r3, #0
 8002348:	d042      	beq.n	80023d0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	0010      	movs	r0, r2
 8002352:	4798      	blx	r3
    }
    return;
 8002354:	e03c      	b.n	80023d0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002356:	23a4      	movs	r3, #164	@ 0xa4
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2240      	movs	r2, #64	@ 0x40
 800235e:	4013      	ands	r3, r2
 8002360:	d00a      	beq.n	8002378 <HAL_UART_IRQHandler+0x5e0>
 8002362:	23a0      	movs	r3, #160	@ 0xa0
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2240      	movs	r2, #64	@ 0x40
 800236a:	4013      	ands	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fd66 	bl	8002e42 <UART_EndTransmit_IT>
    return;
 8002376:	e02c      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002378:	23a4      	movs	r3, #164	@ 0xa4
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	4013      	ands	r3, r2
 8002384:	d00b      	beq.n	800239e <HAL_UART_IRQHandler+0x606>
 8002386:	23a0      	movs	r3, #160	@ 0xa0
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	05db      	lsls	r3, r3, #23
 8002390:	4013      	ands	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	0018      	movs	r0, r3
 8002398:	f001 fa84 	bl	80038a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800239c:	e019      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800239e:	23a4      	movs	r3, #164	@ 0xa4
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	045b      	lsls	r3, r3, #17
 80023a8:	4013      	ands	r3, r2
 80023aa:	d012      	beq.n	80023d2 <HAL_UART_IRQHandler+0x63a>
 80023ac:	23a0      	movs	r3, #160	@ 0xa0
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da0d      	bge.n	80023d2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f001 fa6b 	bl	8003894 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023be:	e008      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	e006      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
    return;
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	e004      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80023c8:	46c0      	nop			@ (mov r8, r8)
 80023ca:	e002      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80023cc:	46c0      	nop			@ (mov r8, r8)
 80023ce:	e000      	b.n	80023d2 <HAL_UART_IRQHandler+0x63a>
    return;
 80023d0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b02a      	add	sp, #168	@ 0xa8
 80023d6:	bdb0      	pop	{r4, r5, r7, pc}
 80023d8:	fffffeff 	.word	0xfffffeff
 80023dc:	fffffedf 	.word	0xfffffedf
 80023e0:	effffffe 	.word	0xeffffffe

080023e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80023ec:	46c0      	nop			@ (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	000a      	movs	r2, r1
 800240e:	1cbb      	adds	r3, r7, #2
 8002410:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002424:	231a      	movs	r3, #26
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4313      	orrs	r3, r2
 8002442:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4abc      	ldr	r2, [pc, #752]	@ (800273c <UART_SetConfig+0x320>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4ab7      	ldr	r2, [pc, #732]	@ (8002740 <UART_SetConfig+0x324>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	4313      	orrs	r3, r2
 8002480:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4aae      	ldr	r2, [pc, #696]	@ (8002744 <UART_SetConfig+0x328>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	220f      	movs	r2, #15
 80024a0:	4393      	bics	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4aa4      	ldr	r2, [pc, #656]	@ (8002748 <UART_SetConfig+0x32c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d127      	bne.n	800250a <UART_SetConfig+0xee>
 80024ba:	4ba4      	ldr	r3, [pc, #656]	@ (800274c <UART_SetConfig+0x330>)
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	2203      	movs	r2, #3
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d017      	beq.n	80024f6 <UART_SetConfig+0xda>
 80024c6:	d81b      	bhi.n	8002500 <UART_SetConfig+0xe4>
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d00a      	beq.n	80024e2 <UART_SetConfig+0xc6>
 80024cc:	d818      	bhi.n	8002500 <UART_SetConfig+0xe4>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <UART_SetConfig+0xbc>
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d00a      	beq.n	80024ec <UART_SetConfig+0xd0>
 80024d6:	e013      	b.n	8002500 <UART_SetConfig+0xe4>
 80024d8:	231b      	movs	r3, #27
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e058      	b.n	8002594 <UART_SetConfig+0x178>
 80024e2:	231b      	movs	r3, #27
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2202      	movs	r2, #2
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e053      	b.n	8002594 <UART_SetConfig+0x178>
 80024ec:	231b      	movs	r3, #27
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2204      	movs	r2, #4
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e04e      	b.n	8002594 <UART_SetConfig+0x178>
 80024f6:	231b      	movs	r3, #27
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2208      	movs	r2, #8
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e049      	b.n	8002594 <UART_SetConfig+0x178>
 8002500:	231b      	movs	r3, #27
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2210      	movs	r2, #16
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e044      	b.n	8002594 <UART_SetConfig+0x178>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a90      	ldr	r2, [pc, #576]	@ (8002750 <UART_SetConfig+0x334>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d127      	bne.n	8002564 <UART_SetConfig+0x148>
 8002514:	4b8d      	ldr	r3, [pc, #564]	@ (800274c <UART_SetConfig+0x330>)
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	220c      	movs	r2, #12
 800251a:	4013      	ands	r3, r2
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d017      	beq.n	8002550 <UART_SetConfig+0x134>
 8002520:	d81b      	bhi.n	800255a <UART_SetConfig+0x13e>
 8002522:	2b08      	cmp	r3, #8
 8002524:	d00a      	beq.n	800253c <UART_SetConfig+0x120>
 8002526:	d818      	bhi.n	800255a <UART_SetConfig+0x13e>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <UART_SetConfig+0x116>
 800252c:	2b04      	cmp	r3, #4
 800252e:	d00a      	beq.n	8002546 <UART_SetConfig+0x12a>
 8002530:	e013      	b.n	800255a <UART_SetConfig+0x13e>
 8002532:	231b      	movs	r3, #27
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e02b      	b.n	8002594 <UART_SetConfig+0x178>
 800253c:	231b      	movs	r3, #27
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e026      	b.n	8002594 <UART_SetConfig+0x178>
 8002546:	231b      	movs	r3, #27
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2204      	movs	r2, #4
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e021      	b.n	8002594 <UART_SetConfig+0x178>
 8002550:	231b      	movs	r3, #27
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2208      	movs	r2, #8
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e01c      	b.n	8002594 <UART_SetConfig+0x178>
 800255a:	231b      	movs	r3, #27
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2210      	movs	r2, #16
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e017      	b.n	8002594 <UART_SetConfig+0x178>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a7a      	ldr	r2, [pc, #488]	@ (8002754 <UART_SetConfig+0x338>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d104      	bne.n	8002578 <UART_SetConfig+0x15c>
 800256e:	231b      	movs	r3, #27
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e00d      	b.n	8002594 <UART_SetConfig+0x178>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a76      	ldr	r2, [pc, #472]	@ (8002758 <UART_SetConfig+0x33c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d104      	bne.n	800258c <UART_SetConfig+0x170>
 8002582:	231b      	movs	r3, #27
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e003      	b.n	8002594 <UART_SetConfig+0x178>
 800258c:	231b      	movs	r3, #27
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2210      	movs	r2, #16
 8002592:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	429a      	cmp	r2, r3
 800259e:	d000      	beq.n	80025a2 <UART_SetConfig+0x186>
 80025a0:	e065      	b.n	800266e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80025a2:	231b      	movs	r3, #27
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d015      	beq.n	80025d8 <UART_SetConfig+0x1bc>
 80025ac:	dc18      	bgt.n	80025e0 <UART_SetConfig+0x1c4>
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d00d      	beq.n	80025ce <UART_SetConfig+0x1b2>
 80025b2:	dc15      	bgt.n	80025e0 <UART_SetConfig+0x1c4>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <UART_SetConfig+0x1a2>
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d005      	beq.n	80025c8 <UART_SetConfig+0x1ac>
 80025bc:	e010      	b.n	80025e0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025be:	f7ff fa83 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 80025c2:	0003      	movs	r3, r0
 80025c4:	617b      	str	r3, [r7, #20]
        break;
 80025c6:	e012      	b.n	80025ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c8:	4b64      	ldr	r3, [pc, #400]	@ (800275c <UART_SetConfig+0x340>)
 80025ca:	617b      	str	r3, [r7, #20]
        break;
 80025cc:	e00f      	b.n	80025ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ce:	f7ff f9ef 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 80025d2:	0003      	movs	r3, r0
 80025d4:	617b      	str	r3, [r7, #20]
        break;
 80025d6:	e00a      	b.n	80025ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	617b      	str	r3, [r7, #20]
        break;
 80025de:	e006      	b.n	80025ee <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025e4:	231a      	movs	r3, #26
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
        break;
 80025ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d100      	bne.n	80025f6 <UART_SetConfig+0x1da>
 80025f4:	e08d      	b.n	8002712 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fa:	4b59      	ldr	r3, [pc, #356]	@ (8002760 <UART_SetConfig+0x344>)
 80025fc:	0052      	lsls	r2, r2, #1
 80025fe:	5ad3      	ldrh	r3, [r2, r3]
 8002600:	0019      	movs	r1, r3
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7fd fd8e 	bl	8000124 <__udivsi3>
 8002608:	0003      	movs	r3, r0
 800260a:	005a      	lsls	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	18d2      	adds	r2, r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0019      	movs	r1, r3
 800261a:	0010      	movs	r0, r2
 800261c:	f7fd fd82 	bl	8000124 <__udivsi3>
 8002620:	0003      	movs	r3, r0
 8002622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	d91c      	bls.n	8002664 <UART_SetConfig+0x248>
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	025b      	lsls	r3, r3, #9
 8002630:	429a      	cmp	r2, r3
 8002632:	d217      	bcs.n	8002664 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	b29a      	uxth	r2, r3
 8002638:	200e      	movs	r0, #14
 800263a:	183b      	adds	r3, r7, r0
 800263c:	210f      	movs	r1, #15
 800263e:	438a      	bics	r2, r1
 8002640:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	b29b      	uxth	r3, r3
 8002648:	2207      	movs	r2, #7
 800264a:	4013      	ands	r3, r2
 800264c:	b299      	uxth	r1, r3
 800264e:	183b      	adds	r3, r7, r0
 8002650:	183a      	adds	r2, r7, r0
 8002652:	8812      	ldrh	r2, [r2, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	183a      	adds	r2, r7, r0
 800265e:	8812      	ldrh	r2, [r2, #0]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	e056      	b.n	8002712 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002664:	231a      	movs	r3, #26
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e051      	b.n	8002712 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800266e:	231b      	movs	r3, #27
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d015      	beq.n	80026a4 <UART_SetConfig+0x288>
 8002678:	dc18      	bgt.n	80026ac <UART_SetConfig+0x290>
 800267a:	2b04      	cmp	r3, #4
 800267c:	d00d      	beq.n	800269a <UART_SetConfig+0x27e>
 800267e:	dc15      	bgt.n	80026ac <UART_SetConfig+0x290>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <UART_SetConfig+0x26e>
 8002684:	2b02      	cmp	r3, #2
 8002686:	d005      	beq.n	8002694 <UART_SetConfig+0x278>
 8002688:	e010      	b.n	80026ac <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800268a:	f7ff fa1d 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 800268e:	0003      	movs	r3, r0
 8002690:	617b      	str	r3, [r7, #20]
        break;
 8002692:	e012      	b.n	80026ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002694:	4b31      	ldr	r3, [pc, #196]	@ (800275c <UART_SetConfig+0x340>)
 8002696:	617b      	str	r3, [r7, #20]
        break;
 8002698:	e00f      	b.n	80026ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269a:	f7ff f989 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800269e:	0003      	movs	r3, r0
 80026a0:	617b      	str	r3, [r7, #20]
        break;
 80026a2:	e00a      	b.n	80026ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	617b      	str	r3, [r7, #20]
        break;
 80026aa:	e006      	b.n	80026ba <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80026b0:	231a      	movs	r3, #26
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
        break;
 80026b8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d028      	beq.n	8002712 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <UART_SetConfig+0x344>)
 80026c6:	0052      	lsls	r2, r2, #1
 80026c8:	5ad3      	ldrh	r3, [r2, r3]
 80026ca:	0019      	movs	r1, r3
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f7fd fd29 	bl	8000124 <__udivsi3>
 80026d2:	0003      	movs	r3, r0
 80026d4:	001a      	movs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	18d2      	adds	r2, r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7fd fd1d 	bl	8000124 <__udivsi3>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d90a      	bls.n	800270a <UART_SetConfig+0x2ee>
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	025b      	lsls	r3, r3, #9
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d205      	bcs.n	800270a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	e003      	b.n	8002712 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800270a:	231a      	movs	r3, #26
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	226a      	movs	r2, #106	@ 0x6a
 8002716:	2101      	movs	r1, #1
 8002718:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2268      	movs	r2, #104	@ 0x68
 800271e:	2101      	movs	r1, #1
 8002720:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800272e:	231a      	movs	r3, #26
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b008      	add	sp, #32
 800273a:	bd80      	pop	{r7, pc}
 800273c:	cfff69f3 	.word	0xcfff69f3
 8002740:	ffffcfff 	.word	0xffffcfff
 8002744:	11fff4ff 	.word	0x11fff4ff
 8002748:	40013800 	.word	0x40013800
 800274c:	40021000 	.word	0x40021000
 8002750:	40004400 	.word	0x40004400
 8002754:	40004800 	.word	0x40004800
 8002758:	40004c00 	.word	0x40004c00
 800275c:	00f42400 	.word	0x00f42400
 8002760:	08004760 	.word	0x08004760

08002764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	2208      	movs	r2, #8
 8002772:	4013      	ands	r3, r2
 8002774:	d00b      	beq.n	800278e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a4a      	ldr	r2, [pc, #296]	@ (80028a8 <UART_AdvFeatureConfig+0x144>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	2201      	movs	r2, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d00b      	beq.n	80027b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a43      	ldr	r2, [pc, #268]	@ (80028ac <UART_AdvFeatureConfig+0x148>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	2202      	movs	r2, #2
 80027b6:	4013      	ands	r3, r2
 80027b8:	d00b      	beq.n	80027d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a3b      	ldr	r2, [pc, #236]	@ (80028b0 <UART_AdvFeatureConfig+0x14c>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d00b      	beq.n	80027f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a34      	ldr	r2, [pc, #208]	@ (80028b4 <UART_AdvFeatureConfig+0x150>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	2210      	movs	r2, #16
 80027fa:	4013      	ands	r3, r2
 80027fc:	d00b      	beq.n	8002816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a2c      	ldr	r2, [pc, #176]	@ (80028b8 <UART_AdvFeatureConfig+0x154>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	2220      	movs	r2, #32
 800281c:	4013      	ands	r3, r2
 800281e:	d00b      	beq.n	8002838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4a25      	ldr	r2, [pc, #148]	@ (80028bc <UART_AdvFeatureConfig+0x158>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	2240      	movs	r2, #64	@ 0x40
 800283e:	4013      	ands	r3, r2
 8002840:	d01d      	beq.n	800287e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <UART_AdvFeatureConfig+0x15c>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800285e:	2380      	movs	r3, #128	@ 0x80
 8002860:	035b      	lsls	r3, r3, #13
 8002862:	429a      	cmp	r2, r3
 8002864:	d10b      	bne.n	800287e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <UART_AdvFeatureConfig+0x160>)
 800286e:	4013      	ands	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002882:	2280      	movs	r2, #128	@ 0x80
 8002884:	4013      	ands	r3, r2
 8002886:	d00b      	beq.n	80028a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4a0e      	ldr	r2, [pc, #56]	@ (80028c8 <UART_AdvFeatureConfig+0x164>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
  }
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	ffff7fff 	.word	0xffff7fff
 80028ac:	fffdffff 	.word	0xfffdffff
 80028b0:	fffeffff 	.word	0xfffeffff
 80028b4:	fffbffff 	.word	0xfffbffff
 80028b8:	ffffefff 	.word	0xffffefff
 80028bc:	ffffdfff 	.word	0xffffdfff
 80028c0:	ffefffff 	.word	0xffefffff
 80028c4:	ff9fffff 	.word	0xff9fffff
 80028c8:	fff7ffff 	.word	0xfff7ffff

080028cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b092      	sub	sp, #72	@ 0x48
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2290      	movs	r2, #144	@ 0x90
 80028d8:	2100      	movs	r1, #0
 80028da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028dc:	f7fe fd20 	bl	8001320 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2208      	movs	r2, #8
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d12d      	bne.n	800294e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	0391      	lsls	r1, r2, #14
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4a47      	ldr	r2, [pc, #284]	@ (8002a18 <UART_CheckIdleState+0x14c>)
 80028fc:	9200      	str	r2, [sp, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	f000 f88e 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d022      	beq.n	800294e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002908:	f3ef 8310 	mrs	r3, PRIMASK
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002910:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002912:	2301      	movs	r3, #1
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002918:	f383 8810 	msr	PRIMASK, r3
}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2180      	movs	r1, #128	@ 0x80
 800292a:	438a      	bics	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	f383 8810 	msr	PRIMASK, r3
}
 8002938:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2288      	movs	r2, #136	@ 0x88
 800293e:	2120      	movs	r1, #32
 8002940:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2284      	movs	r2, #132	@ 0x84
 8002946:	2100      	movs	r1, #0
 8002948:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e060      	b.n	8002a10 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2204      	movs	r2, #4
 8002956:	4013      	ands	r3, r2
 8002958:	2b04      	cmp	r3, #4
 800295a:	d146      	bne.n	80029ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800295c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	03d1      	lsls	r1, r2, #15
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <UART_CheckIdleState+0x14c>)
 8002966:	9200      	str	r2, [sp, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	f000 f859 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d03b      	beq.n	80029ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002972:	f3ef 8310 	mrs	r3, PRIMASK
 8002976:	60fb      	str	r3, [r7, #12]
  return(result);
 8002978:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800297a:	637b      	str	r3, [r7, #52]	@ 0x34
 800297c:	2301      	movs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f383 8810 	msr	PRIMASK, r3
}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4922      	ldr	r1, [pc, #136]	@ (8002a1c <UART_CheckIdleState+0x150>)
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f383 8810 	msr	PRIMASK, r3
}
 80029a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a4:	f3ef 8310 	mrs	r3, PRIMASK
 80029a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80029aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80029ae:	2301      	movs	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f383 8810 	msr	PRIMASK, r3
}
 80029b8:	46c0      	nop			@ (mov r8, r8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	438a      	bics	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	228c      	movs	r2, #140	@ 0x8c
 80029da:	2120      	movs	r1, #32
 80029dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2284      	movs	r2, #132	@ 0x84
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e012      	b.n	8002a10 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2288      	movs	r2, #136	@ 0x88
 80029ee:	2120      	movs	r1, #32
 80029f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	228c      	movs	r2, #140	@ 0x8c
 80029f6:	2120      	movs	r1, #32
 80029f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2284      	movs	r2, #132	@ 0x84
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b010      	add	sp, #64	@ 0x40
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	01ffffff 	.word	0x01ffffff
 8002a1c:	fffffedf 	.word	0xfffffedf

08002a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a30:	e051      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3301      	adds	r3, #1
 8002a36:	d04e      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7fe fc72 	bl	8001320 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e051      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d03b      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b80      	cmp	r3, #128	@ 0x80
 8002a62:	d038      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d035      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2208      	movs	r2, #8
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d111      	bne.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f960 	bl	8002d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2290      	movs	r2, #144	@ 0x90
 8002a8c:	2108      	movs	r1, #8
 8002a8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2284      	movs	r2, #132	@ 0x84
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e02c      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d112      	bne.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2280      	movs	r2, #128	@ 0x80
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f943 	bl	8002d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2290      	movs	r2, #144	@ 0x90
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2284      	movs	r2, #132	@ 0x84
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e00f      	b.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	425a      	negs	r2, r3
 8002ae6:	4153      	adcs	r3, r2
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	001a      	movs	r2, r3
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d09e      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b098      	sub	sp, #96	@ 0x60
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	1dbb      	adds	r3, r7, #6
 8002b0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1dba      	adds	r2, r7, #6
 8002b18:	215c      	movs	r1, #92	@ 0x5c
 8002b1a:	8812      	ldrh	r2, [r2, #0]
 8002b1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1dba      	adds	r2, r7, #6
 8002b22:	215e      	movs	r1, #94	@ 0x5e
 8002b24:	8812      	ldrh	r2, [r2, #0]
 8002b26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	015b      	lsls	r3, r3, #5
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d10d      	bne.n	8002b56 <UART_Start_Receive_IT+0x56>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <UART_Start_Receive_IT+0x4c>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2260      	movs	r2, #96	@ 0x60
 8002b46:	497b      	ldr	r1, [pc, #492]	@ (8002d34 <UART_Start_Receive_IT+0x234>)
 8002b48:	5299      	strh	r1, [r3, r2]
 8002b4a:	e02e      	b.n	8002baa <UART_Start_Receive_IT+0xaa>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2260      	movs	r2, #96	@ 0x60
 8002b50:	21ff      	movs	r1, #255	@ 0xff
 8002b52:	5299      	strh	r1, [r3, r2]
 8002b54:	e029      	b.n	8002baa <UART_Start_Receive_IT+0xaa>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <UART_Start_Receive_IT+0x7a>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <UART_Start_Receive_IT+0x70>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2260      	movs	r2, #96	@ 0x60
 8002b6a:	21ff      	movs	r1, #255	@ 0xff
 8002b6c:	5299      	strh	r1, [r3, r2]
 8002b6e:	e01c      	b.n	8002baa <UART_Start_Receive_IT+0xaa>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2260      	movs	r2, #96	@ 0x60
 8002b74:	217f      	movs	r1, #127	@ 0x7f
 8002b76:	5299      	strh	r1, [r3, r2]
 8002b78:	e017      	b.n	8002baa <UART_Start_Receive_IT+0xaa>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	055b      	lsls	r3, r3, #21
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d10d      	bne.n	8002ba2 <UART_Start_Receive_IT+0xa2>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <UART_Start_Receive_IT+0x98>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2260      	movs	r2, #96	@ 0x60
 8002b92:	217f      	movs	r1, #127	@ 0x7f
 8002b94:	5299      	strh	r1, [r3, r2]
 8002b96:	e008      	b.n	8002baa <UART_Start_Receive_IT+0xaa>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2260      	movs	r2, #96	@ 0x60
 8002b9c:	213f      	movs	r1, #63	@ 0x3f
 8002b9e:	5299      	strh	r1, [r3, r2]
 8002ba0:	e003      	b.n	8002baa <UART_Start_Receive_IT+0xaa>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2260      	movs	r2, #96	@ 0x60
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2290      	movs	r2, #144	@ 0x90
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	228c      	movs	r2, #140	@ 0x8c
 8002bb6:	2122      	movs	r1, #34	@ 0x22
 8002bb8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bba:	f3ef 8310 	mrs	r3, PRIMASK
 8002bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bca:	f383 8810 	msr	PRIMASK, r3
}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002be6:	f383 8810 	msr	PRIMASK, r3
}
 8002bea:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	059b      	lsls	r3, r3, #22
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d150      	bne.n	8002c9a <UART_Start_Receive_IT+0x19a>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2268      	movs	r2, #104	@ 0x68
 8002bfc:	5a9b      	ldrh	r3, [r3, r2]
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	8812      	ldrh	r2, [r2, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d349      	bcc.n	8002c9a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	015b      	lsls	r3, r3, #5
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d107      	bne.n	8002c22 <UART_Start_Receive_IT+0x122>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a46      	ldr	r2, [pc, #280]	@ (8002d38 <UART_Start_Receive_IT+0x238>)
 8002c1e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c20:	e002      	b.n	8002c28 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a45      	ldr	r2, [pc, #276]	@ (8002d3c <UART_Start_Receive_IT+0x23c>)
 8002c26:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d019      	beq.n	8002c64 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c30:	f3ef 8310 	mrs	r3, PRIMASK
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2180      	movs	r1, #128	@ 0x80
 8002c52:	0049      	lsls	r1, r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c64:	f3ef 8310 	mrs	r3, PRIMASK
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002c6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c6e:	2301      	movs	r3, #1
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c74:	f383 8810 	msr	PRIMASK, r3
}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2180      	movs	r1, #128	@ 0x80
 8002c86:	0549      	lsls	r1, r1, #21
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	e047      	b.n	8002d2a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	015b      	lsls	r3, r3, #5
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d107      	bne.n	8002cb6 <UART_Start_Receive_IT+0x1b6>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a23      	ldr	r2, [pc, #140]	@ (8002d40 <UART_Start_Receive_IT+0x240>)
 8002cb2:	675a      	str	r2, [r3, #116]	@ 0x74
 8002cb4:	e002      	b.n	8002cbc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	@ (8002d44 <UART_Start_Receive_IT+0x244>)
 8002cba:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d019      	beq.n	8002cf8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cca:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cce:	2301      	movs	r3, #1
 8002cd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2190      	movs	r1, #144	@ 0x90
 8002ce6:	0049      	lsls	r1, r1, #1
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	f383 8810 	msr	PRIMASK, r3
}
 8002cf6:	e018      	b.n	8002d2a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	613b      	str	r3, [r7, #16]
  return(result);
 8002cfe:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2120      	movs	r1, #32
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b018      	add	sp, #96	@ 0x60
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	000001ff 	.word	0x000001ff
 8002d38:	0800353d 	.word	0x0800353d
 8002d3c:	0800320d 	.word	0x0800320d
 8002d40:	08003055 	.word	0x08003055
 8002d44:	08002e9d 	.word	0x08002e9d

08002d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08e      	sub	sp, #56	@ 0x38
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d50:	f3ef 8310 	mrs	r3, PRIMASK
 8002d54:	617b      	str	r3, [r7, #20]
  return(result);
 8002d56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f383 8810 	msr	PRIMASK, r3
}
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4926      	ldr	r1, [pc, #152]	@ (8002e0c <UART_EndRxTransfer+0xc4>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d82:	f3ef 8310 	mrs	r3, PRIMASK
 8002d86:	623b      	str	r3, [r7, #32]
  return(result);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	f383 8810 	msr	PRIMASK, r3
}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	491b      	ldr	r1, [pc, #108]	@ (8002e10 <UART_EndRxTransfer+0xc8>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d118      	bne.n	8002dee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2110      	movs	r1, #16
 8002dde:	438a      	bics	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	228c      	movs	r2, #140	@ 0x8c
 8002df2:	2120      	movs	r1, #32
 8002df4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b00e      	add	sp, #56	@ 0x38
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	fffffedf 	.word	0xfffffedf
 8002e10:	effffffe 	.word	0xeffffffe

08002e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	225e      	movs	r2, #94	@ 0x5e
 8002e26:	2100      	movs	r1, #0
 8002e28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2256      	movs	r2, #86	@ 0x56
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7ff fadd 	bl	80023f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e50:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	2301      	movs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f383 8810 	msr	PRIMASK, r3
}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2140      	movs	r1, #64	@ 0x40
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f383 8810 	msr	PRIMASK, r3
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2288      	movs	r2, #136	@ 0x88
 8002e80:	2120      	movs	r1, #32
 8002e82:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff faa9 	bl	80023e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b006      	add	sp, #24
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b094      	sub	sp, #80	@ 0x50
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ea4:	204e      	movs	r0, #78	@ 0x4e
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	2160      	movs	r1, #96	@ 0x60
 8002eac:	5a52      	ldrh	r2, [r2, r1]
 8002eae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	228c      	movs	r2, #140	@ 0x8c
 8002eb4:	589b      	ldr	r3, [r3, r2]
 8002eb6:	2b22      	cmp	r3, #34	@ 0x22
 8002eb8:	d000      	beq.n	8002ebc <UART_RxISR_8BIT+0x20>
 8002eba:	e0ba      	b.n	8003032 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ec2:	214c      	movs	r1, #76	@ 0x4c
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b2d9      	uxtb	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	400a      	ands	r2, r1
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	225e      	movs	r2, #94	@ 0x5e
 8002eec:	5a9b      	ldrh	r3, [r3, r2]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b299      	uxth	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	225e      	movs	r2, #94	@ 0x5e
 8002ef8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	225e      	movs	r2, #94	@ 0x5e
 8002efe:	5a9b      	ldrh	r3, [r3, r2]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d000      	beq.n	8002f08 <UART_RxISR_8BIT+0x6c>
 8002f06:	e09c      	b.n	8003042 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f12:	2301      	movs	r3, #1
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4948      	ldr	r1, [pc, #288]	@ (800304c <UART_RxISR_8BIT+0x1b0>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f44:	2301      	movs	r3, #1
 8002f46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4a:	f383 8810 	msr	PRIMASK, r3
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f66:	f383 8810 	msr	PRIMASK, r3
}
 8002f6a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	228c      	movs	r2, #140	@ 0x8c
 8002f70:	2120      	movs	r1, #32
 8002f72:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	2380      	movs	r3, #128	@ 0x80
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f94:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f98:	2301      	movs	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f383 8810 	msr	PRIMASK, r3
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4928      	ldr	r1, [pc, #160]	@ (8003050 <UART_RxISR_8BIT+0x1b4>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f383 8810 	msr	PRIMASK, r3
}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d12f      	bne.n	8003028 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fd4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd8:	2301      	movs	r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2110      	movs	r1, #16
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f383 8810 	msr	PRIMASK, r3
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	2210      	movs	r2, #16
 8003008:	4013      	ands	r3, r2
 800300a:	2b10      	cmp	r3, #16
 800300c:	d103      	bne.n	8003016 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	225c      	movs	r2, #92	@ 0x5c
 800301a:	5a9a      	ldrh	r2, [r3, r2]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff f9ef 	bl	8002404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003026:	e00c      	b.n	8003042 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	0018      	movs	r0, r3
 800302c:	f7fd fb74 	bl	8000718 <HAL_UART_RxCpltCallback>
}
 8003030:	e007      	b.n	8003042 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2108      	movs	r1, #8
 800303e:	430a      	orrs	r2, r1
 8003040:	619a      	str	r2, [r3, #24]
}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b014      	add	sp, #80	@ 0x50
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	fffffedf 	.word	0xfffffedf
 8003050:	fbffffff 	.word	0xfbffffff

08003054 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b094      	sub	sp, #80	@ 0x50
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800305c:	204e      	movs	r0, #78	@ 0x4e
 800305e:	183b      	adds	r3, r7, r0
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	2160      	movs	r1, #96	@ 0x60
 8003064:	5a52      	ldrh	r2, [r2, r1]
 8003066:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	228c      	movs	r2, #140	@ 0x8c
 800306c:	589b      	ldr	r3, [r3, r2]
 800306e:	2b22      	cmp	r3, #34	@ 0x22
 8003070:	d000      	beq.n	8003074 <UART_RxISR_16BIT+0x20>
 8003072:	e0ba      	b.n	80031ea <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800307a:	214c      	movs	r1, #76	@ 0x4c
 800307c:	187b      	adds	r3, r7, r1
 800307e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003086:	187b      	adds	r3, r7, r1
 8003088:	183a      	adds	r2, r7, r0
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	8812      	ldrh	r2, [r2, #0]
 800308e:	4013      	ands	r3, r2
 8003090:	b29a      	uxth	r2, r3
 8003092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003094:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	225e      	movs	r2, #94	@ 0x5e
 80030a4:	5a9b      	ldrh	r3, [r3, r2]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b299      	uxth	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	225e      	movs	r2, #94	@ 0x5e
 80030b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	225e      	movs	r2, #94	@ 0x5e
 80030b6:	5a9b      	ldrh	r3, [r3, r2]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d000      	beq.n	80030c0 <UART_RxISR_16BIT+0x6c>
 80030be:	e09c      	b.n	80031fa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c0:	f3ef 8310 	mrs	r3, PRIMASK
 80030c4:	623b      	str	r3, [r7, #32]
  return(result);
 80030c6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ca:	2301      	movs	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	f383 8810 	msr	PRIMASK, r3
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4948      	ldr	r1, [pc, #288]	@ (8003204 <UART_RxISR_16BIT+0x1b0>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ec:	f383 8810 	msr	PRIMASK, r3
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f2:	f3ef 8310 	mrs	r3, PRIMASK
 80030f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80030fc:	2301      	movs	r3, #1
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2101      	movs	r1, #1
 8003114:	438a      	bics	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	228c      	movs	r2, #140	@ 0x8c
 8003128:	2120      	movs	r1, #32
 800312a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	4013      	ands	r3, r2
 8003144:	d018      	beq.n	8003178 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003146:	f3ef 8310 	mrs	r3, PRIMASK
 800314a:	617b      	str	r3, [r7, #20]
  return(result);
 800314c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800314e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003150:	2301      	movs	r3, #1
 8003152:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f383 8810 	msr	PRIMASK, r3
}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4928      	ldr	r1, [pc, #160]	@ (8003208 <UART_RxISR_16BIT+0x1b4>)
 8003168:	400a      	ands	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800316e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f383 8810 	msr	PRIMASK, r3
}
 8003176:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d12f      	bne.n	80031e0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003186:	f3ef 8310 	mrs	r3, PRIMASK
 800318a:	60bb      	str	r3, [r7, #8]
  return(result);
 800318c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800318e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003190:	2301      	movs	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f383 8810 	msr	PRIMASK, r3
}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2110      	movs	r1, #16
 80031a8:	438a      	bics	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2210      	movs	r2, #16
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d103      	bne.n	80031ce <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2210      	movs	r2, #16
 80031cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	225c      	movs	r2, #92	@ 0x5c
 80031d2:	5a9a      	ldrh	r2, [r3, r2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	0011      	movs	r1, r2
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff f913 	bl	8002404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031de:	e00c      	b.n	80031fa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fd fa98 	bl	8000718 <HAL_UART_RxCpltCallback>
}
 80031e8:	e007      	b.n	80031fa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2108      	movs	r1, #8
 80031f6:	430a      	orrs	r2, r1
 80031f8:	619a      	str	r2, [r3, #24]
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b014      	add	sp, #80	@ 0x50
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	fffffedf 	.word	0xfffffedf
 8003208:	fbffffff 	.word	0xfbffffff

0800320c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0a0      	sub	sp, #128	@ 0x80
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003214:	237a      	movs	r3, #122	@ 0x7a
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	2160      	movs	r1, #96	@ 0x60
 800321c:	5a52      	ldrh	r2, [r2, r1]
 800321e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	228c      	movs	r2, #140	@ 0x8c
 800323c:	589b      	ldr	r3, [r3, r2]
 800323e:	2b22      	cmp	r3, #34	@ 0x22
 8003240:	d000      	beq.n	8003244 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003242:	e165      	b.n	8003510 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003244:	236e      	movs	r3, #110	@ 0x6e
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	2168      	movs	r1, #104	@ 0x68
 800324c:	5a52      	ldrh	r2, [r2, r1]
 800324e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003250:	e10c      	b.n	800346c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003258:	216c      	movs	r1, #108	@ 0x6c
 800325a:	187b      	adds	r3, r7, r1
 800325c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800325e:	187b      	adds	r3, r7, r1
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	237a      	movs	r3, #122	@ 0x7a
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b2d9      	uxtb	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	400a      	ands	r2, r1
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	225e      	movs	r2, #94	@ 0x5e
 8003284:	5a9b      	ldrh	r3, [r3, r2]
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b299      	uxth	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	225e      	movs	r2, #94	@ 0x5e
 8003290:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800329a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800329c:	2207      	movs	r2, #7
 800329e:	4013      	ands	r3, r2
 80032a0:	d049      	beq.n	8003336 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d010      	beq.n	80032cc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80032aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00b      	beq.n	80032cc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2290      	movs	r2, #144	@ 0x90
 80032c0:	589b      	ldr	r3, [r3, r2]
 80032c2:	2201      	movs	r2, #1
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2190      	movs	r1, #144	@ 0x90
 80032ca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ce:	2202      	movs	r2, #2
 80032d0:	4013      	ands	r3, r2
 80032d2:	d00f      	beq.n	80032f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80032d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	d00b      	beq.n	80032f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2202      	movs	r2, #2
 80032e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2290      	movs	r2, #144	@ 0x90
 80032e8:	589b      	ldr	r3, [r3, r2]
 80032ea:	2204      	movs	r2, #4
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2190      	movs	r1, #144	@ 0x90
 80032f2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032f6:	2204      	movs	r2, #4
 80032f8:	4013      	ands	r3, r2
 80032fa:	d00f      	beq.n	800331c <UART_RxISR_8BIT_FIFOEN+0x110>
 80032fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	d00b      	beq.n	800331c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2204      	movs	r2, #4
 800330a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2290      	movs	r2, #144	@ 0x90
 8003310:	589b      	ldr	r3, [r3, r2]
 8003312:	2202      	movs	r2, #2
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2190      	movs	r1, #144	@ 0x90
 800331a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2290      	movs	r2, #144	@ 0x90
 8003320:	589b      	ldr	r3, [r3, r2]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f7ff f863 	bl	80023f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2290      	movs	r2, #144	@ 0x90
 8003332:	2100      	movs	r1, #0
 8003334:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	225e      	movs	r2, #94	@ 0x5e
 800333a:	5a9b      	ldrh	r3, [r3, r2]
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d000      	beq.n	8003344 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003342:	e093      	b.n	800346c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800334e:	2301      	movs	r3, #1
 8003350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4970      	ldr	r1, [pc, #448]	@ (8003528 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8003366:	400a      	ands	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800336c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003376:	f3ef 8310 	mrs	r3, PRIMASK
 800337a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800337c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800337e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003380:	2301      	movs	r3, #1
 8003382:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003386:	f383 8810 	msr	PRIMASK, r3
}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4965      	ldr	r1, [pc, #404]	@ (800352c <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003398:	400a      	ands	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a2:	f383 8810 	msr	PRIMASK, r3
}
 80033a6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	228c      	movs	r2, #140	@ 0x8c
 80033ac:	2120      	movs	r1, #32
 80033ae:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	4013      	ands	r3, r2
 80033c8:	d018      	beq.n	80033fc <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ca:	f3ef 8310 	mrs	r3, PRIMASK
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80033d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80033d4:	2301      	movs	r3, #1
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4951      	ldr	r1, [pc, #324]	@ (8003530 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d12f      	bne.n	8003464 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	623b      	str	r3, [r7, #32]
  return(result);
 8003410:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003414:	2301      	movs	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2110      	movs	r1, #16
 800342c:	438a      	bics	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2210      	movs	r2, #16
 8003444:	4013      	ands	r3, r2
 8003446:	2b10      	cmp	r3, #16
 8003448:	d103      	bne.n	8003452 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2210      	movs	r2, #16
 8003450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	225c      	movs	r2, #92	@ 0x5c
 8003456:	5a9a      	ldrh	r2, [r3, r2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f7fe ffd1 	bl	8002404 <HAL_UARTEx_RxEventCallback>
 8003462:	e003      	b.n	800346c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f7fd f956 	bl	8000718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800346c:	236e      	movs	r3, #110	@ 0x6e
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003476:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003478:	2220      	movs	r2, #32
 800347a:	4013      	ands	r3, r2
 800347c:	d000      	beq.n	8003480 <UART_RxISR_8BIT_FIFOEN+0x274>
 800347e:	e6e8      	b.n	8003252 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003480:	205a      	movs	r0, #90	@ 0x5a
 8003482:	183b      	adds	r3, r7, r0
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	215e      	movs	r1, #94	@ 0x5e
 8003488:	5a52      	ldrh	r2, [r2, r1]
 800348a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800348c:	0001      	movs	r1, r0
 800348e:	187b      	adds	r3, r7, r1
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d044      	beq.n	8003520 <UART_RxISR_8BIT_FIFOEN+0x314>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2268      	movs	r2, #104	@ 0x68
 800349a:	5a9b      	ldrh	r3, [r3, r2]
 800349c:	187a      	adds	r2, r7, r1
 800349e:	8812      	ldrh	r2, [r2, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d23d      	bcs.n	8003520 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a4:	f3ef 8310 	mrs	r3, PRIMASK
 80034a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034aa:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80034ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ae:	2301      	movs	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f383 8810 	msr	PRIMASK, r3
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	491b      	ldr	r1, [pc, #108]	@ (8003534 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80034c6:	400a      	ands	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f383 8810 	msr	PRIMASK, r3
}
 80034d4:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80034da:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034dc:	f3ef 8310 	mrs	r3, PRIMASK
 80034e0:	617b      	str	r3, [r7, #20]
  return(result);
 80034e2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80034e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2120      	movs	r1, #32
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800350e:	e007      	b.n	8003520 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2108      	movs	r1, #8
 800351c:	430a      	orrs	r2, r1
 800351e:	619a      	str	r2, [r3, #24]
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b020      	add	sp, #128	@ 0x80
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffffeff 	.word	0xfffffeff
 800352c:	effffffe 	.word	0xeffffffe
 8003530:	fbffffff 	.word	0xfbffffff
 8003534:	efffffff 	.word	0xefffffff
 8003538:	08002e9d 	.word	0x08002e9d

0800353c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0a2      	sub	sp, #136	@ 0x88
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003544:	2382      	movs	r3, #130	@ 0x82
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	2160      	movs	r1, #96	@ 0x60
 800354c:	5a52      	ldrh	r2, [r2, r1]
 800354e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	2284      	movs	r2, #132	@ 0x84
 8003558:	18ba      	adds	r2, r7, r2
 800355a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	228c      	movs	r2, #140	@ 0x8c
 8003570:	589b      	ldr	r3, [r3, r2]
 8003572:	2b22      	cmp	r3, #34	@ 0x22
 8003574:	d000      	beq.n	8003578 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003576:	e16f      	b.n	8003858 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003578:	2376      	movs	r3, #118	@ 0x76
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	2168      	movs	r1, #104	@ 0x68
 8003580:	5a52      	ldrh	r2, [r2, r1]
 8003582:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003584:	e114      	b.n	80037b0 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800358c:	2174      	movs	r1, #116	@ 0x74
 800358e:	187b      	adds	r3, r7, r1
 8003590:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2282      	movs	r2, #130	@ 0x82
 800359c:	18ba      	adds	r2, r7, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	225e      	movs	r2, #94	@ 0x5e
 80035b8:	5a9b      	ldrh	r3, [r3, r2]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b299      	uxth	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	225e      	movs	r2, #94	@ 0x5e
 80035c4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	2184      	movs	r1, #132	@ 0x84
 80035ce:	187a      	adds	r2, r7, r1
 80035d0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2207      	movs	r2, #7
 80035d8:	4013      	ands	r3, r2
 80035da:	d04e      	beq.n	800367a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	4013      	ands	r3, r2
 80035e4:	d010      	beq.n	8003608 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80035e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4013      	ands	r3, r2
 80035ee:	d00b      	beq.n	8003608 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2290      	movs	r2, #144	@ 0x90
 80035fc:	589b      	ldr	r3, [r3, r2]
 80035fe:	2201      	movs	r2, #1
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2190      	movs	r1, #144	@ 0x90
 8003606:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003608:	2384      	movs	r3, #132	@ 0x84
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2202      	movs	r2, #2
 8003610:	4013      	ands	r3, r2
 8003612:	d00f      	beq.n	8003634 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003616:	2201      	movs	r2, #1
 8003618:	4013      	ands	r3, r2
 800361a:	d00b      	beq.n	8003634 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2202      	movs	r2, #2
 8003622:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2290      	movs	r2, #144	@ 0x90
 8003628:	589b      	ldr	r3, [r3, r2]
 800362a:	2204      	movs	r2, #4
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2190      	movs	r1, #144	@ 0x90
 8003632:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003634:	2384      	movs	r3, #132	@ 0x84
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2204      	movs	r2, #4
 800363c:	4013      	ands	r3, r2
 800363e:	d00f      	beq.n	8003660 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d00b      	beq.n	8003660 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2204      	movs	r2, #4
 800364e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2290      	movs	r2, #144	@ 0x90
 8003654:	589b      	ldr	r3, [r3, r2]
 8003656:	2202      	movs	r2, #2
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2190      	movs	r1, #144	@ 0x90
 800365e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2290      	movs	r2, #144	@ 0x90
 8003664:	589b      	ldr	r3, [r3, r2]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0018      	movs	r0, r3
 800366e:	f7fe fec1 	bl	80023f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2290      	movs	r2, #144	@ 0x90
 8003676:	2100      	movs	r1, #0
 8003678:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	225e      	movs	r2, #94	@ 0x5e
 800367e:	5a9b      	ldrh	r3, [r3, r2]
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d000      	beq.n	8003688 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003686:	e093      	b.n	80037b0 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003688:	f3ef 8310 	mrs	r3, PRIMASK
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800368e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003690:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003692:	2301      	movs	r3, #1
 8003694:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	46c0      	nop			@ (mov r8, r8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4971      	ldr	r1, [pc, #452]	@ (8003870 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80036aa:	400a      	ands	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036b4:	f383 8810 	msr	PRIMASK, r3
}
 80036b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ba:	f3ef 8310 	mrs	r3, PRIMASK
 80036be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80036c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036c4:	2301      	movs	r3, #1
 80036c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ca:	f383 8810 	msr	PRIMASK, r3
}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4966      	ldr	r1, [pc, #408]	@ (8003874 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80036dc:	400a      	ands	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036e2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e6:	f383 8810 	msr	PRIMASK, r3
}
 80036ea:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	228c      	movs	r2, #140	@ 0x8c
 80036f0:	2120      	movs	r1, #32
 80036f2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	4013      	ands	r3, r2
 800370c:	d018      	beq.n	8003740 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370e:	f3ef 8310 	mrs	r3, PRIMASK
 8003712:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003716:	667b      	str	r3, [r7, #100]	@ 0x64
 8003718:	2301      	movs	r3, #1
 800371a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371e:	f383 8810 	msr	PRIMASK, r3
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4952      	ldr	r1, [pc, #328]	@ (8003878 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003730:	400a      	ands	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003736:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d12f      	bne.n	80037a8 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374e:	f3ef 8310 	mrs	r3, PRIMASK
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003756:	663b      	str	r3, [r7, #96]	@ 0x60
 8003758:	2301      	movs	r3, #1
 800375a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2110      	movs	r1, #16
 8003770:	438a      	bics	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	f383 8810 	msr	PRIMASK, r3
}
 800377e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	2210      	movs	r2, #16
 8003788:	4013      	ands	r3, r2
 800378a:	2b10      	cmp	r3, #16
 800378c:	d103      	bne.n	8003796 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2210      	movs	r2, #16
 8003794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	225c      	movs	r2, #92	@ 0x5c
 800379a:	5a9a      	ldrh	r2, [r3, r2]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0011      	movs	r1, r2
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7fe fe2f 	bl	8002404 <HAL_UARTEx_RxEventCallback>
 80037a6:	e003      	b.n	80037b0 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f7fc ffb4 	bl	8000718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80037b0:	2376      	movs	r3, #118	@ 0x76
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80037ba:	2384      	movs	r3, #132	@ 0x84
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2220      	movs	r2, #32
 80037c2:	4013      	ands	r3, r2
 80037c4:	d000      	beq.n	80037c8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80037c6:	e6de      	b.n	8003586 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80037c8:	205e      	movs	r0, #94	@ 0x5e
 80037ca:	183b      	adds	r3, r7, r0
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	215e      	movs	r1, #94	@ 0x5e
 80037d0:	5a52      	ldrh	r2, [r2, r1]
 80037d2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80037d4:	0001      	movs	r1, r0
 80037d6:	187b      	adds	r3, r7, r1
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <UART_RxISR_16BIT_FIFOEN+0x32c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2268      	movs	r2, #104	@ 0x68
 80037e2:	5a9b      	ldrh	r3, [r3, r2]
 80037e4:	187a      	adds	r2, r7, r1
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d23d      	bcs.n	8003868 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ec:	f3ef 8310 	mrs	r3, PRIMASK
 80037f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80037f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80037f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037f6:	2301      	movs	r3, #1
 80037f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			@ (mov r8, r8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	491b      	ldr	r1, [pc, #108]	@ (800387c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800380e:	400a      	ands	r2, r1
 8003810:	609a      	str	r2, [r3, #8]
 8003812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003814:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f383 8810 	msr	PRIMASK, r3
}
 800381c:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003822:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	61bb      	str	r3, [r7, #24]
  return(result);
 800382a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800382c:	657b      	str	r3, [r7, #84]	@ 0x54
 800382e:	2301      	movs	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2120      	movs	r1, #32
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003856:	e007      	b.n	8003868 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2108      	movs	r1, #8
 8003864:	430a      	orrs	r2, r1
 8003866:	619a      	str	r2, [r3, #24]
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b022      	add	sp, #136	@ 0x88
 800386e:	bd80      	pop	{r7, pc}
 8003870:	fffffeff 	.word	0xfffffeff
 8003874:	effffffe 	.word	0xeffffffe
 8003878:	fbffffff 	.word	0xfbffffff
 800387c:	efffffff 	.word	0xefffffff
 8003880:	08003055 	.word	0x08003055

08003884 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800388c:	46c0      	nop			@ (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800389c:	46c0      	nop			@ (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80038ac:	46c0      	nop			@ (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b002      	add	sp, #8
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2284      	movs	r2, #132	@ 0x84
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_UARTEx_DisableFifoMode+0x16>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e027      	b.n	800391a <HAL_UARTEx_DisableFifoMode+0x66>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2284      	movs	r2, #132	@ 0x84
 80038ce:	2101      	movs	r1, #1
 80038d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2288      	movs	r2, #136	@ 0x88
 80038d6:	2124      	movs	r1, #36	@ 0x24
 80038d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	438a      	bics	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003924 <HAL_UARTEx_DisableFifoMode+0x70>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2288      	movs	r2, #136	@ 0x88
 800390c:	2120      	movs	r1, #32
 800390e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2284      	movs	r2, #132	@ 0x84
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b004      	add	sp, #16
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	dfffffff 	.word	0xdfffffff

08003928 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2284      	movs	r2, #132	@ 0x84
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800393c:	2302      	movs	r3, #2
 800393e:	e02e      	b.n	800399e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2284      	movs	r2, #132	@ 0x84
 8003944:	2101      	movs	r1, #1
 8003946:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2288      	movs	r2, #136	@ 0x88
 800394c:	2124      	movs	r1, #36	@ 0x24
 800394e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	438a      	bics	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	08d9      	lsrs	r1, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0018      	movs	r0, r3
 8003980:	f000 f854 	bl	8003a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2288      	movs	r2, #136	@ 0x88
 8003990:	2120      	movs	r1, #32
 8003992:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2284      	movs	r2, #132	@ 0x84
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2284      	movs	r2, #132	@ 0x84
 80039b6:	5c9b      	ldrb	r3, [r3, r2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039bc:	2302      	movs	r3, #2
 80039be:	e02f      	b.n	8003a20 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2284      	movs	r2, #132	@ 0x84
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2288      	movs	r2, #136	@ 0x88
 80039cc:	2124      	movs	r1, #36	@ 0x24
 80039ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003a28 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f813 	bl	8003a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2288      	movs	r2, #136	@ 0x88
 8003a12:	2120      	movs	r1, #32
 8003a14:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2284      	movs	r2, #132	@ 0x84
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	f1ffffff 	.word	0xf1ffffff

08003a2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d108      	bne.n	8003a4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	226a      	movs	r2, #106	@ 0x6a
 8003a40:	2101      	movs	r1, #1
 8003a42:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2268      	movs	r2, #104	@ 0x68
 8003a48:	2101      	movs	r1, #1
 8003a4a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a4c:	e043      	b.n	8003ad6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a4e:	260f      	movs	r6, #15
 8003a50:	19bb      	adds	r3, r7, r6
 8003a52:	2208      	movs	r2, #8
 8003a54:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a56:	200e      	movs	r0, #14
 8003a58:	183b      	adds	r3, r7, r0
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	0e5b      	lsrs	r3, r3, #25
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	240d      	movs	r4, #13
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	2107      	movs	r1, #7
 8003a6e:	400a      	ands	r2, r1
 8003a70:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	0f5b      	lsrs	r3, r3, #29
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	250c      	movs	r5, #12
 8003a7e:	197b      	adds	r3, r7, r5
 8003a80:	2107      	movs	r1, #7
 8003a82:	400a      	ands	r2, r1
 8003a84:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a86:	183b      	adds	r3, r7, r0
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	197a      	adds	r2, r7, r5
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	4914      	ldr	r1, [pc, #80]	@ (8003ae0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a90:	5c8a      	ldrb	r2, [r1, r2]
 8003a92:	435a      	muls	r2, r3
 8003a94:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a96:	197b      	adds	r3, r7, r5
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003a9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	f7fc fbca 	bl	8000238 <__divsi3>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	b299      	uxth	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	226a      	movs	r2, #106	@ 0x6a
 8003aac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aae:	19bb      	adds	r3, r7, r6
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	193a      	adds	r2, r7, r4
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	490a      	ldr	r1, [pc, #40]	@ (8003ae0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ab8:	5c8a      	ldrb	r2, [r1, r2]
 8003aba:	435a      	muls	r2, r3
 8003abc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	4a08      	ldr	r2, [pc, #32]	@ (8003ae4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	f7fc fbb6 	bl	8000238 <__divsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	b299      	uxth	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2268      	movs	r2, #104	@ 0x68
 8003ad4:	5299      	strh	r1, [r3, r2]
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b005      	add	sp, #20
 8003adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	08004778 	.word	0x08004778
 8003ae4:	08004780 	.word	0x08004780

08003ae8 <LL_GPIO_SetPinMode>:
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	435b      	muls	r3, r3
 8003afc:	001a      	movs	r2, r3
 8003afe:	0013      	movs	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	43db      	mvns	r3, r3
 8003b06:	400b      	ands	r3, r1
 8003b08:	001a      	movs	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	435b      	muls	r3, r3
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	434b      	muls	r3, r1
 8003b12:	431a      	orrs	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	601a      	str	r2, [r3, #0]
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b004      	add	sp, #16
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <LL_GPIO_SetPinOutputType>:
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	43d2      	mvns	r2, r2
 8003b34:	401a      	ands	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	434b      	muls	r3, r1
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	605a      	str	r2, [r3, #4]
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <LL_GPIO_SetPinSpeed>:
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	435b      	muls	r3, r3
 8003b5e:	001a      	movs	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	189b      	adds	r3, r3, r2
 8003b66:	43db      	mvns	r3, r3
 8003b68:	400b      	ands	r3, r1
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	435b      	muls	r3, r3
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	434b      	muls	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	609a      	str	r2, [r3, #8]
}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b004      	add	sp, #16
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <LL_GPIO_SetPinPull>:
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68d9      	ldr	r1, [r3, #12]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	435b      	muls	r3, r3
 8003b96:	001a      	movs	r2, r3
 8003b98:	0013      	movs	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	435b      	muls	r3, r3
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	434b      	muls	r3, r1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	60da      	str	r2, [r3, #12]
}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <LL_GPIO_SetAFPin_0_7>:
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a19      	ldr	r1, [r3, #32]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	435b      	muls	r3, r3
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4353      	muls	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	435a      	muls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	400b      	ands	r3, r1
 8003be0:	001a      	movs	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	435b      	muls	r3, r3
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	434b      	muls	r3, r1
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	434b      	muls	r3, r1
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	434b      	muls	r3, r1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b004      	add	sp, #16
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <LL_GPIO_SetAFPin_8_15>:
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	0a12      	lsrs	r2, r2, #8
 8003c18:	4353      	muls	r3, r2
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	0a12      	lsrs	r2, r2, #8
 8003c1e:	4353      	muls	r3, r2
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	0a12      	lsrs	r2, r2, #8
 8003c24:	435a      	muls	r2, r3
 8003c26:	0013      	movs	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	400b      	ands	r3, r1
 8003c30:	001a      	movs	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	0a09      	lsrs	r1, r1, #8
 8003c3a:	434b      	muls	r3, r1
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	0a09      	lsrs	r1, r1, #8
 8003c40:	434b      	muls	r3, r1
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	0a09      	lsrs	r1, r1, #8
 8003c46:	434b      	muls	r3, r1
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	434b      	muls	r3, r1
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003c68:	e047      	b.n	8003cfa <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2101      	movs	r1, #1
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4091      	lsls	r1, r2
 8003c74:	000a      	movs	r2, r1
 8003c76:	4013      	ands	r3, r2
 8003c78:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d039      	beq.n	8003cf4 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d003      	beq.n	8003c90 <LL_GPIO_Init+0x36>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d10d      	bne.n	8003cac <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff ff56 	bl	8003b4a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7ff ff3a 	bl	8003b20 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff ff64 	bl	8003b82 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d111      	bne.n	8003ce6 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2bff      	cmp	r3, #255	@ 0xff
 8003cc6:	d807      	bhi.n	8003cd8 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff ff72 	bl	8003bba <LL_GPIO_SetAFPin_0_7>
 8003cd6:	e006      	b.n	8003ce6 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff ff8d 	bl	8003c00 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7ff fefa 	bl	8003ae8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	40da      	lsrs	r2, r3
 8003d02:	1e13      	subs	r3, r2, #0
 8003d04:	d1b1      	bne.n	8003c6a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b004      	add	sp, #16
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d18:	4b03      	ldr	r3, [pc, #12]	@ (8003d28 <LL_SetSystemCoreClock+0x18>)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	20000034 	.word	0x20000034

08003d2c <siprintf>:
 8003d2c:	b40e      	push	{r1, r2, r3}
 8003d2e:	b500      	push	{lr}
 8003d30:	490b      	ldr	r1, [pc, #44]	@ (8003d60 <siprintf+0x34>)
 8003d32:	b09c      	sub	sp, #112	@ 0x70
 8003d34:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d36:	9002      	str	r0, [sp, #8]
 8003d38:	9006      	str	r0, [sp, #24]
 8003d3a:	9107      	str	r1, [sp, #28]
 8003d3c:	9104      	str	r1, [sp, #16]
 8003d3e:	4809      	ldr	r0, [pc, #36]	@ (8003d64 <siprintf+0x38>)
 8003d40:	4909      	ldr	r1, [pc, #36]	@ (8003d68 <siprintf+0x3c>)
 8003d42:	cb04      	ldmia	r3!, {r2}
 8003d44:	9105      	str	r1, [sp, #20]
 8003d46:	6800      	ldr	r0, [r0, #0]
 8003d48:	a902      	add	r1, sp, #8
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	f000 f9b4 	bl	80040b8 <_svfiprintf_r>
 8003d50:	2200      	movs	r2, #0
 8003d52:	9b02      	ldr	r3, [sp, #8]
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	b01c      	add	sp, #112	@ 0x70
 8003d58:	bc08      	pop	{r3}
 8003d5a:	b003      	add	sp, #12
 8003d5c:	4718      	bx	r3
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	7fffffff 	.word	0x7fffffff
 8003d64:	20000040 	.word	0x20000040
 8003d68:	ffff0208 	.word	0xffff0208

08003d6c <memset>:
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	1882      	adds	r2, r0, r2
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d100      	bne.n	8003d76 <memset+0xa>
 8003d74:	4770      	bx	lr
 8003d76:	7019      	strb	r1, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	e7f9      	b.n	8003d70 <memset+0x4>

08003d7c <strstr>:
 8003d7c:	780a      	ldrb	r2, [r1, #0]
 8003d7e:	b530      	push	{r4, r5, lr}
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	d10c      	bne.n	8003d9e <strstr+0x22>
 8003d84:	bd30      	pop	{r4, r5, pc}
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d108      	bne.n	8003d9c <strstr+0x20>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	5ccc      	ldrb	r4, [r1, r3]
 8003d8e:	2c00      	cmp	r4, #0
 8003d90:	d0f8      	beq.n	8003d84 <strstr+0x8>
 8003d92:	5cc5      	ldrb	r5, [r0, r3]
 8003d94:	42a5      	cmp	r5, r4
 8003d96:	d101      	bne.n	8003d9c <strstr+0x20>
 8003d98:	3301      	adds	r3, #1
 8003d9a:	e7f7      	b.n	8003d8c <strstr+0x10>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	7803      	ldrb	r3, [r0, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <strstr+0xa>
 8003da4:	0018      	movs	r0, r3
 8003da6:	e7ed      	b.n	8003d84 <strstr+0x8>

08003da8 <__errno>:
 8003da8:	4b01      	ldr	r3, [pc, #4]	@ (8003db0 <__errno+0x8>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	4770      	bx	lr
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	20000040 	.word	0x20000040

08003db4 <__libc_init_array>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	2600      	movs	r6, #0
 8003db8:	4c0c      	ldr	r4, [pc, #48]	@ (8003dec <__libc_init_array+0x38>)
 8003dba:	4d0d      	ldr	r5, [pc, #52]	@ (8003df0 <__libc_init_array+0x3c>)
 8003dbc:	1b64      	subs	r4, r4, r5
 8003dbe:	10a4      	asrs	r4, r4, #2
 8003dc0:	42a6      	cmp	r6, r4
 8003dc2:	d109      	bne.n	8003dd8 <__libc_init_array+0x24>
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	f000 fc65 	bl	8004694 <_init>
 8003dca:	4c0a      	ldr	r4, [pc, #40]	@ (8003df4 <__libc_init_array+0x40>)
 8003dcc:	4d0a      	ldr	r5, [pc, #40]	@ (8003df8 <__libc_init_array+0x44>)
 8003dce:	1b64      	subs	r4, r4, r5
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	42a6      	cmp	r6, r4
 8003dd4:	d105      	bne.n	8003de2 <__libc_init_array+0x2e>
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	00b3      	lsls	r3, r6, #2
 8003dda:	58eb      	ldr	r3, [r5, r3]
 8003ddc:	4798      	blx	r3
 8003dde:	3601      	adds	r6, #1
 8003de0:	e7ee      	b.n	8003dc0 <__libc_init_array+0xc>
 8003de2:	00b3      	lsls	r3, r6, #2
 8003de4:	58eb      	ldr	r3, [r5, r3]
 8003de6:	4798      	blx	r3
 8003de8:	3601      	adds	r6, #1
 8003dea:	e7f2      	b.n	8003dd2 <__libc_init_array+0x1e>
 8003dec:	080047bc 	.word	0x080047bc
 8003df0:	080047bc 	.word	0x080047bc
 8003df4:	080047c0 	.word	0x080047c0
 8003df8:	080047bc 	.word	0x080047bc

08003dfc <__retarget_lock_acquire_recursive>:
 8003dfc:	4770      	bx	lr

08003dfe <__retarget_lock_release_recursive>:
 8003dfe:	4770      	bx	lr

08003e00 <_free_r>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	0005      	movs	r5, r0
 8003e04:	1e0c      	subs	r4, r1, #0
 8003e06:	d010      	beq.n	8003e2a <_free_r+0x2a>
 8003e08:	3c04      	subs	r4, #4
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	da00      	bge.n	8003e12 <_free_r+0x12>
 8003e10:	18e4      	adds	r4, r4, r3
 8003e12:	0028      	movs	r0, r5
 8003e14:	f000 f8e0 	bl	8003fd8 <__malloc_lock>
 8003e18:	4a1d      	ldr	r2, [pc, #116]	@ (8003e90 <_free_r+0x90>)
 8003e1a:	6813      	ldr	r3, [r2, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <_free_r+0x2c>
 8003e20:	6063      	str	r3, [r4, #4]
 8003e22:	6014      	str	r4, [r2, #0]
 8003e24:	0028      	movs	r0, r5
 8003e26:	f000 f8df 	bl	8003fe8 <__malloc_unlock>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	42a3      	cmp	r3, r4
 8003e2e:	d908      	bls.n	8003e42 <_free_r+0x42>
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	1821      	adds	r1, r4, r0
 8003e34:	428b      	cmp	r3, r1
 8003e36:	d1f3      	bne.n	8003e20 <_free_r+0x20>
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	1809      	adds	r1, r1, r0
 8003e3e:	6021      	str	r1, [r4, #0]
 8003e40:	e7ee      	b.n	8003e20 <_free_r+0x20>
 8003e42:	001a      	movs	r2, r3
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <_free_r+0x4e>
 8003e4a:	42a3      	cmp	r3, r4
 8003e4c:	d9f9      	bls.n	8003e42 <_free_r+0x42>
 8003e4e:	6811      	ldr	r1, [r2, #0]
 8003e50:	1850      	adds	r0, r2, r1
 8003e52:	42a0      	cmp	r0, r4
 8003e54:	d10b      	bne.n	8003e6e <_free_r+0x6e>
 8003e56:	6820      	ldr	r0, [r4, #0]
 8003e58:	1809      	adds	r1, r1, r0
 8003e5a:	1850      	adds	r0, r2, r1
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	4283      	cmp	r3, r0
 8003e60:	d1e0      	bne.n	8003e24 <_free_r+0x24>
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	1841      	adds	r1, r0, r1
 8003e68:	6011      	str	r1, [r2, #0]
 8003e6a:	6053      	str	r3, [r2, #4]
 8003e6c:	e7da      	b.n	8003e24 <_free_r+0x24>
 8003e6e:	42a0      	cmp	r0, r4
 8003e70:	d902      	bls.n	8003e78 <_free_r+0x78>
 8003e72:	230c      	movs	r3, #12
 8003e74:	602b      	str	r3, [r5, #0]
 8003e76:	e7d5      	b.n	8003e24 <_free_r+0x24>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	1821      	adds	r1, r4, r0
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	d103      	bne.n	8003e88 <_free_r+0x88>
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	1809      	adds	r1, r1, r0
 8003e86:	6021      	str	r1, [r4, #0]
 8003e88:	6063      	str	r3, [r4, #4]
 8003e8a:	6054      	str	r4, [r2, #4]
 8003e8c:	e7ca      	b.n	8003e24 <_free_r+0x24>
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	200003b8 	.word	0x200003b8

08003e94 <sbrk_aligned>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	4e0f      	ldr	r6, [pc, #60]	@ (8003ed4 <sbrk_aligned+0x40>)
 8003e98:	000d      	movs	r5, r1
 8003e9a:	6831      	ldr	r1, [r6, #0]
 8003e9c:	0004      	movs	r4, r0
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d102      	bne.n	8003ea8 <sbrk_aligned+0x14>
 8003ea2:	f000 fb99 	bl	80045d8 <_sbrk_r>
 8003ea6:	6030      	str	r0, [r6, #0]
 8003ea8:	0029      	movs	r1, r5
 8003eaa:	0020      	movs	r0, r4
 8003eac:	f000 fb94 	bl	80045d8 <_sbrk_r>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d103      	bne.n	8003ebc <sbrk_aligned+0x28>
 8003eb4:	2501      	movs	r5, #1
 8003eb6:	426d      	negs	r5, r5
 8003eb8:	0028      	movs	r0, r5
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	1cc5      	adds	r5, r0, #3
 8003ec0:	439d      	bics	r5, r3
 8003ec2:	42a8      	cmp	r0, r5
 8003ec4:	d0f8      	beq.n	8003eb8 <sbrk_aligned+0x24>
 8003ec6:	1a29      	subs	r1, r5, r0
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f000 fb85 	bl	80045d8 <_sbrk_r>
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d1f2      	bne.n	8003eb8 <sbrk_aligned+0x24>
 8003ed2:	e7ef      	b.n	8003eb4 <sbrk_aligned+0x20>
 8003ed4:	200003b4 	.word	0x200003b4

08003ed8 <_malloc_r>:
 8003ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eda:	2203      	movs	r2, #3
 8003edc:	1ccb      	adds	r3, r1, #3
 8003ede:	4393      	bics	r3, r2
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	0005      	movs	r5, r0
 8003ee4:	001f      	movs	r7, r3
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d234      	bcs.n	8003f54 <_malloc_r+0x7c>
 8003eea:	270c      	movs	r7, #12
 8003eec:	42b9      	cmp	r1, r7
 8003eee:	d833      	bhi.n	8003f58 <_malloc_r+0x80>
 8003ef0:	0028      	movs	r0, r5
 8003ef2:	f000 f871 	bl	8003fd8 <__malloc_lock>
 8003ef6:	4e37      	ldr	r6, [pc, #220]	@ (8003fd4 <_malloc_r+0xfc>)
 8003ef8:	6833      	ldr	r3, [r6, #0]
 8003efa:	001c      	movs	r4, r3
 8003efc:	2c00      	cmp	r4, #0
 8003efe:	d12f      	bne.n	8003f60 <_malloc_r+0x88>
 8003f00:	0039      	movs	r1, r7
 8003f02:	0028      	movs	r0, r5
 8003f04:	f7ff ffc6 	bl	8003e94 <sbrk_aligned>
 8003f08:	0004      	movs	r4, r0
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	d15f      	bne.n	8003fce <_malloc_r+0xf6>
 8003f0e:	6834      	ldr	r4, [r6, #0]
 8003f10:	9400      	str	r4, [sp, #0]
 8003f12:	9b00      	ldr	r3, [sp, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d14a      	bne.n	8003fae <_malloc_r+0xd6>
 8003f18:	2c00      	cmp	r4, #0
 8003f1a:	d052      	beq.n	8003fc2 <_malloc_r+0xea>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	0028      	movs	r0, r5
 8003f20:	18e3      	adds	r3, r4, r3
 8003f22:	9900      	ldr	r1, [sp, #0]
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f000 fb57 	bl	80045d8 <_sbrk_r>
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	4283      	cmp	r3, r0
 8003f2e:	d148      	bne.n	8003fc2 <_malloc_r+0xea>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	0028      	movs	r0, r5
 8003f34:	1aff      	subs	r7, r7, r3
 8003f36:	0039      	movs	r1, r7
 8003f38:	f7ff ffac 	bl	8003e94 <sbrk_aligned>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d040      	beq.n	8003fc2 <_malloc_r+0xea>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	19db      	adds	r3, r3, r7
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	6833      	ldr	r3, [r6, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d133      	bne.n	8003fb6 <_malloc_r+0xde>
 8003f4e:	9b00      	ldr	r3, [sp, #0]
 8003f50:	6033      	str	r3, [r6, #0]
 8003f52:	e019      	b.n	8003f88 <_malloc_r+0xb0>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	dac9      	bge.n	8003eec <_malloc_r+0x14>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	602b      	str	r3, [r5, #0]
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f60:	6821      	ldr	r1, [r4, #0]
 8003f62:	1bc9      	subs	r1, r1, r7
 8003f64:	d420      	bmi.n	8003fa8 <_malloc_r+0xd0>
 8003f66:	290b      	cmp	r1, #11
 8003f68:	d90a      	bls.n	8003f80 <_malloc_r+0xa8>
 8003f6a:	19e2      	adds	r2, r4, r7
 8003f6c:	6027      	str	r7, [r4, #0]
 8003f6e:	42a3      	cmp	r3, r4
 8003f70:	d104      	bne.n	8003f7c <_malloc_r+0xa4>
 8003f72:	6032      	str	r2, [r6, #0]
 8003f74:	6863      	ldr	r3, [r4, #4]
 8003f76:	6011      	str	r1, [r2, #0]
 8003f78:	6053      	str	r3, [r2, #4]
 8003f7a:	e005      	b.n	8003f88 <_malloc_r+0xb0>
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	e7f9      	b.n	8003f74 <_malloc_r+0x9c>
 8003f80:	6862      	ldr	r2, [r4, #4]
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	d10e      	bne.n	8003fa4 <_malloc_r+0xcc>
 8003f86:	6032      	str	r2, [r6, #0]
 8003f88:	0028      	movs	r0, r5
 8003f8a:	f000 f82d 	bl	8003fe8 <__malloc_unlock>
 8003f8e:	0020      	movs	r0, r4
 8003f90:	2207      	movs	r2, #7
 8003f92:	300b      	adds	r0, #11
 8003f94:	1d23      	adds	r3, r4, #4
 8003f96:	4390      	bics	r0, r2
 8003f98:	1ac2      	subs	r2, r0, r3
 8003f9a:	4298      	cmp	r0, r3
 8003f9c:	d0df      	beq.n	8003f5e <_malloc_r+0x86>
 8003f9e:	1a1b      	subs	r3, r3, r0
 8003fa0:	50a3      	str	r3, [r4, r2]
 8003fa2:	e7dc      	b.n	8003f5e <_malloc_r+0x86>
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	e7ef      	b.n	8003f88 <_malloc_r+0xb0>
 8003fa8:	0023      	movs	r3, r4
 8003faa:	6864      	ldr	r4, [r4, #4]
 8003fac:	e7a6      	b.n	8003efc <_malloc_r+0x24>
 8003fae:	9c00      	ldr	r4, [sp, #0]
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	e7ad      	b.n	8003f12 <_malloc_r+0x3a>
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	42a3      	cmp	r3, r4
 8003fbc:	d1fb      	bne.n	8003fb6 <_malloc_r+0xde>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e7da      	b.n	8003f78 <_malloc_r+0xa0>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	0028      	movs	r0, r5
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f000 f80e 	bl	8003fe8 <__malloc_unlock>
 8003fcc:	e7c6      	b.n	8003f5c <_malloc_r+0x84>
 8003fce:	6007      	str	r7, [r0, #0]
 8003fd0:	e7da      	b.n	8003f88 <_malloc_r+0xb0>
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	200003b8 	.word	0x200003b8

08003fd8 <__malloc_lock>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	4802      	ldr	r0, [pc, #8]	@ (8003fe4 <__malloc_lock+0xc>)
 8003fdc:	f7ff ff0e 	bl	8003dfc <__retarget_lock_acquire_recursive>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	200003b0 	.word	0x200003b0

08003fe8 <__malloc_unlock>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4802      	ldr	r0, [pc, #8]	@ (8003ff4 <__malloc_unlock+0xc>)
 8003fec:	f7ff ff07 	bl	8003dfe <__retarget_lock_release_recursive>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	200003b0 	.word	0x200003b0

08003ff8 <__ssputs_r>:
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	688e      	ldr	r6, [r1, #8]
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	001f      	movs	r7, r3
 8004000:	000c      	movs	r4, r1
 8004002:	680b      	ldr	r3, [r1, #0]
 8004004:	9002      	str	r0, [sp, #8]
 8004006:	9203      	str	r2, [sp, #12]
 8004008:	42be      	cmp	r6, r7
 800400a:	d830      	bhi.n	800406e <__ssputs_r+0x76>
 800400c:	210c      	movs	r1, #12
 800400e:	5e62      	ldrsh	r2, [r4, r1]
 8004010:	2190      	movs	r1, #144	@ 0x90
 8004012:	00c9      	lsls	r1, r1, #3
 8004014:	420a      	tst	r2, r1
 8004016:	d028      	beq.n	800406a <__ssputs_r+0x72>
 8004018:	2003      	movs	r0, #3
 800401a:	6921      	ldr	r1, [r4, #16]
 800401c:	1a5b      	subs	r3, r3, r1
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	6963      	ldr	r3, [r4, #20]
 8004022:	4343      	muls	r3, r0
 8004024:	9801      	ldr	r0, [sp, #4]
 8004026:	0fdd      	lsrs	r5, r3, #31
 8004028:	18ed      	adds	r5, r5, r3
 800402a:	1c7b      	adds	r3, r7, #1
 800402c:	181b      	adds	r3, r3, r0
 800402e:	106d      	asrs	r5, r5, #1
 8004030:	42ab      	cmp	r3, r5
 8004032:	d900      	bls.n	8004036 <__ssputs_r+0x3e>
 8004034:	001d      	movs	r5, r3
 8004036:	0552      	lsls	r2, r2, #21
 8004038:	d528      	bpl.n	800408c <__ssputs_r+0x94>
 800403a:	0029      	movs	r1, r5
 800403c:	9802      	ldr	r0, [sp, #8]
 800403e:	f7ff ff4b 	bl	8003ed8 <_malloc_r>
 8004042:	1e06      	subs	r6, r0, #0
 8004044:	d02c      	beq.n	80040a0 <__ssputs_r+0xa8>
 8004046:	9a01      	ldr	r2, [sp, #4]
 8004048:	6921      	ldr	r1, [r4, #16]
 800404a:	f000 fae2 	bl	8004612 <memcpy>
 800404e:	89a2      	ldrh	r2, [r4, #12]
 8004050:	4b18      	ldr	r3, [pc, #96]	@ (80040b4 <__ssputs_r+0xbc>)
 8004052:	401a      	ands	r2, r3
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	4313      	orrs	r3, r2
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	9b01      	ldr	r3, [sp, #4]
 800405c:	6126      	str	r6, [r4, #16]
 800405e:	18f6      	adds	r6, r6, r3
 8004060:	6026      	str	r6, [r4, #0]
 8004062:	003e      	movs	r6, r7
 8004064:	6165      	str	r5, [r4, #20]
 8004066:	1aed      	subs	r5, r5, r3
 8004068:	60a5      	str	r5, [r4, #8]
 800406a:	42be      	cmp	r6, r7
 800406c:	d900      	bls.n	8004070 <__ssputs_r+0x78>
 800406e:	003e      	movs	r6, r7
 8004070:	0032      	movs	r2, r6
 8004072:	9903      	ldr	r1, [sp, #12]
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	f000 fa9b 	bl	80045b0 <memmove>
 800407a:	2000      	movs	r0, #0
 800407c:	68a3      	ldr	r3, [r4, #8]
 800407e:	1b9b      	subs	r3, r3, r6
 8004080:	60a3      	str	r3, [r4, #8]
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	199b      	adds	r3, r3, r6
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	b005      	add	sp, #20
 800408a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408c:	002a      	movs	r2, r5
 800408e:	9802      	ldr	r0, [sp, #8]
 8004090:	f000 fac8 	bl	8004624 <_realloc_r>
 8004094:	1e06      	subs	r6, r0, #0
 8004096:	d1e0      	bne.n	800405a <__ssputs_r+0x62>
 8004098:	6921      	ldr	r1, [r4, #16]
 800409a:	9802      	ldr	r0, [sp, #8]
 800409c:	f7ff feb0 	bl	8003e00 <_free_r>
 80040a0:	230c      	movs	r3, #12
 80040a2:	2001      	movs	r0, #1
 80040a4:	9a02      	ldr	r2, [sp, #8]
 80040a6:	4240      	negs	r0, r0
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	89a2      	ldrh	r2, [r4, #12]
 80040ac:	3334      	adds	r3, #52	@ 0x34
 80040ae:	4313      	orrs	r3, r2
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	e7e9      	b.n	8004088 <__ssputs_r+0x90>
 80040b4:	fffffb7f 	.word	0xfffffb7f

080040b8 <_svfiprintf_r>:
 80040b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ba:	b0a1      	sub	sp, #132	@ 0x84
 80040bc:	9003      	str	r0, [sp, #12]
 80040be:	001d      	movs	r5, r3
 80040c0:	898b      	ldrh	r3, [r1, #12]
 80040c2:	000f      	movs	r7, r1
 80040c4:	0016      	movs	r6, r2
 80040c6:	061b      	lsls	r3, r3, #24
 80040c8:	d511      	bpl.n	80040ee <_svfiprintf_r+0x36>
 80040ca:	690b      	ldr	r3, [r1, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10e      	bne.n	80040ee <_svfiprintf_r+0x36>
 80040d0:	2140      	movs	r1, #64	@ 0x40
 80040d2:	f7ff ff01 	bl	8003ed8 <_malloc_r>
 80040d6:	6038      	str	r0, [r7, #0]
 80040d8:	6138      	str	r0, [r7, #16]
 80040da:	2800      	cmp	r0, #0
 80040dc:	d105      	bne.n	80040ea <_svfiprintf_r+0x32>
 80040de:	230c      	movs	r3, #12
 80040e0:	9a03      	ldr	r2, [sp, #12]
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	2001      	movs	r0, #1
 80040e6:	4240      	negs	r0, r0
 80040e8:	e0cf      	b.n	800428a <_svfiprintf_r+0x1d2>
 80040ea:	2340      	movs	r3, #64	@ 0x40
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	2300      	movs	r3, #0
 80040f0:	ac08      	add	r4, sp, #32
 80040f2:	6163      	str	r3, [r4, #20]
 80040f4:	3320      	adds	r3, #32
 80040f6:	7663      	strb	r3, [r4, #25]
 80040f8:	3310      	adds	r3, #16
 80040fa:	76a3      	strb	r3, [r4, #26]
 80040fc:	9507      	str	r5, [sp, #28]
 80040fe:	0035      	movs	r5, r6
 8004100:	782b      	ldrb	r3, [r5, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <_svfiprintf_r+0x52>
 8004106:	2b25      	cmp	r3, #37	@ 0x25
 8004108:	d148      	bne.n	800419c <_svfiprintf_r+0xe4>
 800410a:	1bab      	subs	r3, r5, r6
 800410c:	9305      	str	r3, [sp, #20]
 800410e:	42b5      	cmp	r5, r6
 8004110:	d00b      	beq.n	800412a <_svfiprintf_r+0x72>
 8004112:	0032      	movs	r2, r6
 8004114:	0039      	movs	r1, r7
 8004116:	9803      	ldr	r0, [sp, #12]
 8004118:	f7ff ff6e 	bl	8003ff8 <__ssputs_r>
 800411c:	3001      	adds	r0, #1
 800411e:	d100      	bne.n	8004122 <_svfiprintf_r+0x6a>
 8004120:	e0ae      	b.n	8004280 <_svfiprintf_r+0x1c8>
 8004122:	6963      	ldr	r3, [r4, #20]
 8004124:	9a05      	ldr	r2, [sp, #20]
 8004126:	189b      	adds	r3, r3, r2
 8004128:	6163      	str	r3, [r4, #20]
 800412a:	782b      	ldrb	r3, [r5, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d100      	bne.n	8004132 <_svfiprintf_r+0x7a>
 8004130:	e0a6      	b.n	8004280 <_svfiprintf_r+0x1c8>
 8004132:	2201      	movs	r2, #1
 8004134:	2300      	movs	r3, #0
 8004136:	4252      	negs	r2, r2
 8004138:	6062      	str	r2, [r4, #4]
 800413a:	a904      	add	r1, sp, #16
 800413c:	3254      	adds	r2, #84	@ 0x54
 800413e:	1852      	adds	r2, r2, r1
 8004140:	1c6e      	adds	r6, r5, #1
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	60e3      	str	r3, [r4, #12]
 8004146:	60a3      	str	r3, [r4, #8]
 8004148:	7013      	strb	r3, [r2, #0]
 800414a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800414c:	4b54      	ldr	r3, [pc, #336]	@ (80042a0 <_svfiprintf_r+0x1e8>)
 800414e:	2205      	movs	r2, #5
 8004150:	0018      	movs	r0, r3
 8004152:	7831      	ldrb	r1, [r6, #0]
 8004154:	9305      	str	r3, [sp, #20]
 8004156:	f000 fa51 	bl	80045fc <memchr>
 800415a:	1c75      	adds	r5, r6, #1
 800415c:	2800      	cmp	r0, #0
 800415e:	d11f      	bne.n	80041a0 <_svfiprintf_r+0xe8>
 8004160:	6822      	ldr	r2, [r4, #0]
 8004162:	06d3      	lsls	r3, r2, #27
 8004164:	d504      	bpl.n	8004170 <_svfiprintf_r+0xb8>
 8004166:	2353      	movs	r3, #83	@ 0x53
 8004168:	a904      	add	r1, sp, #16
 800416a:	185b      	adds	r3, r3, r1
 800416c:	2120      	movs	r1, #32
 800416e:	7019      	strb	r1, [r3, #0]
 8004170:	0713      	lsls	r3, r2, #28
 8004172:	d504      	bpl.n	800417e <_svfiprintf_r+0xc6>
 8004174:	2353      	movs	r3, #83	@ 0x53
 8004176:	a904      	add	r1, sp, #16
 8004178:	185b      	adds	r3, r3, r1
 800417a:	212b      	movs	r1, #43	@ 0x2b
 800417c:	7019      	strb	r1, [r3, #0]
 800417e:	7833      	ldrb	r3, [r6, #0]
 8004180:	2b2a      	cmp	r3, #42	@ 0x2a
 8004182:	d016      	beq.n	80041b2 <_svfiprintf_r+0xfa>
 8004184:	0035      	movs	r5, r6
 8004186:	2100      	movs	r1, #0
 8004188:	200a      	movs	r0, #10
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	782a      	ldrb	r2, [r5, #0]
 800418e:	1c6e      	adds	r6, r5, #1
 8004190:	3a30      	subs	r2, #48	@ 0x30
 8004192:	2a09      	cmp	r2, #9
 8004194:	d950      	bls.n	8004238 <_svfiprintf_r+0x180>
 8004196:	2900      	cmp	r1, #0
 8004198:	d111      	bne.n	80041be <_svfiprintf_r+0x106>
 800419a:	e017      	b.n	80041cc <_svfiprintf_r+0x114>
 800419c:	3501      	adds	r5, #1
 800419e:	e7af      	b.n	8004100 <_svfiprintf_r+0x48>
 80041a0:	9b05      	ldr	r3, [sp, #20]
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	1ac0      	subs	r0, r0, r3
 80041a6:	2301      	movs	r3, #1
 80041a8:	4083      	lsls	r3, r0
 80041aa:	4313      	orrs	r3, r2
 80041ac:	002e      	movs	r6, r5
 80041ae:	6023      	str	r3, [r4, #0]
 80041b0:	e7cc      	b.n	800414c <_svfiprintf_r+0x94>
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	9107      	str	r1, [sp, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db01      	blt.n	80041c2 <_svfiprintf_r+0x10a>
 80041be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041c0:	e004      	b.n	80041cc <_svfiprintf_r+0x114>
 80041c2:	425b      	negs	r3, r3
 80041c4:	60e3      	str	r3, [r4, #12]
 80041c6:	2302      	movs	r3, #2
 80041c8:	4313      	orrs	r3, r2
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	782b      	ldrb	r3, [r5, #0]
 80041ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80041d0:	d10c      	bne.n	80041ec <_svfiprintf_r+0x134>
 80041d2:	786b      	ldrb	r3, [r5, #1]
 80041d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d6:	d134      	bne.n	8004242 <_svfiprintf_r+0x18a>
 80041d8:	9b07      	ldr	r3, [sp, #28]
 80041da:	3502      	adds	r5, #2
 80041dc:	1d1a      	adds	r2, r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9207      	str	r2, [sp, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da01      	bge.n	80041ea <_svfiprintf_r+0x132>
 80041e6:	2301      	movs	r3, #1
 80041e8:	425b      	negs	r3, r3
 80041ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ec:	4e2d      	ldr	r6, [pc, #180]	@ (80042a4 <_svfiprintf_r+0x1ec>)
 80041ee:	2203      	movs	r2, #3
 80041f0:	0030      	movs	r0, r6
 80041f2:	7829      	ldrb	r1, [r5, #0]
 80041f4:	f000 fa02 	bl	80045fc <memchr>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d006      	beq.n	800420a <_svfiprintf_r+0x152>
 80041fc:	2340      	movs	r3, #64	@ 0x40
 80041fe:	1b80      	subs	r0, r0, r6
 8004200:	4083      	lsls	r3, r0
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	3501      	adds	r5, #1
 8004206:	4313      	orrs	r3, r2
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	7829      	ldrb	r1, [r5, #0]
 800420c:	2206      	movs	r2, #6
 800420e:	4826      	ldr	r0, [pc, #152]	@ (80042a8 <_svfiprintf_r+0x1f0>)
 8004210:	1c6e      	adds	r6, r5, #1
 8004212:	7621      	strb	r1, [r4, #24]
 8004214:	f000 f9f2 	bl	80045fc <memchr>
 8004218:	2800      	cmp	r0, #0
 800421a:	d038      	beq.n	800428e <_svfiprintf_r+0x1d6>
 800421c:	4b23      	ldr	r3, [pc, #140]	@ (80042ac <_svfiprintf_r+0x1f4>)
 800421e:	2b00      	cmp	r3, #0
 8004220:	d122      	bne.n	8004268 <_svfiprintf_r+0x1b0>
 8004222:	2207      	movs	r2, #7
 8004224:	9b07      	ldr	r3, [sp, #28]
 8004226:	3307      	adds	r3, #7
 8004228:	4393      	bics	r3, r2
 800422a:	3308      	adds	r3, #8
 800422c:	9307      	str	r3, [sp, #28]
 800422e:	6963      	ldr	r3, [r4, #20]
 8004230:	9a04      	ldr	r2, [sp, #16]
 8004232:	189b      	adds	r3, r3, r2
 8004234:	6163      	str	r3, [r4, #20]
 8004236:	e762      	b.n	80040fe <_svfiprintf_r+0x46>
 8004238:	4343      	muls	r3, r0
 800423a:	0035      	movs	r5, r6
 800423c:	2101      	movs	r1, #1
 800423e:	189b      	adds	r3, r3, r2
 8004240:	e7a4      	b.n	800418c <_svfiprintf_r+0xd4>
 8004242:	2300      	movs	r3, #0
 8004244:	200a      	movs	r0, #10
 8004246:	0019      	movs	r1, r3
 8004248:	3501      	adds	r5, #1
 800424a:	6063      	str	r3, [r4, #4]
 800424c:	782a      	ldrb	r2, [r5, #0]
 800424e:	1c6e      	adds	r6, r5, #1
 8004250:	3a30      	subs	r2, #48	@ 0x30
 8004252:	2a09      	cmp	r2, #9
 8004254:	d903      	bls.n	800425e <_svfiprintf_r+0x1a6>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0c8      	beq.n	80041ec <_svfiprintf_r+0x134>
 800425a:	9109      	str	r1, [sp, #36]	@ 0x24
 800425c:	e7c6      	b.n	80041ec <_svfiprintf_r+0x134>
 800425e:	4341      	muls	r1, r0
 8004260:	0035      	movs	r5, r6
 8004262:	2301      	movs	r3, #1
 8004264:	1889      	adds	r1, r1, r2
 8004266:	e7f1      	b.n	800424c <_svfiprintf_r+0x194>
 8004268:	aa07      	add	r2, sp, #28
 800426a:	9200      	str	r2, [sp, #0]
 800426c:	0021      	movs	r1, r4
 800426e:	003a      	movs	r2, r7
 8004270:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <_svfiprintf_r+0x1f8>)
 8004272:	9803      	ldr	r0, [sp, #12]
 8004274:	e000      	b.n	8004278 <_svfiprintf_r+0x1c0>
 8004276:	bf00      	nop
 8004278:	9004      	str	r0, [sp, #16]
 800427a:	9b04      	ldr	r3, [sp, #16]
 800427c:	3301      	adds	r3, #1
 800427e:	d1d6      	bne.n	800422e <_svfiprintf_r+0x176>
 8004280:	89bb      	ldrh	r3, [r7, #12]
 8004282:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004284:	065b      	lsls	r3, r3, #25
 8004286:	d500      	bpl.n	800428a <_svfiprintf_r+0x1d2>
 8004288:	e72c      	b.n	80040e4 <_svfiprintf_r+0x2c>
 800428a:	b021      	add	sp, #132	@ 0x84
 800428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428e:	aa07      	add	r2, sp, #28
 8004290:	9200      	str	r2, [sp, #0]
 8004292:	0021      	movs	r1, r4
 8004294:	003a      	movs	r2, r7
 8004296:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <_svfiprintf_r+0x1f8>)
 8004298:	9803      	ldr	r0, [sp, #12]
 800429a:	f000 f87b 	bl	8004394 <_printf_i>
 800429e:	e7eb      	b.n	8004278 <_svfiprintf_r+0x1c0>
 80042a0:	08004788 	.word	0x08004788
 80042a4:	0800478e 	.word	0x0800478e
 80042a8:	08004792 	.word	0x08004792
 80042ac:	00000000 	.word	0x00000000
 80042b0:	08003ff9 	.word	0x08003ff9

080042b4 <_printf_common>:
 80042b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b6:	0016      	movs	r6, r2
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	688a      	ldr	r2, [r1, #8]
 80042bc:	690b      	ldr	r3, [r1, #16]
 80042be:	000c      	movs	r4, r1
 80042c0:	9000      	str	r0, [sp, #0]
 80042c2:	4293      	cmp	r3, r2
 80042c4:	da00      	bge.n	80042c8 <_printf_common+0x14>
 80042c6:	0013      	movs	r3, r2
 80042c8:	0022      	movs	r2, r4
 80042ca:	6033      	str	r3, [r6, #0]
 80042cc:	3243      	adds	r2, #67	@ 0x43
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	d001      	beq.n	80042d8 <_printf_common+0x24>
 80042d4:	3301      	adds	r3, #1
 80042d6:	6033      	str	r3, [r6, #0]
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	069b      	lsls	r3, r3, #26
 80042dc:	d502      	bpl.n	80042e4 <_printf_common+0x30>
 80042de:	6833      	ldr	r3, [r6, #0]
 80042e0:	3302      	adds	r3, #2
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	2306      	movs	r3, #6
 80042e8:	0015      	movs	r5, r2
 80042ea:	401d      	ands	r5, r3
 80042ec:	421a      	tst	r2, r3
 80042ee:	d027      	beq.n	8004340 <_printf_common+0x8c>
 80042f0:	0023      	movs	r3, r4
 80042f2:	3343      	adds	r3, #67	@ 0x43
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	1e5a      	subs	r2, r3, #1
 80042f8:	4193      	sbcs	r3, r2
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	0692      	lsls	r2, r2, #26
 80042fe:	d430      	bmi.n	8004362 <_printf_common+0xae>
 8004300:	0022      	movs	r2, r4
 8004302:	9901      	ldr	r1, [sp, #4]
 8004304:	9800      	ldr	r0, [sp, #0]
 8004306:	9d08      	ldr	r5, [sp, #32]
 8004308:	3243      	adds	r2, #67	@ 0x43
 800430a:	47a8      	blx	r5
 800430c:	3001      	adds	r0, #1
 800430e:	d025      	beq.n	800435c <_printf_common+0xa8>
 8004310:	2206      	movs	r2, #6
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	2500      	movs	r5, #0
 8004316:	4013      	ands	r3, r2
 8004318:	2b04      	cmp	r3, #4
 800431a:	d105      	bne.n	8004328 <_printf_common+0x74>
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	68e5      	ldr	r5, [r4, #12]
 8004320:	1aed      	subs	r5, r5, r3
 8004322:	43eb      	mvns	r3, r5
 8004324:	17db      	asrs	r3, r3, #31
 8004326:	401d      	ands	r5, r3
 8004328:	68a3      	ldr	r3, [r4, #8]
 800432a:	6922      	ldr	r2, [r4, #16]
 800432c:	4293      	cmp	r3, r2
 800432e:	dd01      	ble.n	8004334 <_printf_common+0x80>
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	18ed      	adds	r5, r5, r3
 8004334:	2600      	movs	r6, #0
 8004336:	42b5      	cmp	r5, r6
 8004338:	d120      	bne.n	800437c <_printf_common+0xc8>
 800433a:	2000      	movs	r0, #0
 800433c:	e010      	b.n	8004360 <_printf_common+0xac>
 800433e:	3501      	adds	r5, #1
 8004340:	68e3      	ldr	r3, [r4, #12]
 8004342:	6832      	ldr	r2, [r6, #0]
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	42ab      	cmp	r3, r5
 8004348:	ddd2      	ble.n	80042f0 <_printf_common+0x3c>
 800434a:	0022      	movs	r2, r4
 800434c:	2301      	movs	r3, #1
 800434e:	9901      	ldr	r1, [sp, #4]
 8004350:	9800      	ldr	r0, [sp, #0]
 8004352:	9f08      	ldr	r7, [sp, #32]
 8004354:	3219      	adds	r2, #25
 8004356:	47b8      	blx	r7
 8004358:	3001      	adds	r0, #1
 800435a:	d1f0      	bne.n	800433e <_printf_common+0x8a>
 800435c:	2001      	movs	r0, #1
 800435e:	4240      	negs	r0, r0
 8004360:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004362:	2030      	movs	r0, #48	@ 0x30
 8004364:	18e1      	adds	r1, r4, r3
 8004366:	3143      	adds	r1, #67	@ 0x43
 8004368:	7008      	strb	r0, [r1, #0]
 800436a:	0021      	movs	r1, r4
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	3145      	adds	r1, #69	@ 0x45
 8004370:	7809      	ldrb	r1, [r1, #0]
 8004372:	18a2      	adds	r2, r4, r2
 8004374:	3243      	adds	r2, #67	@ 0x43
 8004376:	3302      	adds	r3, #2
 8004378:	7011      	strb	r1, [r2, #0]
 800437a:	e7c1      	b.n	8004300 <_printf_common+0x4c>
 800437c:	0022      	movs	r2, r4
 800437e:	2301      	movs	r3, #1
 8004380:	9901      	ldr	r1, [sp, #4]
 8004382:	9800      	ldr	r0, [sp, #0]
 8004384:	9f08      	ldr	r7, [sp, #32]
 8004386:	321a      	adds	r2, #26
 8004388:	47b8      	blx	r7
 800438a:	3001      	adds	r0, #1
 800438c:	d0e6      	beq.n	800435c <_printf_common+0xa8>
 800438e:	3601      	adds	r6, #1
 8004390:	e7d1      	b.n	8004336 <_printf_common+0x82>
	...

08004394 <_printf_i>:
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	b08b      	sub	sp, #44	@ 0x2c
 8004398:	9206      	str	r2, [sp, #24]
 800439a:	000a      	movs	r2, r1
 800439c:	3243      	adds	r2, #67	@ 0x43
 800439e:	9307      	str	r3, [sp, #28]
 80043a0:	9005      	str	r0, [sp, #20]
 80043a2:	9203      	str	r2, [sp, #12]
 80043a4:	7e0a      	ldrb	r2, [r1, #24]
 80043a6:	000c      	movs	r4, r1
 80043a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043aa:	2a78      	cmp	r2, #120	@ 0x78
 80043ac:	d809      	bhi.n	80043c2 <_printf_i+0x2e>
 80043ae:	2a62      	cmp	r2, #98	@ 0x62
 80043b0:	d80b      	bhi.n	80043ca <_printf_i+0x36>
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	d100      	bne.n	80043b8 <_printf_i+0x24>
 80043b6:	e0bc      	b.n	8004532 <_printf_i+0x19e>
 80043b8:	497b      	ldr	r1, [pc, #492]	@ (80045a8 <_printf_i+0x214>)
 80043ba:	9104      	str	r1, [sp, #16]
 80043bc:	2a58      	cmp	r2, #88	@ 0x58
 80043be:	d100      	bne.n	80043c2 <_printf_i+0x2e>
 80043c0:	e090      	b.n	80044e4 <_printf_i+0x150>
 80043c2:	0025      	movs	r5, r4
 80043c4:	3542      	adds	r5, #66	@ 0x42
 80043c6:	702a      	strb	r2, [r5, #0]
 80043c8:	e022      	b.n	8004410 <_printf_i+0x7c>
 80043ca:	0010      	movs	r0, r2
 80043cc:	3863      	subs	r0, #99	@ 0x63
 80043ce:	2815      	cmp	r0, #21
 80043d0:	d8f7      	bhi.n	80043c2 <_printf_i+0x2e>
 80043d2:	f7fb fe9d 	bl	8000110 <__gnu_thumb1_case_shi>
 80043d6:	0016      	.short	0x0016
 80043d8:	fff6001f 	.word	0xfff6001f
 80043dc:	fff6fff6 	.word	0xfff6fff6
 80043e0:	001ffff6 	.word	0x001ffff6
 80043e4:	fff6fff6 	.word	0xfff6fff6
 80043e8:	fff6fff6 	.word	0xfff6fff6
 80043ec:	003600a1 	.word	0x003600a1
 80043f0:	fff60080 	.word	0xfff60080
 80043f4:	00b2fff6 	.word	0x00b2fff6
 80043f8:	0036fff6 	.word	0x0036fff6
 80043fc:	fff6fff6 	.word	0xfff6fff6
 8004400:	0084      	.short	0x0084
 8004402:	0025      	movs	r5, r4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	3542      	adds	r5, #66	@ 0x42
 8004408:	1d11      	adds	r1, r2, #4
 800440a:	6019      	str	r1, [r3, #0]
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	702b      	strb	r3, [r5, #0]
 8004410:	2301      	movs	r3, #1
 8004412:	e0a0      	b.n	8004556 <_printf_i+0x1c2>
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	6809      	ldr	r1, [r1, #0]
 8004418:	1d02      	adds	r2, r0, #4
 800441a:	060d      	lsls	r5, r1, #24
 800441c:	d50b      	bpl.n	8004436 <_printf_i+0xa2>
 800441e:	6806      	ldr	r6, [r0, #0]
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	2e00      	cmp	r6, #0
 8004424:	da03      	bge.n	800442e <_printf_i+0x9a>
 8004426:	232d      	movs	r3, #45	@ 0x2d
 8004428:	9a03      	ldr	r2, [sp, #12]
 800442a:	4276      	negs	r6, r6
 800442c:	7013      	strb	r3, [r2, #0]
 800442e:	4b5e      	ldr	r3, [pc, #376]	@ (80045a8 <_printf_i+0x214>)
 8004430:	270a      	movs	r7, #10
 8004432:	9304      	str	r3, [sp, #16]
 8004434:	e018      	b.n	8004468 <_printf_i+0xd4>
 8004436:	6806      	ldr	r6, [r0, #0]
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	0649      	lsls	r1, r1, #25
 800443c:	d5f1      	bpl.n	8004422 <_printf_i+0x8e>
 800443e:	b236      	sxth	r6, r6
 8004440:	e7ef      	b.n	8004422 <_printf_i+0x8e>
 8004442:	6808      	ldr	r0, [r1, #0]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	c940      	ldmia	r1!, {r6}
 8004448:	0605      	lsls	r5, r0, #24
 800444a:	d402      	bmi.n	8004452 <_printf_i+0xbe>
 800444c:	0640      	lsls	r0, r0, #25
 800444e:	d500      	bpl.n	8004452 <_printf_i+0xbe>
 8004450:	b2b6      	uxth	r6, r6
 8004452:	6019      	str	r1, [r3, #0]
 8004454:	4b54      	ldr	r3, [pc, #336]	@ (80045a8 <_printf_i+0x214>)
 8004456:	270a      	movs	r7, #10
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	2a6f      	cmp	r2, #111	@ 0x6f
 800445c:	d100      	bne.n	8004460 <_printf_i+0xcc>
 800445e:	3f02      	subs	r7, #2
 8004460:	0023      	movs	r3, r4
 8004462:	2200      	movs	r2, #0
 8004464:	3343      	adds	r3, #67	@ 0x43
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	60a3      	str	r3, [r4, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	db03      	blt.n	8004478 <_printf_i+0xe4>
 8004470:	2104      	movs	r1, #4
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	438a      	bics	r2, r1
 8004476:	6022      	str	r2, [r4, #0]
 8004478:	2e00      	cmp	r6, #0
 800447a:	d102      	bne.n	8004482 <_printf_i+0xee>
 800447c:	9d03      	ldr	r5, [sp, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <_printf_i+0x108>
 8004482:	9d03      	ldr	r5, [sp, #12]
 8004484:	0030      	movs	r0, r6
 8004486:	0039      	movs	r1, r7
 8004488:	f7fb fed2 	bl	8000230 <__aeabi_uidivmod>
 800448c:	9b04      	ldr	r3, [sp, #16]
 800448e:	3d01      	subs	r5, #1
 8004490:	5c5b      	ldrb	r3, [r3, r1]
 8004492:	702b      	strb	r3, [r5, #0]
 8004494:	0033      	movs	r3, r6
 8004496:	0006      	movs	r6, r0
 8004498:	429f      	cmp	r7, r3
 800449a:	d9f3      	bls.n	8004484 <_printf_i+0xf0>
 800449c:	2f08      	cmp	r7, #8
 800449e:	d109      	bne.n	80044b4 <_printf_i+0x120>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d506      	bpl.n	80044b4 <_printf_i+0x120>
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	6923      	ldr	r3, [r4, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	dc02      	bgt.n	80044b4 <_printf_i+0x120>
 80044ae:	2330      	movs	r3, #48	@ 0x30
 80044b0:	3d01      	subs	r5, #1
 80044b2:	702b      	strb	r3, [r5, #0]
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	1b5b      	subs	r3, r3, r5
 80044b8:	6123      	str	r3, [r4, #16]
 80044ba:	9b07      	ldr	r3, [sp, #28]
 80044bc:	0021      	movs	r1, r4
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	9805      	ldr	r0, [sp, #20]
 80044c2:	9b06      	ldr	r3, [sp, #24]
 80044c4:	aa09      	add	r2, sp, #36	@ 0x24
 80044c6:	f7ff fef5 	bl	80042b4 <_printf_common>
 80044ca:	3001      	adds	r0, #1
 80044cc:	d148      	bne.n	8004560 <_printf_i+0x1cc>
 80044ce:	2001      	movs	r0, #1
 80044d0:	4240      	negs	r0, r0
 80044d2:	b00b      	add	sp, #44	@ 0x2c
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d6:	2220      	movs	r2, #32
 80044d8:	6809      	ldr	r1, [r1, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	6022      	str	r2, [r4, #0]
 80044de:	2278      	movs	r2, #120	@ 0x78
 80044e0:	4932      	ldr	r1, [pc, #200]	@ (80045ac <_printf_i+0x218>)
 80044e2:	9104      	str	r1, [sp, #16]
 80044e4:	0021      	movs	r1, r4
 80044e6:	3145      	adds	r1, #69	@ 0x45
 80044e8:	700a      	strb	r2, [r1, #0]
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	c940      	ldmia	r1!, {r6}
 80044f0:	0610      	lsls	r0, r2, #24
 80044f2:	d402      	bmi.n	80044fa <_printf_i+0x166>
 80044f4:	0650      	lsls	r0, r2, #25
 80044f6:	d500      	bpl.n	80044fa <_printf_i+0x166>
 80044f8:	b2b6      	uxth	r6, r6
 80044fa:	6019      	str	r1, [r3, #0]
 80044fc:	07d3      	lsls	r3, r2, #31
 80044fe:	d502      	bpl.n	8004506 <_printf_i+0x172>
 8004500:	2320      	movs	r3, #32
 8004502:	4313      	orrs	r3, r2
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	2e00      	cmp	r6, #0
 8004508:	d001      	beq.n	800450e <_printf_i+0x17a>
 800450a:	2710      	movs	r7, #16
 800450c:	e7a8      	b.n	8004460 <_printf_i+0xcc>
 800450e:	2220      	movs	r2, #32
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	4393      	bics	r3, r2
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	e7f8      	b.n	800450a <_printf_i+0x176>
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	680d      	ldr	r5, [r1, #0]
 800451c:	1d10      	adds	r0, r2, #4
 800451e:	6949      	ldr	r1, [r1, #20]
 8004520:	6018      	str	r0, [r3, #0]
 8004522:	6813      	ldr	r3, [r2, #0]
 8004524:	062e      	lsls	r6, r5, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0x198>
 8004528:	6019      	str	r1, [r3, #0]
 800452a:	e002      	b.n	8004532 <_printf_i+0x19e>
 800452c:	066d      	lsls	r5, r5, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0x194>
 8004530:	8019      	strh	r1, [r3, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	9d03      	ldr	r5, [sp, #12]
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	e7bf      	b.n	80044ba <_printf_i+0x126>
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	1d11      	adds	r1, r2, #4
 800453e:	6019      	str	r1, [r3, #0]
 8004540:	6815      	ldr	r5, [r2, #0]
 8004542:	2100      	movs	r1, #0
 8004544:	0028      	movs	r0, r5
 8004546:	6862      	ldr	r2, [r4, #4]
 8004548:	f000 f858 	bl	80045fc <memchr>
 800454c:	2800      	cmp	r0, #0
 800454e:	d001      	beq.n	8004554 <_printf_i+0x1c0>
 8004550:	1b40      	subs	r0, r0, r5
 8004552:	6060      	str	r0, [r4, #4]
 8004554:	6863      	ldr	r3, [r4, #4]
 8004556:	6123      	str	r3, [r4, #16]
 8004558:	2300      	movs	r3, #0
 800455a:	9a03      	ldr	r2, [sp, #12]
 800455c:	7013      	strb	r3, [r2, #0]
 800455e:	e7ac      	b.n	80044ba <_printf_i+0x126>
 8004560:	002a      	movs	r2, r5
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	9906      	ldr	r1, [sp, #24]
 8004566:	9805      	ldr	r0, [sp, #20]
 8004568:	9d07      	ldr	r5, [sp, #28]
 800456a:	47a8      	blx	r5
 800456c:	3001      	adds	r0, #1
 800456e:	d0ae      	beq.n	80044ce <_printf_i+0x13a>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	079b      	lsls	r3, r3, #30
 8004574:	d415      	bmi.n	80045a2 <_printf_i+0x20e>
 8004576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004578:	68e0      	ldr	r0, [r4, #12]
 800457a:	4298      	cmp	r0, r3
 800457c:	daa9      	bge.n	80044d2 <_printf_i+0x13e>
 800457e:	0018      	movs	r0, r3
 8004580:	e7a7      	b.n	80044d2 <_printf_i+0x13e>
 8004582:	0022      	movs	r2, r4
 8004584:	2301      	movs	r3, #1
 8004586:	9906      	ldr	r1, [sp, #24]
 8004588:	9805      	ldr	r0, [sp, #20]
 800458a:	9e07      	ldr	r6, [sp, #28]
 800458c:	3219      	adds	r2, #25
 800458e:	47b0      	blx	r6
 8004590:	3001      	adds	r0, #1
 8004592:	d09c      	beq.n	80044ce <_printf_i+0x13a>
 8004594:	3501      	adds	r5, #1
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	42ab      	cmp	r3, r5
 800459e:	dcf0      	bgt.n	8004582 <_printf_i+0x1ee>
 80045a0:	e7e9      	b.n	8004576 <_printf_i+0x1e2>
 80045a2:	2500      	movs	r5, #0
 80045a4:	e7f7      	b.n	8004596 <_printf_i+0x202>
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	08004799 	.word	0x08004799
 80045ac:	080047aa 	.word	0x080047aa

080045b0 <memmove>:
 80045b0:	b510      	push	{r4, lr}
 80045b2:	4288      	cmp	r0, r1
 80045b4:	d806      	bhi.n	80045c4 <memmove+0x14>
 80045b6:	2300      	movs	r3, #0
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d008      	beq.n	80045ce <memmove+0x1e>
 80045bc:	5ccc      	ldrb	r4, [r1, r3]
 80045be:	54c4      	strb	r4, [r0, r3]
 80045c0:	3301      	adds	r3, #1
 80045c2:	e7f9      	b.n	80045b8 <memmove+0x8>
 80045c4:	188b      	adds	r3, r1, r2
 80045c6:	4298      	cmp	r0, r3
 80045c8:	d2f5      	bcs.n	80045b6 <memmove+0x6>
 80045ca:	3a01      	subs	r2, #1
 80045cc:	d200      	bcs.n	80045d0 <memmove+0x20>
 80045ce:	bd10      	pop	{r4, pc}
 80045d0:	5c8b      	ldrb	r3, [r1, r2]
 80045d2:	5483      	strb	r3, [r0, r2]
 80045d4:	e7f9      	b.n	80045ca <memmove+0x1a>
	...

080045d8 <_sbrk_r>:
 80045d8:	2300      	movs	r3, #0
 80045da:	b570      	push	{r4, r5, r6, lr}
 80045dc:	4d06      	ldr	r5, [pc, #24]	@ (80045f8 <_sbrk_r+0x20>)
 80045de:	0004      	movs	r4, r0
 80045e0:	0008      	movs	r0, r1
 80045e2:	602b      	str	r3, [r5, #0]
 80045e4:	f7fc fdba 	bl	800115c <_sbrk>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d103      	bne.n	80045f4 <_sbrk_r+0x1c>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d000      	beq.n	80045f4 <_sbrk_r+0x1c>
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	200003ac 	.word	0x200003ac

080045fc <memchr>:
 80045fc:	b2c9      	uxtb	r1, r1
 80045fe:	1882      	adds	r2, r0, r2
 8004600:	4290      	cmp	r0, r2
 8004602:	d101      	bne.n	8004608 <memchr+0xc>
 8004604:	2000      	movs	r0, #0
 8004606:	4770      	bx	lr
 8004608:	7803      	ldrb	r3, [r0, #0]
 800460a:	428b      	cmp	r3, r1
 800460c:	d0fb      	beq.n	8004606 <memchr+0xa>
 800460e:	3001      	adds	r0, #1
 8004610:	e7f6      	b.n	8004600 <memchr+0x4>

08004612 <memcpy>:
 8004612:	2300      	movs	r3, #0
 8004614:	b510      	push	{r4, lr}
 8004616:	429a      	cmp	r2, r3
 8004618:	d100      	bne.n	800461c <memcpy+0xa>
 800461a:	bd10      	pop	{r4, pc}
 800461c:	5ccc      	ldrb	r4, [r1, r3]
 800461e:	54c4      	strb	r4, [r0, r3]
 8004620:	3301      	adds	r3, #1
 8004622:	e7f8      	b.n	8004616 <memcpy+0x4>

08004624 <_realloc_r>:
 8004624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004626:	0006      	movs	r6, r0
 8004628:	000c      	movs	r4, r1
 800462a:	0015      	movs	r5, r2
 800462c:	2900      	cmp	r1, #0
 800462e:	d105      	bne.n	800463c <_realloc_r+0x18>
 8004630:	0011      	movs	r1, r2
 8004632:	f7ff fc51 	bl	8003ed8 <_malloc_r>
 8004636:	0004      	movs	r4, r0
 8004638:	0020      	movs	r0, r4
 800463a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800463c:	2a00      	cmp	r2, #0
 800463e:	d103      	bne.n	8004648 <_realloc_r+0x24>
 8004640:	f7ff fbde 	bl	8003e00 <_free_r>
 8004644:	2400      	movs	r4, #0
 8004646:	e7f7      	b.n	8004638 <_realloc_r+0x14>
 8004648:	f000 f81b 	bl	8004682 <_malloc_usable_size_r>
 800464c:	0007      	movs	r7, r0
 800464e:	4285      	cmp	r5, r0
 8004650:	d802      	bhi.n	8004658 <_realloc_r+0x34>
 8004652:	0843      	lsrs	r3, r0, #1
 8004654:	42ab      	cmp	r3, r5
 8004656:	d3ef      	bcc.n	8004638 <_realloc_r+0x14>
 8004658:	0029      	movs	r1, r5
 800465a:	0030      	movs	r0, r6
 800465c:	f7ff fc3c 	bl	8003ed8 <_malloc_r>
 8004660:	9001      	str	r0, [sp, #4]
 8004662:	2800      	cmp	r0, #0
 8004664:	d0ee      	beq.n	8004644 <_realloc_r+0x20>
 8004666:	002a      	movs	r2, r5
 8004668:	42bd      	cmp	r5, r7
 800466a:	d900      	bls.n	800466e <_realloc_r+0x4a>
 800466c:	003a      	movs	r2, r7
 800466e:	0021      	movs	r1, r4
 8004670:	9801      	ldr	r0, [sp, #4]
 8004672:	f7ff ffce 	bl	8004612 <memcpy>
 8004676:	0021      	movs	r1, r4
 8004678:	0030      	movs	r0, r6
 800467a:	f7ff fbc1 	bl	8003e00 <_free_r>
 800467e:	9c01      	ldr	r4, [sp, #4]
 8004680:	e7da      	b.n	8004638 <_realloc_r+0x14>

08004682 <_malloc_usable_size_r>:
 8004682:	1f0b      	subs	r3, r1, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1f18      	subs	r0, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	da01      	bge.n	8004690 <_malloc_usable_size_r+0xe>
 800468c:	580b      	ldr	r3, [r1, r0]
 800468e:	18c0      	adds	r0, r0, r3
 8004690:	4770      	bx	lr
	...

08004694 <_init>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr

080046a0 <_fini>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr
