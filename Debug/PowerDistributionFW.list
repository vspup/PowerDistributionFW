
PowerDistributionFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080046a4  080046a4  000056a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b4  080047b4  00006090  2**0
                  CONTENTS
  4 .ARM          00000000  080047b4  080047b4  00006090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b4  080047b4  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080047bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000090  0800484c  00006090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800484c  000063bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbff  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb8  00000000  00000000  00011cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00013b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000760  00000000  00000000  00014510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f53  00000000  00000000  00014c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4f4  00000000  00000000  0002abc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088711  00000000  00000000  000370b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002634  00000000  00000000  000bf80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c1e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000090 	.word	0x20000090
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800468c 	.word	0x0800468c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000094 	.word	0x20000094
 80000fc:	0800468c 	.word	0x0800468c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <LL_RCC_HSI_Enable+0x18>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <LL_RCC_HSI_Enable+0x18>)
 800041a:	2180      	movs	r1, #128	@ 0x80
 800041c:	0049      	lsls	r1, r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000430:	4b07      	ldr	r3, [pc, #28]	@ (8000450 <LL_RCC_HSI_IsReady+0x24>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	401a      	ands	r2, r3
 800043a:	2380      	movs	r3, #128	@ 0x80
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	429a      	cmp	r2, r3
 8000440:	d101      	bne.n	8000446 <LL_RCC_HSI_IsReady+0x1a>
 8000442:	2301      	movs	r3, #1
 8000444:	e000      	b.n	8000448 <LL_RCC_HSI_IsReady+0x1c>
 8000446:	2300      	movs	r3, #0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <LL_RCC_SetSysClkSource+0x24>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2207      	movs	r2, #7
 8000462:	4393      	bics	r3, r2
 8000464:	0019      	movs	r1, r3
 8000466:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <LL_RCC_SetSysClkSource+0x24>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	430a      	orrs	r2, r1
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000480:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <LL_RCC_GetSysClkSource+0x14>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	2238      	movs	r2, #56	@ 0x38
 8000486:	4013      	ands	r3, r2
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	40021000 	.word	0x40021000

08000494 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a06      	ldr	r2, [pc, #24]	@ (80004bc <LL_RCC_SetAHBPrescaler+0x28>)
 80004a2:	4013      	ands	r3, r2
 80004a4:	0019      	movs	r1, r3
 80004a6:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	609a      	str	r2, [r3, #8]
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	fffff0ff 	.word	0xfffff0ff

080004c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004ce:	4013      	ands	r3, r2
 80004d0:	0019      	movs	r1, r3
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	430a      	orrs	r2, r1
 80004d8:	609a      	str	r2, [r3, #8]
}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000
 80004e8:	ffff8fff 	.word	0xffff8fff

080004ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004f0:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f6:	2180      	movs	r1, #128	@ 0x80
 80004f8:	0449      	lsls	r1, r1, #17
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <LL_RCC_PLL_IsReady+0x24>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	049b      	lsls	r3, r3, #18
 8000514:	401a      	ands	r2, r3
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	049b      	lsls	r3, r3, #18
 800051a:	429a      	cmp	r2, r3
 800051c:	d101      	bne.n	8000522 <LL_RCC_PLL_IsReady+0x1a>
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <LL_RCC_PLL_IsReady+0x1c>
 8000522:	2300      	movs	r3, #0
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000544:	4013      	ands	r3, r2
 8000546:	0019      	movs	r1, r3
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	431a      	orrs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	431a      	orrs	r2, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	431a      	orrs	r2, r3
 8000558:	4b03      	ldr	r3, [pc, #12]	@ (8000568 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800055a:	430a      	orrs	r2, r1
 800055c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b004      	add	sp, #16
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	40021000 	.word	0x40021000
 800056c:	1fff808c 	.word	0x1fff808c

08000570 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	0549      	lsls	r1, r1, #21
 800057e:	430a      	orrs	r2, r1
 8000580:	60da      	str	r2, [r3, #12]
}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000596:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	430a      	orrs	r2, r1
 800059e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b004      	add	sp, #16
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2207      	movs	r2, #7
 80005c6:	4393      	bics	r3, r2
 80005c8:	0019      	movs	r1, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	40022000 	.word	0x40022000

080005e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <LL_FLASH_GetLatency+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2207      	movs	r2, #7
 80005ea:	4013      	ands	r3, r2
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40022000 	.word	0x40022000

080005f8 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4013      	ands	r3, r2
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	d101      	bne.n	8000614 <LL_GPIO_IsInputPinSet+0x1c>
 8000610:	2301      	movs	r3, #1
 8000612:	e000      	b.n	8000616 <LL_GPIO_IsInputPinSet+0x1e>
 8000614:	2300      	movs	r3, #0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	619a      	str	r2, [r3, #24]
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}

0800064e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4013      	ands	r3, r2
 8000664:	041a      	lsls	r2, r3, #16
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	43db      	mvns	r3, r3
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	400b      	ands	r3, r1
 800066e:	431a      	orrs	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	619a      	str	r2, [r3, #24]
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b004      	add	sp, #16
 800067a:	bd80      	pop	{r7, pc}

0800067c <SwitchTimingHandlar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SwitchTimingHandlar(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	timeoutPwrOff ++;
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <SwitchTimingHandlar+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <SwitchTimingHandlar+0x28>)
 8000688:	601a      	str	r2, [r3, #0]
	if(leaveSwitch)
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <SwitchTimingHandlar+0x2c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d105      	bne.n	800069e <SwitchTimingHandlar+0x22>
	{
		return;
	}
	counterSwitch ++;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <SwitchTimingHandlar+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <SwitchTimingHandlar+0x30>)
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e000      	b.n	80006a0 <SwitchTimingHandlar+0x24>
		return;
 800069e:	46c0      	nop			@ (mov r8, r8)
}
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000148 	.word	0x20000148
 80006a8:	20000145 	.word	0x20000145
 80006ac:	20000140 	.word	0x20000140

080006b0 <LED_GreenHandler>:

uint8_t greenLEDState = 0;
uint32_t greenLedTimer = 0;
void LED_GreenHandler (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0


	if(greenLEDState == 0)
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <LED_GreenHandler+0x5c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d024      	beq.n	8000706 <LED_GreenHandler+0x56>
	{
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
	}

	if(greenLEDState == 1)
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <LED_GreenHandler+0x5c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d114      	bne.n	80006ee <LED_GreenHandler+0x3e>
	{
		greenLedTimer++;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <LED_GreenHandler+0x60>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <LED_GreenHandler+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]

		if(greenLedTimer > TIME_LED_GREEN_BLINK)
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <LED_GreenHandler+0x60>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	23fa      	movs	r3, #250	@ 0xfa
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d909      	bls.n	80006ee <LED_GreenHandler+0x3e>
		{
			greenLedTimer = 0;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <LED_GreenHandler+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <LED_GreenHandler+0x64>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f7ff ffb0 	bl	800064e <LL_GPIO_TogglePin>
		}
	}

	if(greenLEDState == 2)
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <LED_GreenHandler+0x5c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d108      	bne.n	8000708 <LED_GreenHandler+0x58>
	{
		LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <LED_GreenHandler+0x64>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f7ff ff8d 	bl	800061e <LL_GPIO_SetOutputPin>
 8000704:	e000      	b.n	8000708 <LED_GreenHandler+0x58>
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000706:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000014c 	.word	0x2000014c
 8000710:	20000150 	.word	0x20000150
 8000714:	50000400 	.word	0x50000400

08000718 <HAL_UART_RxCpltCallback>:
int i = 0;
uint8_t power_state = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(rx_byte == 0x0D)
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <HAL_UART_RxCpltCallback+0xa0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b0d      	cmp	r3, #13
 8000726:	d132      	bne.n	800078e <HAL_UART_RxCpltCallback+0x76>
  {
	 for(i = 0; i < CMD_NUM; i++)
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e020      	b.n	8000772 <HAL_UART_RxCpltCallback+0x5a>
	 {
		 char *ptData = NULL;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
		 ptData = strstr((char*)&rx_buff[0], (char*)&cmd_list[i][0]);
 8000734:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	0013      	movs	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	189b      	adds	r3, r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <HAL_UART_RxCpltCallback+0xa8>)
 8000742:	189a      	adds	r2, r3, r2
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <HAL_UART_RxCpltCallback+0xac>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f003 fb13 	bl	8003d74 <strstr>
 800074e:	0003      	movs	r3, r0
 8000750:	60fb      	str	r3, [r7, #12]
		 if(ptData != NULL)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d007      	beq.n	8000768 <HAL_UART_RxCpltCallback+0x50>
		 {
			 get_cmd = i + 1;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <HAL_UART_RxCpltCallback+0xb0>)
 8000764:	701a      	strb	r2, [r3, #0]
			 break;
 8000766:	e008      	b.n	800077a <HAL_UART_RxCpltCallback+0x62>
	 for(i = 0; i < CMD_NUM; i++)
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	ddda      	ble.n	8000730 <HAL_UART_RxCpltCallback+0x18>
		 }
	 }
	 memset((char*)&rx_buff[0], 0x00, sizeof(rx_buff));
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_UART_RxCpltCallback+0xac>)
 800077c:	22ff      	movs	r2, #255	@ 0xff
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f003 faef 	bl	8003d64 <memset>
	 rx_cnt = 0;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <HAL_UART_RxCpltCallback+0xb4>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e00a      	b.n	80007a4 <HAL_UART_RxCpltCallback+0x8c>
  }
  else
  {
	  rx_buff[rx_cnt++] = rx_byte;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <HAL_UART_RxCpltCallback+0xb4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	b2d1      	uxtb	r1, r2
 8000796:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <HAL_UART_RxCpltCallback+0xb4>)
 8000798:	7011      	strb	r1, [r2, #0]
 800079a:	001a      	movs	r2, r3
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_UART_RxCpltCallback+0xa0>)
 800079e:	7819      	ldrb	r1, [r3, #0]
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_UART_RxCpltCallback+0xac>)
 80007a2:	5499      	strb	r1, [r3, r2]
  }
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80007a4:	4904      	ldr	r1, [pc, #16]	@ (80007b8 <HAL_UART_RxCpltCallback+0xa0>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <HAL_UART_RxCpltCallback+0xb8>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fa98 	bl	8001ce0 <HAL_UART_Receive_IT>
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000155 	.word	0x20000155
 80007bc:	20000260 	.word	0x20000260
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000158 	.word	0x20000158
 80007c8:	20000258 	.word	0x20000258
 80007cc:	20000257 	.word	0x20000257
 80007d0:	200000ac 	.word	0x200000ac

080007d4 <PowerOn>:

void PowerOn (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	greenLEDState = 2;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <PowerOn+0x3c>)
 80007da:	2202      	movs	r2, #2
 80007dc:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <PowerOn+0x40>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f7ff ff19 	bl	800061e <LL_GPIO_SetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <PowerOn+0x44>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fd9c 	bl	800132c <HAL_Delay>
	LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <PowerOn+0x40>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f7ff ff0e 	bl	800061e <LL_GPIO_SetOutputPin>
	power_state = 1;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <PowerOn+0x48>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	2000014c 	.word	0x2000014c
 8000814:	50000400 	.word	0x50000400
 8000818:	00001388 	.word	0x00001388
 800081c:	20000264 	.word	0x20000264

08000820 <PowerOff>:

void PowerOff (void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	4a0c      	ldr	r2, [pc, #48]	@ (800085c <PowerOff+0x3c>)
 800082a:	0019      	movs	r1, r3
 800082c:	0010      	movs	r0, r2
 800082e:	f7ff ff02 	bl	8000636 <LL_GPIO_ResetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <PowerOff+0x40>)
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fd79 	bl	800132c <HAL_Delay>
	LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 800083a:	2380      	movs	r3, #128	@ 0x80
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4a07      	ldr	r2, [pc, #28]	@ (800085c <PowerOff+0x3c>)
 8000840:	0019      	movs	r1, r3
 8000842:	0010      	movs	r0, r2
 8000844:	f7ff fef7 	bl	8000636 <LL_GPIO_ResetOutputPin>
	greenLEDState = 1;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <PowerOff+0x44>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
	power_state = 0;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <PowerOff+0x48>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	50000400 	.word	0x50000400
 8000860:	00001388 	.word	0x00001388
 8000864:	2000014c 	.word	0x2000014c
 8000868:	20000264 	.word	0x20000264

0800086c <Send_RS485_Data>:

void Send_RS485_Data (char *buff)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(buff);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff fc42 	bl	8000100 <strlen>
 800087c:	0002      	movs	r2, r0
 800087e:	240f      	movs	r4, #15
 8000880:	193b      	adds	r3, r7, r4
 8000882:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000884:	23a0      	movs	r3, #160	@ 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2102      	movs	r1, #2
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fec7 	bl	800061e <LL_GPIO_SetOutputPin>
	HAL_Delay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 fd4b 	bl	800132c <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, len *2);
 8000896:	0021      	movs	r1, r4
 8000898:	187b      	adds	r3, r7, r1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b29a      	uxth	r2, r3
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <Send_RS485_Data+0x5c>)
 80008a8:	f001 f976 	bl	8001b98 <HAL_UART_Transmit>
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fd3d 	bl	800132c <HAL_Delay>
	LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 80008b2:	23a0      	movs	r3, #160	@ 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	2102      	movs	r1, #2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff febc 	bl	8000636 <LL_GPIO_ResetOutputPin>
}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b005      	add	sp, #20
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	200000ac 	.word	0x200000ac

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fca5 	bl	8001220 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 80008d6:	23fa      	movs	r3, #250	@ 0xfa
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fd26 	bl	800132c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f9ce 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 fa5e 	bl	8000da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 fa0e 	bl	8000d08 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80008ec:	49c8      	ldr	r1, [pc, #800]	@ (8000c10 <main+0x344>)
 80008ee:	4bc9      	ldr	r3, [pc, #804]	@ (8000c14 <main+0x348>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 f9f4 	bl	8001ce0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */
  uint8_t cnt400V[2] = {0};
 80008f8:	2324      	movs	r3, #36	@ 0x24
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
  while(1)
  {
	  if(LL_GPIO_IsInputPinSet(CMP_400V_GPIO_Port,CMP_400V_Pin))
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	015b      	lsls	r3, r3, #5
 8000904:	4ac4      	ldr	r2, [pc, #784]	@ (8000c18 <main+0x34c>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f7ff fe75 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d00a      	beq.n	8000928 <main+0x5c>
	  {
		  cnt400V[0]++;
 8000912:	2124      	movs	r1, #36	@ 0x24
 8000914:	187b      	adds	r3, r7, r1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	187b      	adds	r3, r7, r1
 800091e:	701a      	strb	r2, [r3, #0]
		  cnt400V[1]=0;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	705a      	strb	r2, [r3, #1]
 8000926:	e009      	b.n	800093c <main+0x70>
	  }
	  else
	  {
		  cnt400V[1]++;
 8000928:	2124      	movs	r1, #36	@ 0x24
 800092a:	187b      	adds	r3, r7, r1
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	3301      	adds	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	187b      	adds	r3, r7, r1
 8000934:	705a      	strb	r2, [r3, #1]
		  cnt400V[0]=0;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(33);
 800093c:	2021      	movs	r0, #33	@ 0x21
 800093e:	f000 fcf5 	bl	800132c <HAL_Delay>

	  if(cnt400V[1] >= COUNT_400V_PULL)
 8000942:	2324      	movs	r3, #36	@ 0x24
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d90c      	bls.n	8000966 <main+0x9a>
	  {
	       LL_GPIO_SetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	019b      	lsls	r3, r3, #6
 8000950:	4ab1      	ldr	r2, [pc, #708]	@ (8000c18 <main+0x34c>)
 8000952:	0019      	movs	r1, r3
 8000954:	0010      	movs	r0, r2
 8000956:	f7ff fe62 	bl	800061e <LL_GPIO_SetOutputPin>
           LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800095a:	4baf      	ldr	r3, [pc, #700]	@ (8000c18 <main+0x34c>)
 800095c:	2180      	movs	r1, #128	@ 0x80
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fe5d 	bl	800061e <LL_GPIO_SetOutputPin>
		  break;
 8000964:	e012      	b.n	800098c <main+0xc0>
	  }
	  else if(cnt400V[0] >= COUNT_400V_PULL)
 8000966:	2324      	movs	r3, #36	@ 0x24
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d9c7      	bls.n	8000900 <main+0x34>
	  {
		  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	019b      	lsls	r3, r3, #6
 8000974:	4aa8      	ldr	r2, [pc, #672]	@ (8000c18 <main+0x34c>)
 8000976:	0019      	movs	r1, r3
 8000978:	0010      	movs	r0, r2
 800097a:	f7ff fe5c 	bl	8000636 <LL_GPIO_ResetOutputPin>
		  LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800097e:	2380      	movs	r3, #128	@ 0x80
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4aa5      	ldr	r2, [pc, #660]	@ (8000c18 <main+0x34c>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f7ff fe49 	bl	800061e <LL_GPIO_SetOutputPin>
		  break;
	  }

  }
  //LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
  HAL_Delay(2000);
 800098c:	23fa      	movs	r3, #250	@ 0xfa
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fccb 	bl	800132c <HAL_Delay>
  //LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
  greenLEDState = 1;
 8000996:	4ba1      	ldr	r3, [pc, #644]	@ (8000c1c <main+0x350>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800099c:	4b9e      	ldr	r3, [pc, #632]	@ (8000c18 <main+0x34c>)
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff fe48 	bl	8000636 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4a9b      	ldr	r2, [pc, #620]	@ (8000c18 <main+0x34c>)
 80009ac:	0019      	movs	r1, r3
 80009ae:	0010      	movs	r0, r2
 80009b0:	f7ff fe41 	bl	8000636 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4a97      	ldr	r2, [pc, #604]	@ (8000c18 <main+0x34c>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f7ff fe3a 	bl	8000636 <LL_GPIO_ResetOutputPin>
  counterSwitch = 0;
 80009c2:	4b97      	ldr	r3, [pc, #604]	@ (8000c20 <main+0x354>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	019b      	lsls	r3, r3, #6
 80009cc:	4a95      	ldr	r2, [pc, #596]	@ (8000c24 <main+0x358>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f7ff fe11 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d15b      	bne.n	8000a92 <main+0x1c6>
	{
		if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 80009da:	4b8f      	ldr	r3, [pc, #572]	@ (8000c18 <main+0x34c>)
 80009dc:	2104      	movs	r1, #4
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fe0a 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d133      	bne.n	8000a50 <main+0x184>
		{
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 80009e8:	e012      	b.n	8000a10 <main+0x144>
		   {
			  LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 80009ea:	4b8b      	ldr	r3, [pc, #556]	@ (8000c18 <main+0x34c>)
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff fe15 	bl	800061e <LL_GPIO_SetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4a87      	ldr	r2, [pc, #540]	@ (8000c18 <main+0x34c>)
 80009fa:	0019      	movs	r1, r3
 80009fc:	0010      	movs	r0, r2
 80009fe:	f7ff fe1a 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4a84      	ldr	r2, [pc, #528]	@ (8000c18 <main+0x34c>)
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	f7ff fe13 	bl	8000636 <LL_GPIO_ResetOutputPin>
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 8000a10:	4b81      	ldr	r3, [pc, #516]	@ (8000c18 <main+0x34c>)
 8000a12:	2104      	movs	r1, #4
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fdef 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d0e5      	beq.n	80009ea <main+0x11e>
		   }

			  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a1e:	4b7e      	ldr	r3, [pc, #504]	@ (8000c18 <main+0x34c>)
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fe07 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4a7a      	ldr	r2, [pc, #488]	@ (8000c18 <main+0x34c>)
 8000a2e:	0019      	movs	r1, r3
 8000a30:	0010      	movs	r0, r2
 8000a32:	f7ff fe00 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000a36:	2380      	movs	r3, #128	@ 0x80
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4a77      	ldr	r2, [pc, #476]	@ (8000c18 <main+0x34c>)
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0010      	movs	r0, r2
 8000a40:	f7ff fdf9 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  counterSwitch = 0;
 8000a44:	4b76      	ldr	r3, [pc, #472]	@ (8000c20 <main+0x354>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
			  leaveSwitch   = 0;
 8000a4a:	4b77      	ldr	r3, [pc, #476]	@ (8000c28 <main+0x35c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

		}

		if( (counterSwitch > TIME_SWITCH_PRESSHED)&&(leaveSwitch == 0) )
 8000a50:	4b73      	ldr	r3, [pc, #460]	@ (8000c20 <main+0x354>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	23fa      	movs	r3, #250	@ 0xfa
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d920      	bls.n	8000a9e <main+0x1d2>
 8000a5c:	4b72      	ldr	r3, [pc, #456]	@ (8000c28 <main+0x35c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11c      	bne.n	8000a9e <main+0x1d2>
		{
			stateSwitch ^= 1;
 8000a64:	4b71      	ldr	r3, [pc, #452]	@ (8000c2c <main+0x360>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4053      	eors	r3, r2
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c2c <main+0x360>)
 8000a70:	701a      	strb	r2, [r3, #0]

			if(stateSwitch)
 8000a72:	4b6e      	ldr	r3, [pc, #440]	@ (8000c2c <main+0x360>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <main+0x1ba>
			{
				PowerOn ();
 8000a7a:	f7ff feab 	bl	80007d4 <PowerOn>
				cntPwrOff = 0;
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	@ (8000c30 <main+0x364>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e001      	b.n	8000a8a <main+0x1be>
				//HAL_Delay(CYCLES_TIME_ON  * 1000);
			}
			else
			{
				PowerOff ();
 8000a86:	f7ff fecb 	bl	8000820 <PowerOff>

				//HAL_Delay(CYCLES_TIME_OFF  * 1000);
			}
			leaveSwitch = 1;
 8000a8a:	4b67      	ldr	r3, [pc, #412]	@ (8000c28 <main+0x35c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e005      	b.n	8000a9e <main+0x1d2>
		 }
	  }
	  else
	  {
		counterSwitch = 0;
 8000a92:	4b63      	ldr	r3, [pc, #396]	@ (8000c20 <main+0x354>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
		leaveSwitch   = 0;
 8000a98:	4b63      	ldr	r3, [pc, #396]	@ (8000c28 <main+0x35c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	  }

	if(get_cmd)
 8000a9e:	4b65      	ldr	r3, [pc, #404]	@ (8000c34 <main+0x368>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d100      	bne.n	8000aa8 <main+0x1dc>
 8000aa6:	e083      	b.n	8000bb0 <main+0x2e4>
	{
		switch(get_cmd)
 8000aa8:	4b62      	ldr	r3, [pc, #392]	@ (8000c34 <main+0x368>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b05      	cmp	r3, #5
 8000aae:	d900      	bls.n	8000ab2 <main+0x1e6>
 8000ab0:	e07b      	b.n	8000baa <main+0x2de>
 8000ab2:	009a      	lsls	r2, r3, #2
 8000ab4:	4b60      	ldr	r3, [pc, #384]	@ (8000c38 <main+0x36c>)
 8000ab6:	18d3      	adds	r3, r2, r3
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	469f      	mov	pc, r3
		{

			case 1:
				if(power_state)
 8000abc:	4b5f      	ldr	r3, [pc, #380]	@ (8000c3c <main+0x370>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d016      	beq.n	8000af2 <main+0x226>
				{
					if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000ac4:	4b54      	ldr	r3, [pc, #336]	@ (8000c18 <main+0x34c>)
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff fd95 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d104      	bne.n	8000adc <main+0x210>
					{
						Send_RS485_Data("power_off:-1;");
 8000ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8000c40 <main+0x374>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fec9 	bl	800086c <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("power_off:1;");
				}
			break;
 8000ada:	e066      	b.n	8000baa <main+0x2de>
						Send_RS485_Data("power_off:0;");
 8000adc:	4b59      	ldr	r3, [pc, #356]	@ (8000c44 <main+0x378>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fec4 	bl	800086c <Send_RS485_Data>
						HAL_Delay(30000);
 8000ae4:	4b58      	ldr	r3, [pc, #352]	@ (8000c48 <main+0x37c>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fc20 	bl	800132c <HAL_Delay>
						PowerOff ();
 8000aec:	f7ff fe98 	bl	8000820 <PowerOff>
			break;
 8000af0:	e05b      	b.n	8000baa <main+0x2de>
					Send_RS485_Data("power_off:1;");
 8000af2:	4b56      	ldr	r3, [pc, #344]	@ (8000c4c <main+0x380>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff feb9 	bl	800086c <Send_RS485_Data>
			break;
 8000afa:	e056      	b.n	8000baa <main+0x2de>
			case 2:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000afc:	4b46      	ldr	r3, [pc, #280]	@ (8000c18 <main+0x34c>)
 8000afe:	2104      	movs	r1, #4
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fd79 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d104      	bne.n	8000b14 <main+0x248>
				{
					Send_RS485_Data("bus:1;");
 8000b0a:	4b51      	ldr	r3, [pc, #324]	@ (8000c50 <main+0x384>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fead 	bl	800086c <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("bus:0;");
				}
			break;
 8000b12:	e04a      	b.n	8000baa <main+0x2de>
					Send_RS485_Data("bus:0;");
 8000b14:	4b4f      	ldr	r3, [pc, #316]	@ (8000c54 <main+0x388>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fea8 	bl	800086c <Send_RS485_Data>
			break;
 8000b1c:	e045      	b.n	8000baa <main+0x2de>
			case 3:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c18 <main+0x34c>)
 8000b20:	2104      	movs	r1, #4
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fd68 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d104      	bne.n	8000b36 <main+0x26a>
				{
					Send_RS485_Data("reboot:-1;");
 8000b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c58 <main+0x38c>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fe9c 	bl	800086c <Send_RS485_Data>
						reboot_time = HAL_GetTick();
						cnt_reboot ++;
						Send_RS485_Data("reboot:1;");
					}
				}
			break;
 8000b34:	e039      	b.n	8000baa <main+0x2de>
					if(reboot_flag)
 8000b36:	4b49      	ldr	r3, [pc, #292]	@ (8000c5c <main+0x390>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d004      	beq.n	8000b48 <main+0x27c>
					    Send_RS485_Data("reboot:2;");
 8000b3e:	4b48      	ldr	r3, [pc, #288]	@ (8000c60 <main+0x394>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fe93 	bl	800086c <Send_RS485_Data>
			break;
 8000b46:	e030      	b.n	8000baa <main+0x2de>
						reboot_flag = 1;
 8000b48:	4b44      	ldr	r3, [pc, #272]	@ (8000c5c <main+0x390>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
						reboot_state_off = 1;
 8000b4e:	4b45      	ldr	r3, [pc, #276]	@ (8000c64 <main+0x398>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
						reboot_time = HAL_GetTick();
 8000b54:	f000 fbe0 	bl	8001318 <HAL_GetTick>
 8000b58:	0002      	movs	r2, r0
 8000b5a:	4b43      	ldr	r3, [pc, #268]	@ (8000c68 <main+0x39c>)
 8000b5c:	601a      	str	r2, [r3, #0]
						cnt_reboot ++;
 8000b5e:	4b43      	ldr	r3, [pc, #268]	@ (8000c6c <main+0x3a0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	4b41      	ldr	r3, [pc, #260]	@ (8000c6c <main+0x3a0>)
 8000b66:	601a      	str	r2, [r3, #0]
						Send_RS485_Data("reboot:1;");
 8000b68:	4b41      	ldr	r3, [pc, #260]	@ (8000c70 <main+0x3a4>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fe7e 	bl	800086c <Send_RS485_Data>
			break;
 8000b70:	e01b      	b.n	8000baa <main+0x2de>
			case 4:
				Send_RS485_Data("power_on:1;");
 8000b72:	4b40      	ldr	r3, [pc, #256]	@ (8000c74 <main+0x3a8>)
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff fe79 	bl	800086c <Send_RS485_Data>
				PowerOn ();
 8000b7a:	f7ff fe2b 	bl	80007d4 <PowerOn>
			break;
 8000b7e:	e014      	b.n	8000baa <main+0x2de>
			case 5:
				char tempBuff[32] = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	3304      	adds	r3, #4
 8000b88:	221c      	movs	r2, #28
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f003 f8e9 	bl	8003d64 <memset>
				sprintf(tempBuff, "count:%d;", cnt_reboot);
 8000b92:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <main+0x3a0>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4938      	ldr	r1, [pc, #224]	@ (8000c78 <main+0x3ac>)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f003 f8c2 	bl	8003d24 <siprintf>
				Send_RS485_Data(tempBuff);
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fe62 	bl	800086c <Send_RS485_Data>
			break;
 8000ba8:	46c0      	nop			@ (mov r8, r8)

		}
		get_cmd = 0;
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <main+0x368>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
     }

	if(reboot_flag)
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <main+0x390>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d100      	bne.n	8000bba <main+0x2ee>
 8000bb8:	e706      	b.n	80009c8 <main+0xfc>
	{
	   if(reboot_state_off)
 8000bba:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <main+0x398>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d015      	beq.n	8000bee <main+0x322>
	   {
		   if(HAL_GetTick() > reboot_time + TIME_POWER_OFF)
 8000bc2:	f000 fba9 	bl	8001318 <HAL_GetTick>
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <main+0x39c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	491e      	ldr	r1, [pc, #120]	@ (8000c48 <main+0x37c>)
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4463      	add	r3, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d800      	bhi.n	8000bd8 <main+0x30c>
 8000bd6:	e6f7      	b.n	80009c8 <main+0xfc>
		   {
			   reboot_state_off = 0;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <main+0x398>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			   PowerOff ();
 8000bde:	f7ff fe1f 	bl	8000820 <PowerOff>
			   reboot_time = HAL_GetTick();
 8000be2:	f000 fb99 	bl	8001318 <HAL_GetTick>
 8000be6:	0002      	movs	r2, r0
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <main+0x39c>)
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e6ec      	b.n	80009c8 <main+0xfc>
		   }
	   }
	   else
	   {
		   if(HAL_GetTick() > reboot_time + TIME_POWER_ON)
 8000bee:	f000 fb93 	bl	8001318 <HAL_GetTick>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <main+0x39c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4920      	ldr	r1, [pc, #128]	@ (8000c7c <main+0x3b0>)
 8000bfa:	468c      	mov	ip, r1
 8000bfc:	4463      	add	r3, ip
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d800      	bhi.n	8000c04 <main+0x338>
 8000c02:	e6e1      	b.n	80009c8 <main+0xfc>
		   {
			   PowerOn ();
 8000c04:	f7ff fde6 	bl	80007d4 <PowerOn>
			   reboot_flag = 0;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <main+0x390>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 8000c0e:	e6db      	b.n	80009c8 <main+0xfc>
 8000c10:	20000155 	.word	0x20000155
 8000c14:	200000ac 	.word	0x200000ac
 8000c18:	50000400 	.word	0x50000400
 8000c1c:	2000014c 	.word	0x2000014c
 8000c20:	20000140 	.word	0x20000140
 8000c24:	50000800 	.word	0x50000800
 8000c28:	20000145 	.word	0x20000145
 8000c2c:	20000144 	.word	0x20000144
 8000c30:	20000154 	.word	0x20000154
 8000c34:	20000258 	.word	0x20000258
 8000c38:	08004720 	.word	0x08004720
 8000c3c:	20000264 	.word	0x20000264
 8000c40:	080046a4 	.word	0x080046a4
 8000c44:	080046b4 	.word	0x080046b4
 8000c48:	00007530 	.word	0x00007530
 8000c4c:	080046c4 	.word	0x080046c4
 8000c50:	080046d4 	.word	0x080046d4
 8000c54:	080046dc 	.word	0x080046dc
 8000c58:	080046e4 	.word	0x080046e4
 8000c5c:	20000265 	.word	0x20000265
 8000c60:	080046f0 	.word	0x080046f0
 8000c64:	20000266 	.word	0x20000266
 8000c68:	20000268 	.word	0x20000268
 8000c6c:	2000025c 	.word	0x2000025c
 8000c70:	080046fc 	.word	0x080046fc
 8000c74:	08004708 	.word	0x08004708
 8000c78:	08004714 	.word	0x08004714
 8000c7c:	00002710 	.word	0x00002710

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff fc97 	bl	80005b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	f7ff fca8 	bl	80005e0 <LL_FLASH_GetLatency>
 8000c90:	0003      	movs	r3, r0
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d1fa      	bne.n	8000c8c <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000c96:	f7ff fbbb 	bl	8000410 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	f7ff fbc6 	bl	800042c <LL_RCC_HSI_IsReady>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d1fa      	bne.n	8000c9c <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000ca6:	2380      	movs	r3, #128	@ 0x80
 8000ca8:	059b      	lsls	r3, r3, #22
 8000caa:	2208      	movs	r2, #8
 8000cac:	2100      	movs	r1, #0
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fc3e 	bl	8000530 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cb4:	f7ff fc1a 	bl	80004ec <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000cb8:	f7ff fc5a 	bl	8000570 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	f7ff fc23 	bl	8000508 <LL_RCC_PLL_IsReady>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d1fa      	bne.n	8000cbe <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fbe3 	bl	8000494 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff fbc0 	bl	8000454 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	f7ff fbd1 	bl	800047c <LL_RCC_GetSysClkSource>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	2b10      	cmp	r3, #16
 8000cde:	d1fa      	bne.n	8000cd6 <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fbed 	bl	80004c0 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <SystemClock_Config+0x84>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f003 f80d 	bl	8003d08 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f000 fab6 	bl	8001260 <HAL_InitTick>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 f968 	bl	8000fcc <Error_Handler>
  }
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	03d09000 	.word	0x03d09000

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d0e:	4a24      	ldr	r2, [pc, #144]	@ (8000da0 <MX_USART2_UART_Init+0x98>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d12:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d14:	22e1      	movs	r2, #225	@ 0xe1
 8000d16:	0252      	lsls	r2, r2, #9
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 feca 	bl	8001aec <HAL_UART_Init>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f000 f936 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 fddb 	bl	8003920 <HAL_UARTEx_SetTxFifoThreshold>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6e:	f000 f92d 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d74:	2100      	movs	r1, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 fe12 	bl	80039a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d80:	f000 f924 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <MX_USART2_UART_Init+0x94>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 fd90 	bl	80038ac <HAL_UARTEx_DisableFifoMode>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f000 f91c 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	200000ac 	.word	0x200000ac
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	003b      	movs	r3, r7
 8000dac:	0018      	movs	r0, r3
 8000dae:	2318      	movs	r3, #24
 8000db0:	001a      	movs	r2, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	f002 ffd6 	bl	8003d64 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000db8:	2004      	movs	r0, #4
 8000dba:	f7ff fbe7 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000dbe:	2020      	movs	r0, #32
 8000dc0:	f7ff fbe4 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fbe1 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f7ff fbde 	bl	800058c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000dd0:	23a0      	movs	r3, #160	@ 0xa0
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fc2d 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4a78      	ldr	r2, [pc, #480]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000de2:	0019      	movs	r1, r3
 8000de4:	0010      	movs	r0, r2
 8000de6:	f7ff fc26 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4a75      	ldr	r2, [pc, #468]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000df0:	0019      	movs	r1, r3
 8000df2:	0010      	movs	r0, r2
 8000df4:	f7ff fc1f 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	019b      	lsls	r3, r3, #6
 8000dfc:	4a71      	ldr	r2, [pc, #452]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f7ff fc18 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000e06:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000e08:	2180      	movs	r1, #128	@ 0x80
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fc13 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4a6b      	ldr	r2, [pc, #428]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	f7ff fc0c 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4a68      	ldr	r2, [pc, #416]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000e24:	0019      	movs	r1, r3
 8000e26:	0010      	movs	r0, r2
 8000e28:	f7ff fc05 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2280      	movs	r2, #128	@ 0x80
 8000e30:	0192      	lsls	r2, r2, #6
 8000e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000e40:	003b      	movs	r3, r7
 8000e42:	4a61      	ldr	r2, [pc, #388]	@ (8000fc8 <MX_GPIO_Init+0x224>)
 8000e44:	0019      	movs	r1, r3
 8000e46:	0010      	movs	r0, r2
 8000e48:	f002 ff03 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DE2_Pin;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2202      	movs	r2, #2
 8000e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2201      	movs	r2, #1
 8000e56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DE2_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	003a      	movs	r2, r7
 8000e6c:	23a0      	movs	r3, #160	@ 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 feed 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RD_EN_Pin;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RD_EN_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000e8e:	0019      	movs	r1, r3
 8000e90:	0010      	movs	r0, r2
 8000e92:	f002 fede 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PRECHRG_Pin;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	00d2      	lsls	r2, r2, #3
 8000e9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(PRECHRG_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	4a42      	ldr	r2, [pc, #264]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000eba:	0019      	movs	r1, r3
 8000ebc:	0010      	movs	r0, r2
 8000ebe:	f002 fec8 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MAINS_REL_Pin;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2201      	movs	r2, #1
 8000ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MAINS_REL_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	4a37      	ldr	r2, [pc, #220]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	0010      	movs	r0, r2
 8000eea:	f002 feb2 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CMP_400V_Pin;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2280      	movs	r2, #128	@ 0x80
 8000ef2:	0152      	lsls	r2, r2, #5
 8000ef4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2202      	movs	r2, #2
 8000f00:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CMP_400V_GPIO_Port, &GPIO_InitStruct);
 8000f02:	003b      	movs	r3, r7
 8000f04:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f002 fea2 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SET_SERIAL_Pin;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2280      	movs	r2, #128	@ 0x80
 8000f12:	0192      	lsls	r2, r2, #6
 8000f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SET_SERIAL_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	003b      	movs	r3, r7
 8000f30:	4a24      	ldr	r2, [pc, #144]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000f32:	0019      	movs	r1, r3
 8000f34:	0010      	movs	r0, r2
 8000f36:	f002 fe8c 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2201      	movs	r2, #1
 8000f44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f46:	003b      	movs	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4c:	003b      	movs	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f52:	003b      	movs	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000f58:	003b      	movs	r3, r7
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	0010      	movs	r0, r2
 8000f60:	f002 fe77 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000f64:	003b      	movs	r3, r7
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	0052      	lsls	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f72:	003b      	movs	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f78:	003b      	movs	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f7e:	003b      	movs	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000f84:	003b      	movs	r3, r7
 8000f86:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000f88:	0019      	movs	r1, r3
 8000f8a:	0010      	movs	r0, r2
 8000f8c:	f002 fe61 	bl	8003c52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	003b      	movs	r3, r7
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <MX_GPIO_Init+0x220>)
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	f002 fe4b 	bl	8003c52 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b006      	add	sp, #24
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	50000400 	.word	0x50000400
 8000fc8:	50000800 	.word	0x50000800

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	e7fd      	b.n	8000fd4 <Error_Handler+0x8>

08000fd8 <LL_RCC_SetUSARTClockSource>:
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	0c12      	lsrs	r2, r2, #16
 8000fe8:	43d2      	mvns	r2, r2
 8000fea:	401a      	ands	r2, r3
 8000fec:	0011      	movs	r1, r2
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	0c1a      	lsrs	r2, r3, #16
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_MspInit+0x44>)
 8001010:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_MspInit+0x44>)
 8001014:	2101      	movs	r1, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	641a      	str	r2, [r3, #64]	@ 0x40
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_MspInit+0x44>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	2201      	movs	r2, #1
 8001020:	4013      	ands	r3, r2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <HAL_MspInit+0x44>)
 8001028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_MspInit+0x44>)
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	0549      	lsls	r1, r1, #21
 8001030:	430a      	orrs	r2, r1
 8001032:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_MspInit+0x44>)
 8001036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	055b      	lsls	r3, r3, #21
 800103c:	4013      	ands	r3, r2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	@ 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	2414      	movs	r4, #20
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f002 fe7e 	bl	8003d64 <memset>
  if(huart->Instance==USART2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a22      	ldr	r2, [pc, #136]	@ (80010f8 <HAL_UART_MspInit+0xa8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d13d      	bne.n	80010ee <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001072:	23c0      	movs	r3, #192	@ 0xc0
 8001074:	031b      	lsls	r3, r3, #12
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff ffae 	bl	8000fd8 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <HAL_UART_MspInit+0xac>)
 800107e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <HAL_UART_MspInit+0xac>)
 8001082:	2180      	movs	r1, #128	@ 0x80
 8001084:	0289      	lsls	r1, r1, #10
 8001086:	430a      	orrs	r2, r1
 8001088:	63da      	str	r2, [r3, #60]	@ 0x3c
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_UART_MspInit+0xac>)
 800108c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <HAL_UART_MspInit+0xac>)
 800109a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_UART_MspInit+0xac>)
 800109e:	2101      	movs	r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_UART_MspInit+0xac>)
 80010a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a8:	2201      	movs	r2, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010b0:	0021      	movs	r1, r4
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	220c      	movs	r2, #12
 80010b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2202      	movs	r2, #2
 80010bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2201      	movs	r2, #1
 80010ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	187a      	adds	r2, r7, r1
 80010d2:	23a0      	movs	r3, #160	@ 0xa0
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 faf5 	bl	80016c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	201c      	movs	r0, #28
 80010e4:	f000 f9f2 	bl	80014cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e8:	201c      	movs	r0, #28
 80010ea:	f000 fa04 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b00b      	add	sp, #44	@ 0x2c
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	40004400 	.word	0x40004400
 80010fc:	40021000 	.word	0x40021000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	e7fd      	b.n	8001104 <NMI_Handler+0x4>

08001108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110c:	46c0      	nop			@ (mov r8, r8)
 800110e:	e7fd      	b.n	800110c <HardFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001114:	46c0      	nop			@ (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  LED_GreenHandler ();
 8001128:	f7ff fac2 	bl	80006b0 <LED_GreenHandler>
  SwitchTimingHandlar();
 800112c:	f7ff faa6 	bl	800067c <SwitchTimingHandlar>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8e0 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <USART2_IRQHandler+0x14>)
 8001142:	0018      	movs	r0, r3
 8001144:	f000 fe24 	bl	8001d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	200000ac 	.word	0x200000ac

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	18d3      	adds	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f002 fe0c 	bl	8003da0 <__errno>
 8001188:	0003      	movs	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	2301      	movs	r3, #1
 8001190:	425b      	negs	r3, r3
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	18d2      	adds	r2, r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <_sbrk+0x64>)
 80011a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b006      	add	sp, #24
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20009000 	.word	0x20009000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	2000026c 	.word	0x2000026c
 80011bc:	200003c0 	.word	0x200003c0

080011c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011cc:	480d      	ldr	r0, [pc, #52]	@ (8001204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d0:	f7ff fff6 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	@ (800120c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <LoopForever+0xe>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001218 <LoopForever+0x16>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011fa:	f002 fdd7 	bl	8003dac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011fe:	f7ff fb65 	bl	80008cc <main>

08001202 <LoopForever>:

LoopForever:
  b LoopForever
 8001202:	e7fe      	b.n	8001202 <LoopForever>
  ldr   r0, =_estack
 8001204:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001210:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 8001214:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001218:	200003bc 	.word	0x200003bc

0800121c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_IRQHandler>
	...

08001220 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_Init+0x3c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_Init+0x3c>)
 8001232:	2180      	movs	r1, #128	@ 0x80
 8001234:	0049      	lsls	r1, r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123a:	2003      	movs	r0, #3
 800123c:	f000 f810 	bl	8001260 <HAL_InitTick>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d003      	beq.n	800124c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	e001      	b.n	8001250 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fedc 	bl	8001008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_InitTick+0x88>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d02b      	beq.n	80012d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001278:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <HAL_InitTick+0x8c>)
 800127a:	681c      	ldr	r4, [r3, #0]
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_InitTick+0x88>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	0019      	movs	r1, r3
 8001282:	23fa      	movs	r3, #250	@ 0xfa
 8001284:	0098      	lsls	r0, r3, #2
 8001286:	f7fe ff4d 	bl	8000124 <__udivsi3>
 800128a:	0003      	movs	r3, r0
 800128c:	0019      	movs	r1, r3
 800128e:	0020      	movs	r0, r4
 8001290:	f7fe ff48 	bl	8000124 <__udivsi3>
 8001294:	0003      	movs	r3, r0
 8001296:	0018      	movs	r0, r3
 8001298:	f000 f93d 	bl	8001516 <HAL_SYSTICK_Config>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d112      	bne.n	80012c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d80a      	bhi.n	80012bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2301      	movs	r3, #1
 80012aa:	425b      	negs	r3, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 f90c 	bl	80014cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_InitTick+0x90>)
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e00d      	b.n	80012d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e008      	b.n	80012d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c6:	230f      	movs	r3, #15
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e003      	b.n	80012d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012d8:	230f      	movs	r3, #15
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	781b      	ldrb	r3, [r3, #0]
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b005      	add	sp, #20
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	2000003c 	.word	0x2000003c
 80012ec:	20000034 	.word	0x20000034
 80012f0:	20000038 	.word	0x20000038

080012f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_IncTick+0x1c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	001a      	movs	r2, r3
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_IncTick+0x20>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	18d2      	adds	r2, r2, r3
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <HAL_IncTick+0x20>)
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	2000003c 	.word	0x2000003c
 8001314:	20000270 	.word	0x20000270

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b02      	ldr	r3, [pc, #8]	@ (8001328 <HAL_GetTick+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	20000270 	.word	0x20000270

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff fff0 	bl	8001318 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	001a      	movs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	189b      	adds	r3, r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	f7ff ffe0 	bl	8001318 <HAL_GetTick>
 8001358:	0002      	movs	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b004      	add	sp, #16
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	2000003c 	.word	0x2000003c

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b7f      	cmp	r3, #127	@ 0x7f
 8001386:	d809      	bhi.n	800139c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	001a      	movs	r2, r3
 800138e:	231f      	movs	r3, #31
 8001390:	401a      	ands	r2, r3
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_EnableIRQ+0x30>)
 8001394:	2101      	movs	r1, #1
 8001396:	4091      	lsls	r1, r2
 8001398:	000a      	movs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	0002      	movs	r2, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80013bc:	d828      	bhi.n	8001410 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013be:	4a2f      	ldr	r2, [pc, #188]	@ (800147c <__NVIC_SetPriority+0xd4>)
 80013c0:	1dfb      	adds	r3, r7, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	33c0      	adds	r3, #192	@ 0xc0
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	589b      	ldr	r3, [r3, r2]
 80013ce:	1dfa      	adds	r2, r7, #7
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	0011      	movs	r1, r2
 80013d4:	2203      	movs	r2, #3
 80013d6:	400a      	ands	r2, r1
 80013d8:	00d2      	lsls	r2, r2, #3
 80013da:	21ff      	movs	r1, #255	@ 0xff
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	43d2      	mvns	r2, r2
 80013e2:	401a      	ands	r2, r3
 80013e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	019b      	lsls	r3, r3, #6
 80013ea:	22ff      	movs	r2, #255	@ 0xff
 80013ec:	401a      	ands	r2, r3
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0018      	movs	r0, r3
 80013f4:	2303      	movs	r3, #3
 80013f6:	4003      	ands	r3, r0
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013fc:	481f      	ldr	r0, [pc, #124]	@ (800147c <__NVIC_SetPriority+0xd4>)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	430a      	orrs	r2, r1
 8001408:	33c0      	adds	r3, #192	@ 0xc0
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140e:	e031      	b.n	8001474 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001410:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <__NVIC_SetPriority+0xd8>)
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0019      	movs	r1, r3
 8001418:	230f      	movs	r3, #15
 800141a:	400b      	ands	r3, r1
 800141c:	3b08      	subs	r3, #8
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3306      	adds	r3, #6
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1dfa      	adds	r2, r7, #7
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	0011      	movs	r1, r2
 8001430:	2203      	movs	r2, #3
 8001432:	400a      	ands	r2, r1
 8001434:	00d2      	lsls	r2, r2, #3
 8001436:	21ff      	movs	r1, #255	@ 0xff
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	43d2      	mvns	r2, r2
 800143e:	401a      	ands	r2, r3
 8001440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	019b      	lsls	r3, r3, #6
 8001446:	22ff      	movs	r2, #255	@ 0xff
 8001448:	401a      	ands	r2, r3
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	0018      	movs	r0, r3
 8001450:	2303      	movs	r3, #3
 8001452:	4003      	ands	r3, r0
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001458:	4809      	ldr	r0, [pc, #36]	@ (8001480 <__NVIC_SetPriority+0xd8>)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	001c      	movs	r4, r3
 8001460:	230f      	movs	r3, #15
 8001462:	4023      	ands	r3, r4
 8001464:	3b08      	subs	r3, #8
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	430a      	orrs	r2, r1
 800146a:	3306      	adds	r3, #6
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	18c3      	adds	r3, r0, r3
 8001470:	3304      	adds	r3, #4
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b003      	add	sp, #12
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	045b      	lsls	r3, r3, #17
 8001494:	429a      	cmp	r2, r3
 8001496:	d301      	bcc.n	800149c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001498:	2301      	movs	r3, #1
 800149a:	e010      	b.n	80014be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149c:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <SysTick_Config+0x44>)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	3a01      	subs	r2, #1
 80014a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a4:	2301      	movs	r3, #1
 80014a6:	425b      	negs	r3, r3
 80014a8:	2103      	movs	r1, #3
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff ff7c 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <SysTick_Config+0x44>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <SysTick_Config+0x44>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	210f      	movs	r1, #15
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	1c02      	adds	r2, r0, #0
 80014dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	0002      	movs	r2, r0
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff33 	bl	8001374 <__NVIC_EnableIRQ>
}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ffaf 	bl	8001484 <SysTick_Config>
 8001526:	0003      	movs	r3, r0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e050      	b.n	80015e4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2225      	movs	r2, #37	@ 0x25
 8001546:	5c9b      	ldrb	r3, [r3, r2]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d008      	beq.n	8001560 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2204      	movs	r2, #4
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2224      	movs	r2, #36	@ 0x24
 8001558:	2100      	movs	r1, #0
 800155a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e041      	b.n	80015e4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	210e      	movs	r1, #14
 800156c:	438a      	bics	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	491c      	ldr	r1, [pc, #112]	@ (80015ec <HAL_DMA_Abort+0xbc>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_DMA_Abort+0xc0>)
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	221c      	movs	r2, #28
 800159a:	4013      	ands	r3, r2
 800159c:	2201      	movs	r2, #1
 800159e:	409a      	lsls	r2, r3
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <HAL_DMA_Abort+0xc0>)
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00c      	beq.n	80015d2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	490a      	ldr	r1, [pc, #40]	@ (80015ec <HAL_DMA_Abort+0xbc>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2225      	movs	r2, #37	@ 0x25
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2224      	movs	r2, #36	@ 0x24
 80015de:	2100      	movs	r1, #0
 80015e0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	fffffeff 	.word	0xfffffeff
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fc:	210f      	movs	r1, #15
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2225      	movs	r2, #37	@ 0x25
 8001608:	5c9b      	ldrb	r3, [r3, r2]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d006      	beq.n	800161e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2204      	movs	r2, #4
 8001614:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e049      	b.n	80016b2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	210e      	movs	r1, #14
 800162a:	438a      	bics	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001648:	491d      	ldr	r1, [pc, #116]	@ (80016c0 <HAL_DMA_Abort_IT+0xcc>)
 800164a:	400a      	ands	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_DMA_Abort_IT+0xd0>)
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	221c      	movs	r2, #28
 8001658:	4013      	ands	r3, r2
 800165a:	2201      	movs	r2, #1
 800165c:	409a      	lsls	r2, r3
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_DMA_Abort_IT+0xd0>)
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800166c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001680:	490f      	ldr	r1, [pc, #60]	@ (80016c0 <HAL_DMA_Abort_IT+0xcc>)
 8001682:	400a      	ands	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800168e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2225      	movs	r2, #37	@ 0x25
 8001694:	2101      	movs	r1, #1
 8001696:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	@ 0x24
 800169c:	2100      	movs	r1, #0
 800169e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	0010      	movs	r0, r2
 80016b0:	4798      	blx	r3
    }
  }
  return status;
 80016b2:	230f      	movs	r3, #15
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	781b      	ldrb	r3, [r3, #0]
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b004      	add	sp, #16
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	fffffeff 	.word	0xfffffeff
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e147      	b.n	8001968 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <HAL_GPIO_Init+0x28>
 80016ee:	e138      	b.n	8001962 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	4013      	ands	r3, r2
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	43da      	mvns	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	2201      	movs	r2, #1
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	2b03      	cmp	r3, #3
 8001774:	d017      	beq.n	80017a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2203      	movs	r2, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	58d3      	ldr	r3, [r2, r3]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2207      	movs	r2, #7
 80017c4:	4013      	ands	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2107      	movs	r1, #7
 80017de:	400b      	ands	r3, r1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	6939      	ldr	r1, [r7, #16]
 80017f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	401a      	ands	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	23c0      	movs	r3, #192	@ 0xc0
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d100      	bne.n	800183c <HAL_GPIO_Init+0x174>
 800183a:	e092      	b.n	8001962 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800183c:	4a50      	ldr	r2, [pc, #320]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3318      	adds	r3, #24
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	589b      	ldr	r3, [r3, r2]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	220f      	movs	r2, #15
 8001854:	409a      	lsls	r2, r3
 8001856:	0013      	movs	r3, r2
 8001858:	43da      	mvns	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	23a0      	movs	r3, #160	@ 0xa0
 8001864:	05db      	lsls	r3, r3, #23
 8001866:	429a      	cmp	r2, r3
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x1ca>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a45      	ldr	r2, [pc, #276]	@ (8001984 <HAL_GPIO_Init+0x2bc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x1c6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a44      	ldr	r2, [pc, #272]	@ (8001988 <HAL_GPIO_Init+0x2c0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x1c2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a43      	ldr	r2, [pc, #268]	@ (800198c <HAL_GPIO_Init+0x2c4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x1be>
 8001882:	2303      	movs	r3, #3
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 8001886:	2305      	movs	r3, #5
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x1cc>
 8001892:	2300      	movs	r3, #0
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	2103      	movs	r1, #3
 8001898:	400a      	ands	r2, r1
 800189a:	00d2      	lsls	r2, r2, #3
 800189c:	4093      	lsls	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018a4:	4936      	ldr	r1, [pc, #216]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3318      	adds	r3, #24
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b2:	4b33      	ldr	r3, [pc, #204]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	035b      	lsls	r3, r3, #13
 80018ca:	4013      	ands	r3, r2
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018dc:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43da      	mvns	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	039b      	lsls	r3, r3, #14
 80018f4:	4013      	ands	r3, r2
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001900:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001906:	4a1e      	ldr	r2, [pc, #120]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 8001908:	2384      	movs	r3, #132	@ 0x84
 800190a:	58d3      	ldr	r3, [r2, r3]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43da      	mvns	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	029b      	lsls	r3, r3, #10
 8001920:	4013      	ands	r3, r2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800192c:	4914      	ldr	r1, [pc, #80]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 800192e:	2284      	movs	r2, #132	@ 0x84
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	58d3      	ldr	r3, [r2, r3]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	4013      	ands	r3, r2
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800195a:	4909      	ldr	r1, [pc, #36]	@ (8001980 <HAL_GPIO_Init+0x2b8>)
 800195c:	2280      	movs	r2, #128	@ 0x80
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	40da      	lsrs	r2, r3
 8001970:	1e13      	subs	r3, r2, #0
 8001972:	d000      	beq.n	8001976 <HAL_GPIO_Init+0x2ae>
 8001974:	e6b0      	b.n	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46c0      	nop			@ (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b006      	add	sp, #24
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021800 	.word	0x40021800
 8001984:	50000400 	.word	0x50000400
 8001988:	50000800 	.word	0x50000800
 800198c:	50000c00 	.word	0x50000c00

08001990 <LL_RCC_GetAPB1Prescaler>:
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	23e0      	movs	r3, #224	@ 0xe0
 800199a:	01db      	lsls	r3, r3, #7
 800199c:	4013      	ands	r3, r2
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2238      	movs	r2, #56	@ 0x38
 80019b4:	4013      	ands	r3, r2
 80019b6:	d10f      	bne.n	80019d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019b8:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0adb      	lsrs	r3, r3, #11
 80019be:	2207      	movs	r2, #7
 80019c0:	4013      	ands	r3, r2
 80019c2:	2201      	movs	r2, #1
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	4835      	ldr	r0, [pc, #212]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019ce:	f7fe fba9 	bl	8000124 <__udivsi3>
 80019d2:	0003      	movs	r3, r0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e05d      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d8:	4b31      	ldr	r3, [pc, #196]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2238      	movs	r2, #56	@ 0x38
 80019de:	4013      	ands	r3, r2
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e4:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e054      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ea:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2238      	movs	r2, #56	@ 0x38
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d138      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019f6:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2203      	movs	r2, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a00:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	2207      	movs	r2, #7
 8001a08:	4013      	ands	r3, r2
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	4824      	ldr	r0, [pc, #144]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a18:	f7fe fb84 	bl	8000124 <__udivsi3>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	0019      	movs	r1, r3
 8001a20:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	227f      	movs	r2, #127	@ 0x7f
 8001a28:	4013      	ands	r3, r2
 8001a2a:	434b      	muls	r3, r1
 8001a2c:	617b      	str	r3, [r7, #20]
        break;
 8001a2e:	e00d      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	481c      	ldr	r0, [pc, #112]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a34:	f7fe fb76 	bl	8000124 <__udivsi3>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	227f      	movs	r2, #127	@ 0x7f
 8001a44:	4013      	ands	r3, r2
 8001a46:	434b      	muls	r3, r1
 8001a48:	617b      	str	r3, [r7, #20]
        break;
 8001a4a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a4c:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0f5b      	lsrs	r3, r3, #29
 8001a52:	2207      	movs	r2, #7
 8001a54:	4013      	ands	r3, r2
 8001a56:	3301      	adds	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7fe fb61 	bl	8000124 <__udivsi3>
 8001a62:	0003      	movs	r3, r0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	e015      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a68:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2238      	movs	r2, #56	@ 0x38
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d103      	bne.n	8001a7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a74:	2380      	movs	r3, #128	@ 0x80
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2238      	movs	r2, #56	@ 0x38
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b18      	cmp	r3, #24
 8001a86:	d103      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a88:	23fa      	movs	r3, #250	@ 0xfa
 8001a8a:	01db      	lsls	r3, r3, #7
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	e001      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a94:	693b      	ldr	r3, [r7, #16]
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b006      	add	sp, #24
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	@ (8001abc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	20000034 	.word	0x20000034

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ac4:	f7ff fff2 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001ac8:	0004      	movs	r4, r0
 8001aca:	f7ff ff61 	bl	8001990 <LL_RCC_GetAPB1Prescaler>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	0b1a      	lsrs	r2, r3, #12
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	58d3      	ldr	r3, [r2, r3]
 8001ad8:	221f      	movs	r2, #31
 8001ada:	4013      	ands	r3, r2
 8001adc:	40dc      	lsrs	r4, r3
 8001ade:	0023      	movs	r3, r4
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	08004738 	.word	0x08004738

08001aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e046      	b.n	8001b8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2288      	movs	r2, #136	@ 0x88
 8001b02:	589b      	ldr	r3, [r3, r2]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2284      	movs	r2, #132	@ 0x84
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff fa9c 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2288      	movs	r2, #136	@ 0x88
 8001b1c:	2124      	movs	r1, #36	@ 0x24
 8001b1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fe0e 	bl	800275c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 fc66 	bl	8002414 <UART_SetConfig>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e01c      	b.n	8001b8c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	490d      	ldr	r1, [pc, #52]	@ (8001b94 <HAL_UART_Init+0xa8>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	212a      	movs	r1, #42	@ 0x2a
 8001b6e:	438a      	bics	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 fe9d 	bl	80028c4 <UART_CheckIdleState>
 8001b8a:	0003      	movs	r3, r0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	ffffb7ff 	.word	0xffffb7ff

08001b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	1dbb      	adds	r3, r7, #6
 8001ba6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2288      	movs	r2, #136	@ 0x88
 8001bac:	589b      	ldr	r3, [r3, r2]
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d000      	beq.n	8001bb4 <HAL_UART_Transmit+0x1c>
 8001bb2:	e090      	b.n	8001cd6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_UART_Transmit+0x2a>
 8001bba:	1dbb      	adds	r3, r7, #6
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e088      	b.n	8001cd8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	015b      	lsls	r3, r3, #5
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d109      	bne.n	8001be6 <HAL_UART_Transmit+0x4e>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	d001      	beq.n	8001be6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e078      	b.n	8001cd8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2290      	movs	r2, #144	@ 0x90
 8001bea:	2100      	movs	r1, #0
 8001bec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2288      	movs	r2, #136	@ 0x88
 8001bf2:	2121      	movs	r1, #33	@ 0x21
 8001bf4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bf6:	f7ff fb8f 	bl	8001318 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1dba      	adds	r2, r7, #6
 8001c02:	2154      	movs	r1, #84	@ 0x54
 8001c04:	8812      	ldrh	r2, [r2, #0]
 8001c06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1dba      	adds	r2, r7, #6
 8001c0c:	2156      	movs	r1, #86	@ 0x56
 8001c0e:	8812      	ldrh	r2, [r2, #0]
 8001c10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	015b      	lsls	r3, r3, #5
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d108      	bne.n	8001c30 <HAL_UART_Transmit+0x98>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d104      	bne.n	8001c30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	e003      	b.n	8001c38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c38:	e030      	b.n	8001c9c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	0013      	movs	r3, r2
 8001c44:	2200      	movs	r2, #0
 8001c46:	2180      	movs	r1, #128	@ 0x80
 8001c48:	f000 fee6 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2288      	movs	r2, #136	@ 0x88
 8001c54:	2120      	movs	r1, #32
 8001c56:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e03d      	b.n	8001cd8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10b      	bne.n	8001c7a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	001a      	movs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	05d2      	lsls	r2, r2, #23
 8001c6e:	0dd2      	lsrs	r2, r2, #23
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	3302      	adds	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	e007      	b.n	8001c8a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	3301      	adds	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2256      	movs	r2, #86	@ 0x56
 8001c8e:	5a9b      	ldrh	r3, [r3, r2]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b299      	uxth	r1, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2256      	movs	r2, #86	@ 0x56
 8001c9a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2256      	movs	r2, #86	@ 0x56
 8001ca0:	5a9b      	ldrh	r3, [r3, r2]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1c8      	bne.n	8001c3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2140      	movs	r1, #64	@ 0x40
 8001cb6:	f000 feaf 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2288      	movs	r2, #136	@ 0x88
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e006      	b.n	8001cd8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2288      	movs	r2, #136	@ 0x88
 8001cce:	2120      	movs	r1, #32
 8001cd0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
  }
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b008      	add	sp, #32
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	1dbb      	adds	r3, r7, #6
 8001cec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	228c      	movs	r2, #140	@ 0x8c
 8001cf2:	589b      	ldr	r3, [r3, r2]
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d145      	bne.n	8001d84 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_UART_Receive_IT+0x26>
 8001cfe:	1dbb      	adds	r3, r7, #6
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e03d      	b.n	8001d86 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	2380      	movs	r3, #128	@ 0x80
 8001d10:	015b      	lsls	r3, r3, #5
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d109      	bne.n	8001d2a <HAL_UART_Receive_IT+0x4a>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d001      	beq.n	8001d2a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e02d      	b.n	8001d86 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d42:	613b      	str	r3, [r7, #16]
  return(result);
 8001d44:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f383 8810 	msr	PRIMASK, r3
}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2180      	movs	r1, #128	@ 0x80
 8001d60:	04c9      	lsls	r1, r1, #19
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f383 8810 	msr	PRIMASK, r3
}
 8001d70:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d72:	1dbb      	adds	r3, r7, #6
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 febc 	bl	8002af8 <UART_Start_Receive_IT>
 8001d80:	0003      	movs	r3, r0
 8001d82:	e000      	b.n	8001d86 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b008      	add	sp, #32
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b0aa      	sub	sp, #168	@ 0xa8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	22a4      	movs	r2, #164	@ 0xa4
 8001da0:	18b9      	adds	r1, r7, r2
 8001da2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	20a0      	movs	r0, #160	@ 0xa0
 8001dac:	1839      	adds	r1, r7, r0
 8001dae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	249c      	movs	r4, #156	@ 0x9c
 8001db8:	1939      	adds	r1, r7, r4
 8001dba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	18bb      	adds	r3, r7, r2
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4aa2      	ldr	r2, [pc, #648]	@ (800204c <HAL_UART_IRQHandler+0x2bc>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2298      	movs	r2, #152	@ 0x98
 8001dc8:	18bd      	adds	r5, r7, r2
 8001dca:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001dcc:	18bb      	adds	r3, r7, r2
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d11a      	bne.n	8001e0a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d015      	beq.n	8001e0a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2220      	movs	r2, #32
 8001de4:	4013      	ands	r3, r2
 8001de6:	d105      	bne.n	8001df4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001de8:	193b      	adds	r3, r7, r4
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	055b      	lsls	r3, r3, #21
 8001df0:	4013      	ands	r3, r2
 8001df2:	d00a      	beq.n	8001e0a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d100      	bne.n	8001dfe <HAL_UART_IRQHandler+0x6e>
 8001dfc:	e2dc      	b.n	80023b8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	0010      	movs	r0, r2
 8001e06:	4798      	blx	r3
      }
      return;
 8001e08:	e2d6      	b.n	80023b8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e0a:	2398      	movs	r3, #152	@ 0x98
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d100      	bne.n	8001e16 <HAL_UART_IRQHandler+0x86>
 8001e14:	e122      	b.n	800205c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001e16:	239c      	movs	r3, #156	@ 0x9c
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a8c      	ldr	r2, [pc, #560]	@ (8002050 <HAL_UART_IRQHandler+0x2c0>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001e22:	23a0      	movs	r3, #160	@ 0xa0
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a8a      	ldr	r2, [pc, #552]	@ (8002054 <HAL_UART_IRQHandler+0x2c4>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_UART_IRQHandler+0xa0>
 8001e2e:	e115      	b.n	800205c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e30:	23a4      	movs	r3, #164	@ 0xa4
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d012      	beq.n	8001e62 <HAL_UART_IRQHandler+0xd2>
 8001e3c:	23a0      	movs	r3, #160	@ 0xa0
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4013      	ands	r3, r2
 8001e48:	d00b      	beq.n	8001e62 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2290      	movs	r2, #144	@ 0x90
 8001e56:	589b      	ldr	r3, [r3, r2]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2190      	movs	r1, #144	@ 0x90
 8001e60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e62:	23a4      	movs	r3, #164	@ 0xa4
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d011      	beq.n	8001e92 <HAL_UART_IRQHandler+0x102>
 8001e6e:	239c      	movs	r3, #156	@ 0x9c
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	d00b      	beq.n	8001e92 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2290      	movs	r2, #144	@ 0x90
 8001e86:	589b      	ldr	r3, [r3, r2]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2190      	movs	r1, #144	@ 0x90
 8001e90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e92:	23a4      	movs	r3, #164	@ 0xa4
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d011      	beq.n	8001ec2 <HAL_UART_IRQHandler+0x132>
 8001e9e:	239c      	movs	r3, #156	@ 0x9c
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2290      	movs	r2, #144	@ 0x90
 8001eb6:	589b      	ldr	r3, [r3, r2]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2190      	movs	r1, #144	@ 0x90
 8001ec0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001ec2:	23a4      	movs	r3, #164	@ 0xa4
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d017      	beq.n	8001efe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001ece:	23a0      	movs	r3, #160	@ 0xa0
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d105      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001eda:	239c      	movs	r3, #156	@ 0x9c
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5b      	ldr	r2, [pc, #364]	@ (8002050 <HAL_UART_IRQHandler+0x2c0>)
 8001ee2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001ee4:	d00b      	beq.n	8001efe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2208      	movs	r2, #8
 8001eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2290      	movs	r2, #144	@ 0x90
 8001ef2:	589b      	ldr	r3, [r3, r2]
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2190      	movs	r1, #144	@ 0x90
 8001efc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001efe:	23a4      	movs	r3, #164	@ 0xa4
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_UART_IRQHandler+0x1a4>
 8001f0c:	23a0      	movs	r3, #160	@ 0xa0
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	04db      	lsls	r3, r3, #19
 8001f16:	4013      	ands	r3, r2
 8001f18:	d00c      	beq.n	8001f34 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2290      	movs	r2, #144	@ 0x90
 8001f28:	589b      	ldr	r3, [r3, r2]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2190      	movs	r1, #144	@ 0x90
 8001f32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2290      	movs	r2, #144	@ 0x90
 8001f38:	589b      	ldr	r3, [r3, r2]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d100      	bne.n	8001f40 <HAL_UART_IRQHandler+0x1b0>
 8001f3e:	e23d      	b.n	80023bc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001f40:	23a4      	movs	r3, #164	@ 0xa4
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d015      	beq.n	8001f78 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001f4c:	23a0      	movs	r3, #160	@ 0xa0
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2220      	movs	r2, #32
 8001f54:	4013      	ands	r3, r2
 8001f56:	d106      	bne.n	8001f66 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001f58:	239c      	movs	r3, #156	@ 0x9c
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	055b      	lsls	r3, r3, #21
 8001f62:	4013      	ands	r3, r2
 8001f64:	d008      	beq.n	8001f78 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	0010      	movs	r0, r2
 8001f76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2290      	movs	r2, #144	@ 0x90
 8001f7c:	589b      	ldr	r3, [r3, r2]
 8001f7e:	2194      	movs	r1, #148	@ 0x94
 8001f80:	187a      	adds	r2, r7, r1
 8001f82:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b40      	cmp	r3, #64	@ 0x40
 8001f90:	d004      	beq.n	8001f9c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2228      	movs	r2, #40	@ 0x28
 8001f98:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f9a:	d04c      	beq.n	8002036 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 fece 	bl	8002d40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2240      	movs	r2, #64	@ 0x40
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b40      	cmp	r3, #64	@ 0x40
 8001fb0:	d13c      	bne.n	800202c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001fb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fba:	2090      	movs	r0, #144	@ 0x90
 8001fbc:	183a      	adds	r2, r7, r0
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fc6:	f383 8810 	msr	PRIMASK, r3
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2140      	movs	r1, #64	@ 0x40
 8001fd8:	438a      	bics	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	183b      	adds	r3, r7, r0
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fe4:	f383 8810 	msr	PRIMASK, r3
}
 8001fe8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	589b      	ldr	r3, [r3, r2]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d016      	beq.n	8002022 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2280      	movs	r2, #128	@ 0x80
 8001ff8:	589b      	ldr	r3, [r3, r2]
 8001ffa:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <HAL_UART_IRQHandler+0x2c8>)
 8001ffc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2280      	movs	r2, #128	@ 0x80
 8002002:	589b      	ldr	r3, [r3, r2]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff faf5 	bl	80015f4 <HAL_DMA_Abort_IT>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d01c      	beq.n	8002048 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2280      	movs	r2, #128	@ 0x80
 8002012:	589b      	ldr	r3, [r3, r2]
 8002014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	5852      	ldr	r2, [r2, r1]
 800201c:	0010      	movs	r0, r2
 800201e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	e012      	b.n	8002048 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	f000 f9e1 	bl	80023ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800202a:	e00d      	b.n	8002048 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	0018      	movs	r0, r3
 8002030:	f000 f9dc 	bl	80023ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	e008      	b.n	8002048 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f9d7 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2290      	movs	r2, #144	@ 0x90
 8002042:	2100      	movs	r1, #0
 8002044:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002046:	e1b9      	b.n	80023bc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002048:	46c0      	nop			@ (mov r8, r8)
    return;
 800204a:	e1b7      	b.n	80023bc <HAL_UART_IRQHandler+0x62c>
 800204c:	0000080f 	.word	0x0000080f
 8002050:	10000001 	.word	0x10000001
 8002054:	04000120 	.word	0x04000120
 8002058:	08002e0d 	.word	0x08002e0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002060:	2b01      	cmp	r3, #1
 8002062:	d000      	beq.n	8002066 <HAL_UART_IRQHandler+0x2d6>
 8002064:	e13e      	b.n	80022e4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002066:	23a4      	movs	r3, #164	@ 0xa4
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2210      	movs	r2, #16
 800206e:	4013      	ands	r3, r2
 8002070:	d100      	bne.n	8002074 <HAL_UART_IRQHandler+0x2e4>
 8002072:	e137      	b.n	80022e4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002074:	23a0      	movs	r3, #160	@ 0xa0
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2210      	movs	r2, #16
 800207c:	4013      	ands	r3, r2
 800207e:	d100      	bne.n	8002082 <HAL_UART_IRQHandler+0x2f2>
 8002080:	e130      	b.n	80022e4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2210      	movs	r2, #16
 8002088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2240      	movs	r2, #64	@ 0x40
 8002092:	4013      	ands	r3, r2
 8002094:	2b40      	cmp	r3, #64	@ 0x40
 8002096:	d000      	beq.n	800209a <HAL_UART_IRQHandler+0x30a>
 8002098:	e0a4      	b.n	80021e4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	589b      	ldr	r3, [r3, r2]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	217e      	movs	r1, #126	@ 0x7e
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80020aa:	187b      	adds	r3, r7, r1
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d100      	bne.n	80020b4 <HAL_UART_IRQHandler+0x324>
 80020b2:	e185      	b.n	80023c0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	225c      	movs	r2, #92	@ 0x5c
 80020b8:	5a9b      	ldrh	r3, [r3, r2]
 80020ba:	187a      	adds	r2, r7, r1
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d300      	bcc.n	80020c4 <HAL_UART_IRQHandler+0x334>
 80020c2:	e17d      	b.n	80023c0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	187a      	adds	r2, r7, r1
 80020c8:	215e      	movs	r1, #94	@ 0x5e
 80020ca:	8812      	ldrh	r2, [r2, #0]
 80020cc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	@ 0x80
 80020d2:	589b      	ldr	r3, [r3, r2]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2220      	movs	r2, #32
 80020da:	4013      	ands	r3, r2
 80020dc:	d170      	bne.n	80021c0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020de:	f3ef 8310 	mrs	r3, PRIMASK
 80020e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020e8:	2301      	movs	r3, #1
 80020ea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ee:	f383 8810 	msr	PRIMASK, r3
}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	49b4      	ldr	r1, [pc, #720]	@ (80023d0 <HAL_UART_IRQHandler+0x640>)
 8002100:	400a      	ands	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002106:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210a:	f383 8810 	msr	PRIMASK, r3
}
 800210e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002110:	f3ef 8310 	mrs	r3, PRIMASK
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002118:	677b      	str	r3, [r7, #116]	@ 0x74
 800211a:	2301      	movs	r3, #1
 800211c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002120:	f383 8810 	msr	PRIMASK, r3
}
 8002124:	46c0      	nop			@ (mov r8, r8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	438a      	bics	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002138:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800213c:	f383 8810 	msr	PRIMASK, r3
}
 8002140:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002142:	f3ef 8310 	mrs	r3, PRIMASK
 8002146:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214a:	673b      	str	r3, [r7, #112]	@ 0x70
 800214c:	2301      	movs	r3, #1
 800214e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002152:	f383 8810 	msr	PRIMASK, r3
}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2140      	movs	r1, #64	@ 0x40
 8002164:	438a      	bics	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800216a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800216e:	f383 8810 	msr	PRIMASK, r3
}
 8002172:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	228c      	movs	r2, #140	@ 0x8c
 8002178:	2120      	movs	r1, #32
 800217a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002182:	f3ef 8310 	mrs	r3, PRIMASK
 8002186:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800218a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800218c:	2301      	movs	r3, #1
 800218e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002192:	f383 8810 	msr	PRIMASK, r3
}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2110      	movs	r1, #16
 80021a4:	438a      	bics	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ae:	f383 8810 	msr	PRIMASK, r3
}
 80021b2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2280      	movs	r2, #128	@ 0x80
 80021b8:	589b      	ldr	r3, [r3, r2]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff f9b8 	bl	8001530 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	225c      	movs	r2, #92	@ 0x5c
 80021ca:	5a9a      	ldrh	r2, [r3, r2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	215e      	movs	r1, #94	@ 0x5e
 80021d0:	5a5b      	ldrh	r3, [r3, r1]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0011      	movs	r1, r2
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f90d 	bl	80023fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021e2:	e0ed      	b.n	80023c0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	225c      	movs	r2, #92	@ 0x5c
 80021e8:	5a99      	ldrh	r1, [r3, r2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	225e      	movs	r2, #94	@ 0x5e
 80021ee:	5a9b      	ldrh	r3, [r3, r2]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	208e      	movs	r0, #142	@ 0x8e
 80021f4:	183b      	adds	r3, r7, r0
 80021f6:	1a8a      	subs	r2, r1, r2
 80021f8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	225e      	movs	r2, #94	@ 0x5e
 80021fe:	5a9b      	ldrh	r3, [r3, r2]
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <HAL_UART_IRQHandler+0x478>
 8002206:	e0dd      	b.n	80023c4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002208:	183b      	adds	r3, r7, r0
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d100      	bne.n	8002212 <HAL_UART_IRQHandler+0x482>
 8002210:	e0d8      	b.n	80023c4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002212:	f3ef 8310 	mrs	r3, PRIMASK
 8002216:	60fb      	str	r3, [r7, #12]
  return(result);
 8002218:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800221a:	2488      	movs	r4, #136	@ 0x88
 800221c:	193a      	adds	r2, r7, r4
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f383 8810 	msr	PRIMASK, r3
}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4967      	ldr	r1, [pc, #412]	@ (80023d4 <HAL_UART_IRQHandler+0x644>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	193b      	adds	r3, r7, r4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f383 8810 	msr	PRIMASK, r3
}
 8002248:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224a:	f3ef 8310 	mrs	r3, PRIMASK
 800224e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002250:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002252:	2484      	movs	r4, #132	@ 0x84
 8002254:	193a      	adds	r2, r7, r4
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f383 8810 	msr	PRIMASK, r3
}
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	495a      	ldr	r1, [pc, #360]	@ (80023d8 <HAL_UART_IRQHandler+0x648>)
 8002270:	400a      	ands	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	193b      	adds	r3, r7, r4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f383 8810 	msr	PRIMASK, r3
}
 8002280:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	228c      	movs	r2, #140	@ 0x8c
 8002286:	2120      	movs	r1, #32
 8002288:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002296:	f3ef 8310 	mrs	r3, PRIMASK
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800229e:	2480      	movs	r4, #128	@ 0x80
 80022a0:	193a      	adds	r2, r7, r4
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	2301      	movs	r3, #1
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022aa:	f383 8810 	msr	PRIMASK, r3
}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2110      	movs	r1, #16
 80022bc:	438a      	bics	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c8:	f383 8810 	msr	PRIMASK, r3
}
 80022cc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0011      	movs	r1, r2
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f88d 	bl	80023fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80022e2:	e06f      	b.n	80023c4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80022e4:	23a4      	movs	r3, #164	@ 0xa4
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	035b      	lsls	r3, r3, #13
 80022ee:	4013      	ands	r3, r2
 80022f0:	d010      	beq.n	8002314 <HAL_UART_IRQHandler+0x584>
 80022f2:	239c      	movs	r3, #156	@ 0x9c
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	03db      	lsls	r3, r3, #15
 80022fc:	4013      	ands	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2280      	movs	r2, #128	@ 0x80
 8002306:	0352      	lsls	r2, r2, #13
 8002308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f001 fab5 	bl	800387c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002312:	e05a      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002314:	23a4      	movs	r3, #164	@ 0xa4
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	4013      	ands	r3, r2
 800231e:	d016      	beq.n	800234e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002320:	23a0      	movs	r3, #160	@ 0xa0
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2280      	movs	r2, #128	@ 0x80
 8002328:	4013      	ands	r3, r2
 800232a:	d106      	bne.n	800233a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800232c:	239c      	movs	r3, #156	@ 0x9c
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	4013      	ands	r3, r2
 8002338:	d009      	beq.n	800234e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800233e:	2b00      	cmp	r3, #0
 8002340:	d042      	beq.n	80023c8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	0010      	movs	r0, r2
 800234a:	4798      	blx	r3
    }
    return;
 800234c:	e03c      	b.n	80023c8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800234e:	23a4      	movs	r3, #164	@ 0xa4
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2240      	movs	r2, #64	@ 0x40
 8002356:	4013      	ands	r3, r2
 8002358:	d00a      	beq.n	8002370 <HAL_UART_IRQHandler+0x5e0>
 800235a:	23a0      	movs	r3, #160	@ 0xa0
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2240      	movs	r2, #64	@ 0x40
 8002362:	4013      	ands	r3, r2
 8002364:	d004      	beq.n	8002370 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 fd66 	bl	8002e3a <UART_EndTransmit_IT>
    return;
 800236e:	e02c      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002370:	23a4      	movs	r3, #164	@ 0xa4
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	4013      	ands	r3, r2
 800237c:	d00b      	beq.n	8002396 <HAL_UART_IRQHandler+0x606>
 800237e:	23a0      	movs	r3, #160	@ 0xa0
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	05db      	lsls	r3, r3, #23
 8002388:	4013      	ands	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	0018      	movs	r0, r3
 8002390:	f001 fa84 	bl	800389c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002394:	e019      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002396:	23a4      	movs	r3, #164	@ 0xa4
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	045b      	lsls	r3, r3, #17
 80023a0:	4013      	ands	r3, r2
 80023a2:	d012      	beq.n	80023ca <HAL_UART_IRQHandler+0x63a>
 80023a4:	23a0      	movs	r3, #160	@ 0xa0
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da0d      	bge.n	80023ca <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f001 fa6b 	bl	800388c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023b6:	e008      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
      return;
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	e006      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
    return;
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	e004      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
      return;
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	e002      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
      return;
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	e000      	b.n	80023ca <HAL_UART_IRQHandler+0x63a>
    return;
 80023c8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b02a      	add	sp, #168	@ 0xa8
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	fffffeff 	.word	0xfffffeff
 80023d4:	fffffedf 	.word	0xfffffedf
 80023d8:	effffffe 	.word	0xeffffffe

080023dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	000a      	movs	r2, r1
 8002406:	1cbb      	adds	r3, r7, #2
 8002408:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800241c:	231a      	movs	r3, #26
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	4313      	orrs	r3, r2
 800243a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4abc      	ldr	r2, [pc, #752]	@ (8002734 <UART_SetConfig+0x320>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4ab7      	ldr	r2, [pc, #732]	@ (8002738 <UART_SetConfig+0x324>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	4313      	orrs	r3, r2
 8002478:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4aae      	ldr	r2, [pc, #696]	@ (800273c <UART_SetConfig+0x328>)
 8002482:	4013      	ands	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	220f      	movs	r2, #15
 8002498:	4393      	bics	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4aa4      	ldr	r2, [pc, #656]	@ (8002740 <UART_SetConfig+0x32c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d127      	bne.n	8002502 <UART_SetConfig+0xee>
 80024b2:	4ba4      	ldr	r3, [pc, #656]	@ (8002744 <UART_SetConfig+0x330>)
 80024b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b6:	2203      	movs	r2, #3
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d017      	beq.n	80024ee <UART_SetConfig+0xda>
 80024be:	d81b      	bhi.n	80024f8 <UART_SetConfig+0xe4>
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d00a      	beq.n	80024da <UART_SetConfig+0xc6>
 80024c4:	d818      	bhi.n	80024f8 <UART_SetConfig+0xe4>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <UART_SetConfig+0xbc>
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d00a      	beq.n	80024e4 <UART_SetConfig+0xd0>
 80024ce:	e013      	b.n	80024f8 <UART_SetConfig+0xe4>
 80024d0:	231b      	movs	r3, #27
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e058      	b.n	800258c <UART_SetConfig+0x178>
 80024da:	231b      	movs	r3, #27
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e053      	b.n	800258c <UART_SetConfig+0x178>
 80024e4:	231b      	movs	r3, #27
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2204      	movs	r2, #4
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e04e      	b.n	800258c <UART_SetConfig+0x178>
 80024ee:	231b      	movs	r3, #27
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2208      	movs	r2, #8
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e049      	b.n	800258c <UART_SetConfig+0x178>
 80024f8:	231b      	movs	r3, #27
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2210      	movs	r2, #16
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e044      	b.n	800258c <UART_SetConfig+0x178>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a90      	ldr	r2, [pc, #576]	@ (8002748 <UART_SetConfig+0x334>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d127      	bne.n	800255c <UART_SetConfig+0x148>
 800250c:	4b8d      	ldr	r3, [pc, #564]	@ (8002744 <UART_SetConfig+0x330>)
 800250e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002510:	220c      	movs	r2, #12
 8002512:	4013      	ands	r3, r2
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d017      	beq.n	8002548 <UART_SetConfig+0x134>
 8002518:	d81b      	bhi.n	8002552 <UART_SetConfig+0x13e>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d00a      	beq.n	8002534 <UART_SetConfig+0x120>
 800251e:	d818      	bhi.n	8002552 <UART_SetConfig+0x13e>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <UART_SetConfig+0x116>
 8002524:	2b04      	cmp	r3, #4
 8002526:	d00a      	beq.n	800253e <UART_SetConfig+0x12a>
 8002528:	e013      	b.n	8002552 <UART_SetConfig+0x13e>
 800252a:	231b      	movs	r3, #27
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	e02b      	b.n	800258c <UART_SetConfig+0x178>
 8002534:	231b      	movs	r3, #27
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e026      	b.n	800258c <UART_SetConfig+0x178>
 800253e:	231b      	movs	r3, #27
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	2204      	movs	r2, #4
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e021      	b.n	800258c <UART_SetConfig+0x178>
 8002548:	231b      	movs	r3, #27
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2208      	movs	r2, #8
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e01c      	b.n	800258c <UART_SetConfig+0x178>
 8002552:	231b      	movs	r3, #27
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2210      	movs	r2, #16
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e017      	b.n	800258c <UART_SetConfig+0x178>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7a      	ldr	r2, [pc, #488]	@ (800274c <UART_SetConfig+0x338>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d104      	bne.n	8002570 <UART_SetConfig+0x15c>
 8002566:	231b      	movs	r3, #27
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e00d      	b.n	800258c <UART_SetConfig+0x178>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a76      	ldr	r2, [pc, #472]	@ (8002750 <UART_SetConfig+0x33c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d104      	bne.n	8002584 <UART_SetConfig+0x170>
 800257a:	231b      	movs	r3, #27
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e003      	b.n	800258c <UART_SetConfig+0x178>
 8002584:	231b      	movs	r3, #27
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2210      	movs	r2, #16
 800258a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	429a      	cmp	r2, r3
 8002596:	d000      	beq.n	800259a <UART_SetConfig+0x186>
 8002598:	e065      	b.n	8002666 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800259a:	231b      	movs	r3, #27
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d015      	beq.n	80025d0 <UART_SetConfig+0x1bc>
 80025a4:	dc18      	bgt.n	80025d8 <UART_SetConfig+0x1c4>
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d00d      	beq.n	80025c6 <UART_SetConfig+0x1b2>
 80025aa:	dc15      	bgt.n	80025d8 <UART_SetConfig+0x1c4>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <UART_SetConfig+0x1a2>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d005      	beq.n	80025c0 <UART_SetConfig+0x1ac>
 80025b4:	e010      	b.n	80025d8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b6:	f7ff fa83 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 80025ba:	0003      	movs	r3, r0
 80025bc:	617b      	str	r3, [r7, #20]
        break;
 80025be:	e012      	b.n	80025e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c0:	4b64      	ldr	r3, [pc, #400]	@ (8002754 <UART_SetConfig+0x340>)
 80025c2:	617b      	str	r3, [r7, #20]
        break;
 80025c4:	e00f      	b.n	80025e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025c6:	f7ff f9ef 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 80025ca:	0003      	movs	r3, r0
 80025cc:	617b      	str	r3, [r7, #20]
        break;
 80025ce:	e00a      	b.n	80025e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	617b      	str	r3, [r7, #20]
        break;
 80025d6:	e006      	b.n	80025e6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025dc:	231a      	movs	r3, #26
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
        break;
 80025e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d100      	bne.n	80025ee <UART_SetConfig+0x1da>
 80025ec:	e08d      	b.n	800270a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f2:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <UART_SetConfig+0x344>)
 80025f4:	0052      	lsls	r2, r2, #1
 80025f6:	5ad3      	ldrh	r3, [r2, r3]
 80025f8:	0019      	movs	r1, r3
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7fd fd92 	bl	8000124 <__udivsi3>
 8002600:	0003      	movs	r3, r0
 8002602:	005a      	lsls	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	18d2      	adds	r2, r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0019      	movs	r1, r3
 8002612:	0010      	movs	r0, r2
 8002614:	f7fd fd86 	bl	8000124 <__udivsi3>
 8002618:	0003      	movs	r3, r0
 800261a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	d91c      	bls.n	800265c <UART_SetConfig+0x248>
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	025b      	lsls	r3, r3, #9
 8002628:	429a      	cmp	r2, r3
 800262a:	d217      	bcs.n	800265c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	b29a      	uxth	r2, r3
 8002630:	200e      	movs	r0, #14
 8002632:	183b      	adds	r3, r7, r0
 8002634:	210f      	movs	r1, #15
 8002636:	438a      	bics	r2, r1
 8002638:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	2207      	movs	r2, #7
 8002642:	4013      	ands	r3, r2
 8002644:	b299      	uxth	r1, r3
 8002646:	183b      	adds	r3, r7, r0
 8002648:	183a      	adds	r2, r7, r0
 800264a:	8812      	ldrh	r2, [r2, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	183a      	adds	r2, r7, r0
 8002656:	8812      	ldrh	r2, [r2, #0]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	e056      	b.n	800270a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800265c:	231a      	movs	r3, #26
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e051      	b.n	800270a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002666:	231b      	movs	r3, #27
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d015      	beq.n	800269c <UART_SetConfig+0x288>
 8002670:	dc18      	bgt.n	80026a4 <UART_SetConfig+0x290>
 8002672:	2b04      	cmp	r3, #4
 8002674:	d00d      	beq.n	8002692 <UART_SetConfig+0x27e>
 8002676:	dc15      	bgt.n	80026a4 <UART_SetConfig+0x290>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <UART_SetConfig+0x26e>
 800267c:	2b02      	cmp	r3, #2
 800267e:	d005      	beq.n	800268c <UART_SetConfig+0x278>
 8002680:	e010      	b.n	80026a4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002682:	f7ff fa1d 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8002686:	0003      	movs	r3, r0
 8002688:	617b      	str	r3, [r7, #20]
        break;
 800268a:	e012      	b.n	80026b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800268c:	4b31      	ldr	r3, [pc, #196]	@ (8002754 <UART_SetConfig+0x340>)
 800268e:	617b      	str	r3, [r7, #20]
        break;
 8002690:	e00f      	b.n	80026b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002692:	f7ff f989 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8002696:	0003      	movs	r3, r0
 8002698:	617b      	str	r3, [r7, #20]
        break;
 800269a:	e00a      	b.n	80026b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	617b      	str	r3, [r7, #20]
        break;
 80026a2:	e006      	b.n	80026b2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80026a8:	231a      	movs	r3, #26
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
        break;
 80026b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d028      	beq.n	800270a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026bc:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <UART_SetConfig+0x344>)
 80026be:	0052      	lsls	r2, r2, #1
 80026c0:	5ad3      	ldrh	r3, [r2, r3]
 80026c2:	0019      	movs	r1, r3
 80026c4:	6978      	ldr	r0, [r7, #20]
 80026c6:	f7fd fd2d 	bl	8000124 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	001a      	movs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	18d2      	adds	r2, r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f7fd fd21 	bl	8000124 <__udivsi3>
 80026e2:	0003      	movs	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d90a      	bls.n	8002702 <UART_SetConfig+0x2ee>
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d205      	bcs.n	8002702 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	e003      	b.n	800270a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002702:	231a      	movs	r3, #26
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	226a      	movs	r2, #106	@ 0x6a
 800270e:	2101      	movs	r1, #1
 8002710:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2268      	movs	r2, #104	@ 0x68
 8002716:	2101      	movs	r1, #1
 8002718:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002726:	231a      	movs	r3, #26
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b008      	add	sp, #32
 8002732:	bd80      	pop	{r7, pc}
 8002734:	cfff69f3 	.word	0xcfff69f3
 8002738:	ffffcfff 	.word	0xffffcfff
 800273c:	11fff4ff 	.word	0x11fff4ff
 8002740:	40013800 	.word	0x40013800
 8002744:	40021000 	.word	0x40021000
 8002748:	40004400 	.word	0x40004400
 800274c:	40004800 	.word	0x40004800
 8002750:	40004c00 	.word	0x40004c00
 8002754:	00f42400 	.word	0x00f42400
 8002758:	08004758 	.word	0x08004758

0800275c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	2208      	movs	r2, #8
 800276a:	4013      	ands	r3, r2
 800276c:	d00b      	beq.n	8002786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a4a      	ldr	r2, [pc, #296]	@ (80028a0 <UART_AdvFeatureConfig+0x144>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	d00b      	beq.n	80027a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a43      	ldr	r2, [pc, #268]	@ (80028a4 <UART_AdvFeatureConfig+0x148>)
 8002798:	4013      	ands	r3, r2
 800279a:	0019      	movs	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d00b      	beq.n	80027ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a3b      	ldr	r2, [pc, #236]	@ (80028a8 <UART_AdvFeatureConfig+0x14c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	2204      	movs	r2, #4
 80027d0:	4013      	ands	r3, r2
 80027d2:	d00b      	beq.n	80027ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4a34      	ldr	r2, [pc, #208]	@ (80028ac <UART_AdvFeatureConfig+0x150>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	2210      	movs	r2, #16
 80027f2:	4013      	ands	r3, r2
 80027f4:	d00b      	beq.n	800280e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a2c      	ldr	r2, [pc, #176]	@ (80028b0 <UART_AdvFeatureConfig+0x154>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	2220      	movs	r2, #32
 8002814:	4013      	ands	r3, r2
 8002816:	d00b      	beq.n	8002830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4a25      	ldr	r2, [pc, #148]	@ (80028b4 <UART_AdvFeatureConfig+0x158>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	2240      	movs	r2, #64	@ 0x40
 8002836:	4013      	ands	r3, r2
 8002838:	d01d      	beq.n	8002876 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a1d      	ldr	r2, [pc, #116]	@ (80028b8 <UART_AdvFeatureConfig+0x15c>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	035b      	lsls	r3, r3, #13
 800285a:	429a      	cmp	r2, r3
 800285c:	d10b      	bne.n	8002876 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <UART_AdvFeatureConfig+0x160>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	4013      	ands	r3, r2
 800287e:	d00b      	beq.n	8002898 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a0e      	ldr	r2, [pc, #56]	@ (80028c0 <UART_AdvFeatureConfig+0x164>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	ffff7fff 	.word	0xffff7fff
 80028a4:	fffdffff 	.word	0xfffdffff
 80028a8:	fffeffff 	.word	0xfffeffff
 80028ac:	fffbffff 	.word	0xfffbffff
 80028b0:	ffffefff 	.word	0xffffefff
 80028b4:	ffffdfff 	.word	0xffffdfff
 80028b8:	ffefffff 	.word	0xffefffff
 80028bc:	ff9fffff 	.word	0xff9fffff
 80028c0:	fff7ffff 	.word	0xfff7ffff

080028c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b092      	sub	sp, #72	@ 0x48
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2290      	movs	r2, #144	@ 0x90
 80028d0:	2100      	movs	r1, #0
 80028d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028d4:	f7fe fd20 	bl	8001318 <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2208      	movs	r2, #8
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d12d      	bne.n	8002946 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ec:	2280      	movs	r2, #128	@ 0x80
 80028ee:	0391      	lsls	r1, r2, #14
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4a47      	ldr	r2, [pc, #284]	@ (8002a10 <UART_CheckIdleState+0x14c>)
 80028f4:	9200      	str	r2, [sp, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f000 f88e 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 80028fc:	1e03      	subs	r3, r0, #0
 80028fe:	d022      	beq.n	8002946 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002900:	f3ef 8310 	mrs	r3, PRIMASK
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002908:	63bb      	str	r3, [r7, #56]	@ 0x38
 800290a:	2301      	movs	r3, #1
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002910:	f383 8810 	msr	PRIMASK, r3
}
 8002914:	46c0      	nop			@ (mov r8, r8)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2180      	movs	r1, #128	@ 0x80
 8002922:	438a      	bics	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292c:	f383 8810 	msr	PRIMASK, r3
}
 8002930:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2288      	movs	r2, #136	@ 0x88
 8002936:	2120      	movs	r1, #32
 8002938:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2284      	movs	r2, #132	@ 0x84
 800293e:	2100      	movs	r1, #0
 8002940:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e060      	b.n	8002a08 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2204      	movs	r2, #4
 800294e:	4013      	ands	r3, r2
 8002950:	2b04      	cmp	r3, #4
 8002952:	d146      	bne.n	80029e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	03d1      	lsls	r1, r2, #15
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a10 <UART_CheckIdleState+0x14c>)
 800295e:	9200      	str	r2, [sp, #0]
 8002960:	2200      	movs	r2, #0
 8002962:	f000 f859 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d03b      	beq.n	80029e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296a:	f3ef 8310 	mrs	r3, PRIMASK
 800296e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002970:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
 8002974:	2301      	movs	r3, #1
 8002976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f383 8810 	msr	PRIMASK, r3
}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4922      	ldr	r1, [pc, #136]	@ (8002a14 <UART_CheckIdleState+0x150>)
 800298c:	400a      	ands	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f383 8810 	msr	PRIMASK, r3
}
 800299a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299c:	f3ef 8310 	mrs	r3, PRIMASK
 80029a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80029a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029a6:	2301      	movs	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f383 8810 	msr	PRIMASK, r3
}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	438a      	bics	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	228c      	movs	r2, #140	@ 0x8c
 80029d2:	2120      	movs	r1, #32
 80029d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2284      	movs	r2, #132	@ 0x84
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e012      	b.n	8002a08 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2288      	movs	r2, #136	@ 0x88
 80029e6:	2120      	movs	r1, #32
 80029e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	228c      	movs	r2, #140	@ 0x8c
 80029ee:	2120      	movs	r1, #32
 80029f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2284      	movs	r2, #132	@ 0x84
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b010      	add	sp, #64	@ 0x40
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	01ffffff 	.word	0x01ffffff
 8002a14:	fffffedf 	.word	0xfffffedf

08002a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a28:	e051      	b.n	8002ace <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	d04e      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a30:	f7fe fc72 	bl	8001318 <HAL_GetTick>
 8002a34:	0002      	movs	r2, r0
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e051      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2204      	movs	r2, #4
 8002a52:	4013      	ands	r3, r2
 8002a54:	d03b      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b80      	cmp	r3, #128	@ 0x80
 8002a5a:	d038      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b40      	cmp	r3, #64	@ 0x40
 8002a60:	d035      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d111      	bne.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2208      	movs	r2, #8
 8002a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f960 	bl	8002d40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2290      	movs	r2, #144	@ 0x90
 8002a84:	2108      	movs	r1, #8
 8002a86:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2284      	movs	r2, #132	@ 0x84
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e02c      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69da      	ldr	r2, [r3, #28]
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d112      	bne.n	8002ace <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2280      	movs	r2, #128	@ 0x80
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 f943 	bl	8002d40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2290      	movs	r2, #144	@ 0x90
 8002abe:	2120      	movs	r1, #32
 8002ac0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2284      	movs	r2, #132	@ 0x84
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e00f      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	425a      	negs	r2, r3
 8002ade:	4153      	adcs	r3, r2
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d09e      	beq.n	8002a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b098      	sub	sp, #96	@ 0x60
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	1dbb      	adds	r3, r7, #6
 8002b04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1dba      	adds	r2, r7, #6
 8002b10:	215c      	movs	r1, #92	@ 0x5c
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1dba      	adds	r2, r7, #6
 8002b1a:	215e      	movs	r1, #94	@ 0x5e
 8002b1c:	8812      	ldrh	r2, [r2, #0]
 8002b1e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	015b      	lsls	r3, r3, #5
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d10d      	bne.n	8002b4e <UART_Start_Receive_IT+0x56>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d104      	bne.n	8002b44 <UART_Start_Receive_IT+0x4c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2260      	movs	r2, #96	@ 0x60
 8002b3e:	497b      	ldr	r1, [pc, #492]	@ (8002d2c <UART_Start_Receive_IT+0x234>)
 8002b40:	5299      	strh	r1, [r3, r2]
 8002b42:	e02e      	b.n	8002ba2 <UART_Start_Receive_IT+0xaa>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2260      	movs	r2, #96	@ 0x60
 8002b48:	21ff      	movs	r1, #255	@ 0xff
 8002b4a:	5299      	strh	r1, [r3, r2]
 8002b4c:	e029      	b.n	8002ba2 <UART_Start_Receive_IT+0xaa>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <UART_Start_Receive_IT+0x7a>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <UART_Start_Receive_IT+0x70>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2260      	movs	r2, #96	@ 0x60
 8002b62:	21ff      	movs	r1, #255	@ 0xff
 8002b64:	5299      	strh	r1, [r3, r2]
 8002b66:	e01c      	b.n	8002ba2 <UART_Start_Receive_IT+0xaa>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2260      	movs	r2, #96	@ 0x60
 8002b6c:	217f      	movs	r1, #127	@ 0x7f
 8002b6e:	5299      	strh	r1, [r3, r2]
 8002b70:	e017      	b.n	8002ba2 <UART_Start_Receive_IT+0xaa>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	055b      	lsls	r3, r3, #21
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10d      	bne.n	8002b9a <UART_Start_Receive_IT+0xa2>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d104      	bne.n	8002b90 <UART_Start_Receive_IT+0x98>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2260      	movs	r2, #96	@ 0x60
 8002b8a:	217f      	movs	r1, #127	@ 0x7f
 8002b8c:	5299      	strh	r1, [r3, r2]
 8002b8e:	e008      	b.n	8002ba2 <UART_Start_Receive_IT+0xaa>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2260      	movs	r2, #96	@ 0x60
 8002b94:	213f      	movs	r1, #63	@ 0x3f
 8002b96:	5299      	strh	r1, [r3, r2]
 8002b98:	e003      	b.n	8002ba2 <UART_Start_Receive_IT+0xaa>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2260      	movs	r2, #96	@ 0x60
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2290      	movs	r2, #144	@ 0x90
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	228c      	movs	r2, #140	@ 0x8c
 8002bae:	2122      	movs	r1, #34	@ 0x22
 8002bb0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc2:	f383 8810 	msr	PRIMASK, r3
}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bde:	f383 8810 	msr	PRIMASK, r3
}
 8002be2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	059b      	lsls	r3, r3, #22
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d150      	bne.n	8002c92 <UART_Start_Receive_IT+0x19a>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2268      	movs	r2, #104	@ 0x68
 8002bf4:	5a9b      	ldrh	r3, [r3, r2]
 8002bf6:	1dba      	adds	r2, r7, #6
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d349      	bcc.n	8002c92 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	015b      	lsls	r3, r3, #5
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d107      	bne.n	8002c1a <UART_Start_Receive_IT+0x122>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a46      	ldr	r2, [pc, #280]	@ (8002d30 <UART_Start_Receive_IT+0x238>)
 8002c16:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c18:	e002      	b.n	8002c20 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a45      	ldr	r2, [pc, #276]	@ (8002d34 <UART_Start_Receive_IT+0x23c>)
 8002c1e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d019      	beq.n	8002c5c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c28:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c32:	2301      	movs	r3, #1
 8002c34:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c38:	f383 8810 	msr	PRIMASK, r3
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2180      	movs	r1, #128	@ 0x80
 8002c4a:	0049      	lsls	r1, r1, #1
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c56:	f383 8810 	msr	PRIMASK, r3
}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002c64:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c66:	2301      	movs	r3, #1
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	f383 8810 	msr	PRIMASK, r3
}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2180      	movs	r1, #128	@ 0x80
 8002c7e:	0549      	lsls	r1, r1, #21
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	f383 8810 	msr	PRIMASK, r3
}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	e047      	b.n	8002d22 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	015b      	lsls	r3, r3, #5
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d107      	bne.n	8002cae <UART_Start_Receive_IT+0x1b6>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <UART_Start_Receive_IT+0x240>)
 8002caa:	675a      	str	r2, [r3, #116]	@ 0x74
 8002cac:	e002      	b.n	8002cb4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	@ (8002d3c <UART_Start_Receive_IT+0x244>)
 8002cb2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d019      	beq.n	8002cf0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f383 8810 	msr	PRIMASK, r3
}
 8002cd0:	46c0      	nop			@ (mov r8, r8)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2190      	movs	r1, #144	@ 0x90
 8002cde:	0049      	lsls	r1, r1, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	f383 8810 	msr	PRIMASK, r3
}
 8002cee:	e018      	b.n	8002d22 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf4:	613b      	str	r3, [r7, #16]
  return(result);
 8002cf6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002cf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2120      	movs	r1, #32
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b018      	add	sp, #96	@ 0x60
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	000001ff 	.word	0x000001ff
 8002d30:	08003535 	.word	0x08003535
 8002d34:	08003205 	.word	0x08003205
 8002d38:	0800304d 	.word	0x0800304d
 8002d3c:	08002e95 	.word	0x08002e95

08002d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08e      	sub	sp, #56	@ 0x38
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d48:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d52:	2301      	movs	r3, #1
 8002d54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4926      	ldr	r1, [pc, #152]	@ (8002e04 <UART_EndRxTransfer+0xc4>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f383 8810 	msr	PRIMASK, r3
}
 8002d78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	491b      	ldr	r1, [pc, #108]	@ (8002e08 <UART_EndRxTransfer+0xc8>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	f383 8810 	msr	PRIMASK, r3
}
 8002daa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d118      	bne.n	8002de6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	228c      	movs	r2, #140	@ 0x8c
 8002dea:	2120      	movs	r1, #32
 8002dec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b00e      	add	sp, #56	@ 0x38
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	fffffedf 	.word	0xfffffedf
 8002e08:	effffffe 	.word	0xeffffffe

08002e0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	225e      	movs	r2, #94	@ 0x5e
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2256      	movs	r2, #86	@ 0x56
 8002e26:	2100      	movs	r1, #0
 8002e28:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff fadd 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b004      	add	sp, #16
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e42:	f3ef 8310 	mrs	r3, PRIMASK
 8002e46:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e48:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f383 8810 	msr	PRIMASK, r3
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2140      	movs	r1, #64	@ 0x40
 8002e64:	438a      	bics	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2288      	movs	r2, #136	@ 0x88
 8002e78:	2120      	movs	r1, #32
 8002e7a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff faa9 	bl	80023dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b006      	add	sp, #24
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b094      	sub	sp, #80	@ 0x50
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002e9c:	204e      	movs	r0, #78	@ 0x4e
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	2160      	movs	r1, #96	@ 0x60
 8002ea4:	5a52      	ldrh	r2, [r2, r1]
 8002ea6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	228c      	movs	r2, #140	@ 0x8c
 8002eac:	589b      	ldr	r3, [r3, r2]
 8002eae:	2b22      	cmp	r3, #34	@ 0x22
 8002eb0:	d000      	beq.n	8002eb4 <UART_RxISR_8BIT+0x20>
 8002eb2:	e0ba      	b.n	800302a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eba:	214c      	movs	r1, #76	@ 0x4c
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b2d9      	uxtb	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	225e      	movs	r2, #94	@ 0x5e
 8002ee4:	5a9b      	ldrh	r3, [r3, r2]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b299      	uxth	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	225e      	movs	r2, #94	@ 0x5e
 8002ef0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	225e      	movs	r2, #94	@ 0x5e
 8002ef6:	5a9b      	ldrh	r3, [r3, r2]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d000      	beq.n	8002f00 <UART_RxISR_8BIT+0x6c>
 8002efe:	e09c      	b.n	800303a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f00:	f3ef 8310 	mrs	r3, PRIMASK
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4948      	ldr	r1, [pc, #288]	@ (8003044 <UART_RxISR_8BIT+0x1b0>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2c:	f383 8810 	msr	PRIMASK, r3
}
 8002f30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f32:	f3ef 8310 	mrs	r3, PRIMASK
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f42:	f383 8810 	msr	PRIMASK, r3
}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	438a      	bics	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5e:	f383 8810 	msr	PRIMASK, r3
}
 8002f62:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	228c      	movs	r2, #140	@ 0x8c
 8002f68:	2120      	movs	r1, #32
 8002f6a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	4013      	ands	r3, r2
 8002f84:	d018      	beq.n	8002fb8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f86:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f90:	2301      	movs	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f383 8810 	msr	PRIMASK, r3
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4928      	ldr	r1, [pc, #160]	@ (8003048 <UART_RxISR_8BIT+0x1b4>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	f383 8810 	msr	PRIMASK, r3
}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d12f      	bne.n	8003020 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fca:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f383 8810 	msr	PRIMASK, r3
}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	438a      	bics	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	2210      	movs	r2, #16
 8003000:	4013      	ands	r3, r2
 8003002:	2b10      	cmp	r3, #16
 8003004:	d103      	bne.n	800300e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2210      	movs	r2, #16
 800300c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	225c      	movs	r2, #92	@ 0x5c
 8003012:	5a9a      	ldrh	r2, [r3, r2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0011      	movs	r1, r2
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff f9ef 	bl	80023fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800301e:	e00c      	b.n	800303a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f7fd fb78 	bl	8000718 <HAL_UART_RxCpltCallback>
}
 8003028:	e007      	b.n	800303a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2108      	movs	r1, #8
 8003036:	430a      	orrs	r2, r1
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b014      	add	sp, #80	@ 0x50
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	fffffedf 	.word	0xfffffedf
 8003048:	fbffffff 	.word	0xfbffffff

0800304c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b094      	sub	sp, #80	@ 0x50
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003054:	204e      	movs	r0, #78	@ 0x4e
 8003056:	183b      	adds	r3, r7, r0
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	2160      	movs	r1, #96	@ 0x60
 800305c:	5a52      	ldrh	r2, [r2, r1]
 800305e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	228c      	movs	r2, #140	@ 0x8c
 8003064:	589b      	ldr	r3, [r3, r2]
 8003066:	2b22      	cmp	r3, #34	@ 0x22
 8003068:	d000      	beq.n	800306c <UART_RxISR_16BIT+0x20>
 800306a:	e0ba      	b.n	80031e2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003072:	214c      	movs	r1, #76	@ 0x4c
 8003074:	187b      	adds	r3, r7, r1
 8003076:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800307e:	187b      	adds	r3, r7, r1
 8003080:	183a      	adds	r2, r7, r0
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	4013      	ands	r3, r2
 8003088:	b29a      	uxth	r2, r3
 800308a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800308c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	1c9a      	adds	r2, r3, #2
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	225e      	movs	r2, #94	@ 0x5e
 800309c:	5a9b      	ldrh	r3, [r3, r2]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b299      	uxth	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	225e      	movs	r2, #94	@ 0x5e
 80030a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	225e      	movs	r2, #94	@ 0x5e
 80030ae:	5a9b      	ldrh	r3, [r3, r2]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d000      	beq.n	80030b8 <UART_RxISR_16BIT+0x6c>
 80030b6:	e09c      	b.n	80031f2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	623b      	str	r3, [r7, #32]
  return(result);
 80030be:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c2:	2301      	movs	r3, #1
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4948      	ldr	r1, [pc, #288]	@ (80031fc <UART_RxISR_16BIT+0x1b0>)
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80030f4:	2301      	movs	r3, #1
 80030f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003116:	f383 8810 	msr	PRIMASK, r3
}
 800311a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	228c      	movs	r2, #140	@ 0x8c
 8003120:	2120      	movs	r1, #32
 8003122:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	4013      	ands	r3, r2
 800313c:	d018      	beq.n	8003170 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	617b      	str	r3, [r7, #20]
  return(result);
 8003144:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003148:	2301      	movs	r3, #1
 800314a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4928      	ldr	r1, [pc, #160]	@ (8003200 <UART_RxISR_16BIT+0x1b4>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d12f      	bne.n	80031d8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317e:	f3ef 8310 	mrs	r3, PRIMASK
 8003182:	60bb      	str	r3, [r7, #8]
  return(result);
 8003184:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003188:	2301      	movs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f383 8810 	msr	PRIMASK, r3
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2110      	movs	r1, #16
 80031a0:	438a      	bics	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2210      	movs	r2, #16
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d103      	bne.n	80031c6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2210      	movs	r2, #16
 80031c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	225c      	movs	r2, #92	@ 0x5c
 80031ca:	5a9a      	ldrh	r2, [r3, r2]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0011      	movs	r1, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff f913 	bl	80023fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031d6:	e00c      	b.n	80031f2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fd fa9c 	bl	8000718 <HAL_UART_RxCpltCallback>
}
 80031e0:	e007      	b.n	80031f2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2108      	movs	r1, #8
 80031ee:	430a      	orrs	r2, r1
 80031f0:	619a      	str	r2, [r3, #24]
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b014      	add	sp, #80	@ 0x50
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	fffffedf 	.word	0xfffffedf
 8003200:	fbffffff 	.word	0xfbffffff

08003204 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0a0      	sub	sp, #128	@ 0x80
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800320c:	237a      	movs	r3, #122	@ 0x7a
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	2160      	movs	r1, #96	@ 0x60
 8003214:	5a52      	ldrh	r2, [r2, r1]
 8003216:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	228c      	movs	r2, #140	@ 0x8c
 8003234:	589b      	ldr	r3, [r3, r2]
 8003236:	2b22      	cmp	r3, #34	@ 0x22
 8003238:	d000      	beq.n	800323c <UART_RxISR_8BIT_FIFOEN+0x38>
 800323a:	e165      	b.n	8003508 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800323c:	236e      	movs	r3, #110	@ 0x6e
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	2168      	movs	r1, #104	@ 0x68
 8003244:	5a52      	ldrh	r2, [r2, r1]
 8003246:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003248:	e10c      	b.n	8003464 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003250:	216c      	movs	r1, #108	@ 0x6c
 8003252:	187b      	adds	r3, r7, r1
 8003254:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003256:	187b      	adds	r3, r7, r1
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	237a      	movs	r3, #122	@ 0x7a
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b2d9      	uxtb	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	400a      	ands	r2, r1
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	225e      	movs	r2, #94	@ 0x5e
 800327c:	5a9b      	ldrh	r3, [r3, r2]
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b299      	uxth	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	225e      	movs	r2, #94	@ 0x5e
 8003288:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003292:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003294:	2207      	movs	r2, #7
 8003296:	4013      	ands	r3, r2
 8003298:	d049      	beq.n	800332e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800329a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800329c:	2201      	movs	r2, #1
 800329e:	4013      	ands	r3, r2
 80032a0:	d010      	beq.n	80032c4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80032a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4013      	ands	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2290      	movs	r2, #144	@ 0x90
 80032b8:	589b      	ldr	r3, [r3, r2]
 80032ba:	2201      	movs	r2, #1
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2190      	movs	r1, #144	@ 0x90
 80032c2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032c6:	2202      	movs	r2, #2
 80032c8:	4013      	ands	r3, r2
 80032ca:	d00f      	beq.n	80032ec <UART_RxISR_8BIT_FIFOEN+0xe8>
 80032cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	d00b      	beq.n	80032ec <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2202      	movs	r2, #2
 80032da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2290      	movs	r2, #144	@ 0x90
 80032e0:	589b      	ldr	r3, [r3, r2]
 80032e2:	2204      	movs	r2, #4
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2190      	movs	r1, #144	@ 0x90
 80032ea:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	d00f      	beq.n	8003314 <UART_RxISR_8BIT_FIFOEN+0x110>
 80032f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032f6:	2201      	movs	r2, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d00b      	beq.n	8003314 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2204      	movs	r2, #4
 8003302:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2290      	movs	r2, #144	@ 0x90
 8003308:	589b      	ldr	r3, [r3, r2]
 800330a:	2202      	movs	r2, #2
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2190      	movs	r1, #144	@ 0x90
 8003312:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2290      	movs	r2, #144	@ 0x90
 8003318:	589b      	ldr	r3, [r3, r2]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff f863 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2290      	movs	r2, #144	@ 0x90
 800332a:	2100      	movs	r1, #0
 800332c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	225e      	movs	r2, #94	@ 0x5e
 8003332:	5a9b      	ldrh	r3, [r3, r2]
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d000      	beq.n	800333c <UART_RxISR_8BIT_FIFOEN+0x138>
 800333a:	e093      	b.n	8003464 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333c:	f3ef 8310 	mrs	r3, PRIMASK
 8003340:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003346:	2301      	movs	r3, #1
 8003348:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	46c0      	nop			@ (mov r8, r8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4970      	ldr	r1, [pc, #448]	@ (8003520 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 800335e:	400a      	ands	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003364:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003368:	f383 8810 	msr	PRIMASK, r3
}
 800336c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336e:	f3ef 8310 	mrs	r3, PRIMASK
 8003372:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8003374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003376:	667b      	str	r3, [r7, #100]	@ 0x64
 8003378:	2301      	movs	r3, #1
 800337a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4965      	ldr	r1, [pc, #404]	@ (8003524 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003390:	400a      	ands	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	228c      	movs	r2, #140	@ 0x8c
 80033a4:	2120      	movs	r1, #32
 80033a6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	041b      	lsls	r3, r3, #16
 80033be:	4013      	ands	r3, r2
 80033c0:	d018      	beq.n	80033f4 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c2:	f3ef 8310 	mrs	r3, PRIMASK
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80033c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80033cc:	2301      	movs	r3, #1
 80033ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4951      	ldr	r1, [pc, #324]	@ (8003528 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d12f      	bne.n	800345c <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003402:	f3ef 8310 	mrs	r3, PRIMASK
 8003406:	623b      	str	r3, [r7, #32]
  return(result);
 8003408:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800340c:	2301      	movs	r3, #1
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2110      	movs	r1, #16
 8003424:	438a      	bics	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2210      	movs	r2, #16
 800343c:	4013      	ands	r3, r2
 800343e:	2b10      	cmp	r3, #16
 8003440:	d103      	bne.n	800344a <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2210      	movs	r2, #16
 8003448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	225c      	movs	r2, #92	@ 0x5c
 800344e:	5a9a      	ldrh	r2, [r3, r2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f7fe ffd1 	bl	80023fc <HAL_UARTEx_RxEventCallback>
 800345a:	e003      	b.n	8003464 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0018      	movs	r0, r3
 8003460:	f7fd f95a 	bl	8000718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003464:	236e      	movs	r3, #110	@ 0x6e
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <UART_RxISR_8BIT_FIFOEN+0x274>
 800346e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003470:	2220      	movs	r2, #32
 8003472:	4013      	ands	r3, r2
 8003474:	d000      	beq.n	8003478 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003476:	e6e8      	b.n	800324a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003478:	205a      	movs	r0, #90	@ 0x5a
 800347a:	183b      	adds	r3, r7, r0
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	215e      	movs	r1, #94	@ 0x5e
 8003480:	5a52      	ldrh	r2, [r2, r1]
 8003482:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003484:	0001      	movs	r1, r0
 8003486:	187b      	adds	r3, r7, r1
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d044      	beq.n	8003518 <UART_RxISR_8BIT_FIFOEN+0x314>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2268      	movs	r2, #104	@ 0x68
 8003492:	5a9b      	ldrh	r3, [r3, r2]
 8003494:	187a      	adds	r2, r7, r1
 8003496:	8812      	ldrh	r2, [r2, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d23d      	bcs.n	8003518 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349c:	f3ef 8310 	mrs	r3, PRIMASK
 80034a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80034a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a6:	2301      	movs	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	491b      	ldr	r1, [pc, #108]	@ (800352c <UART_RxISR_8BIT_FIFOEN+0x328>)
 80034be:	400a      	ands	r2, r1
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80034d2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d4:	f3ef 8310 	mrs	r3, PRIMASK
 80034d8:	617b      	str	r3, [r7, #20]
  return(result);
 80034da:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80034dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80034de:	2301      	movs	r3, #1
 80034e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f383 8810 	msr	PRIMASK, r3
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2120      	movs	r1, #32
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f383 8810 	msr	PRIMASK, r3
}
 8003504:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003506:	e007      	b.n	8003518 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2108      	movs	r1, #8
 8003514:	430a      	orrs	r2, r1
 8003516:	619a      	str	r2, [r3, #24]
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b020      	add	sp, #128	@ 0x80
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fffffeff 	.word	0xfffffeff
 8003524:	effffffe 	.word	0xeffffffe
 8003528:	fbffffff 	.word	0xfbffffff
 800352c:	efffffff 	.word	0xefffffff
 8003530:	08002e95 	.word	0x08002e95

08003534 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0a2      	sub	sp, #136	@ 0x88
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800353c:	2382      	movs	r3, #130	@ 0x82
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	2160      	movs	r1, #96	@ 0x60
 8003544:	5a52      	ldrh	r2, [r2, r1]
 8003546:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	2284      	movs	r2, #132	@ 0x84
 8003550:	18ba      	adds	r2, r7, r2
 8003552:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	228c      	movs	r2, #140	@ 0x8c
 8003568:	589b      	ldr	r3, [r3, r2]
 800356a:	2b22      	cmp	r3, #34	@ 0x22
 800356c:	d000      	beq.n	8003570 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800356e:	e16f      	b.n	8003850 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003570:	2376      	movs	r3, #118	@ 0x76
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	2168      	movs	r1, #104	@ 0x68
 8003578:	5a52      	ldrh	r2, [r2, r1]
 800357a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800357c:	e114      	b.n	80037a8 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003584:	2174      	movs	r1, #116	@ 0x74
 8003586:	187b      	adds	r3, r7, r1
 8003588:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003590:	187b      	adds	r3, r7, r1
 8003592:	2282      	movs	r2, #130	@ 0x82
 8003594:	18ba      	adds	r2, r7, r2
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	8812      	ldrh	r2, [r2, #0]
 800359a:	4013      	ands	r3, r2
 800359c:	b29a      	uxth	r2, r3
 800359e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	225e      	movs	r2, #94	@ 0x5e
 80035b0:	5a9b      	ldrh	r3, [r3, r2]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b299      	uxth	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	225e      	movs	r2, #94	@ 0x5e
 80035bc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2184      	movs	r1, #132	@ 0x84
 80035c6:	187a      	adds	r2, r7, r1
 80035c8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80035ca:	187b      	adds	r3, r7, r1
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2207      	movs	r2, #7
 80035d0:	4013      	ands	r3, r2
 80035d2:	d04e      	beq.n	8003672 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2201      	movs	r2, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	d010      	beq.n	8003600 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80035de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035e0:	2380      	movs	r3, #128	@ 0x80
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00b      	beq.n	8003600 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2290      	movs	r2, #144	@ 0x90
 80035f4:	589b      	ldr	r3, [r3, r2]
 80035f6:	2201      	movs	r2, #1
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2190      	movs	r1, #144	@ 0x90
 80035fe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003600:	2384      	movs	r3, #132	@ 0x84
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2202      	movs	r2, #2
 8003608:	4013      	ands	r3, r2
 800360a:	d00f      	beq.n	800362c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800360c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d00b      	beq.n	800362c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2202      	movs	r2, #2
 800361a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2290      	movs	r2, #144	@ 0x90
 8003620:	589b      	ldr	r3, [r3, r2]
 8003622:	2204      	movs	r2, #4
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2190      	movs	r1, #144	@ 0x90
 800362a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800362c:	2384      	movs	r3, #132	@ 0x84
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2204      	movs	r2, #4
 8003634:	4013      	ands	r3, r2
 8003636:	d00f      	beq.n	8003658 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800363a:	2201      	movs	r2, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d00b      	beq.n	8003658 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2204      	movs	r2, #4
 8003646:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2290      	movs	r2, #144	@ 0x90
 800364c:	589b      	ldr	r3, [r3, r2]
 800364e:	2202      	movs	r2, #2
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2190      	movs	r1, #144	@ 0x90
 8003656:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2290      	movs	r2, #144	@ 0x90
 800365c:	589b      	ldr	r3, [r3, r2]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f7fe fec1 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2290      	movs	r2, #144	@ 0x90
 800366e:	2100      	movs	r1, #0
 8003670:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	225e      	movs	r2, #94	@ 0x5e
 8003676:	5a9b      	ldrh	r3, [r3, r2]
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d000      	beq.n	8003680 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800367e:	e093      	b.n	80037a8 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003688:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800368a:	2301      	movs	r3, #1
 800368c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4971      	ldr	r1, [pc, #452]	@ (8003868 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b2:	f3ef 8310 	mrs	r3, PRIMASK
 80036b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80036b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036bc:	2301      	movs	r3, #1
 80036be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4966      	ldr	r1, [pc, #408]	@ (800386c <UART_RxISR_16BIT_FIFOEN+0x338>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036da:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	228c      	movs	r2, #140	@ 0x8c
 80036e8:	2120      	movs	r1, #32
 80036ea:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	4013      	ands	r3, r2
 8003704:	d018      	beq.n	8003738 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003706:	f3ef 8310 	mrs	r3, PRIMASK
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800370e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003710:	2301      	movs	r3, #1
 8003712:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4952      	ldr	r1, [pc, #328]	@ (8003870 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003728:	400a      	ands	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800372e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d12f      	bne.n	80037a0 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003746:	f3ef 8310 	mrs	r3, PRIMASK
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003750:	2301      	movs	r3, #1
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	f383 8810 	msr	PRIMASK, r3
}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2110      	movs	r1, #16
 8003768:	438a      	bics	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2210      	movs	r2, #16
 8003780:	4013      	ands	r3, r2
 8003782:	2b10      	cmp	r3, #16
 8003784:	d103      	bne.n	800378e <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2210      	movs	r2, #16
 800378c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	225c      	movs	r2, #92	@ 0x5c
 8003792:	5a9a      	ldrh	r2, [r3, r2]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0011      	movs	r1, r2
 8003798:	0018      	movs	r0, r3
 800379a:	f7fe fe2f 	bl	80023fc <HAL_UARTEx_RxEventCallback>
 800379e:	e003      	b.n	80037a8 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fc ffb8 	bl	8000718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80037a8:	2376      	movs	r3, #118	@ 0x76
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80037b2:	2384      	movs	r3, #132	@ 0x84
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2220      	movs	r2, #32
 80037ba:	4013      	ands	r3, r2
 80037bc:	d000      	beq.n	80037c0 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80037be:	e6de      	b.n	800357e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80037c0:	205e      	movs	r0, #94	@ 0x5e
 80037c2:	183b      	adds	r3, r7, r0
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	215e      	movs	r1, #94	@ 0x5e
 80037c8:	5a52      	ldrh	r2, [r2, r1]
 80037ca:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80037cc:	0001      	movs	r1, r0
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d044      	beq.n	8003860 <UART_RxISR_16BIT_FIFOEN+0x32c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2268      	movs	r2, #104	@ 0x68
 80037da:	5a9b      	ldrh	r3, [r3, r2]
 80037dc:	187a      	adds	r2, r7, r1
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d23d      	bcs.n	8003860 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80037ea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80037ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ee:	2301      	movs	r3, #1
 80037f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	491b      	ldr	r1, [pc, #108]	@ (8003874 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003806:	400a      	ands	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a17      	ldr	r2, [pc, #92]	@ (8003878 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800381a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381c:	f3ef 8310 	mrs	r3, PRIMASK
 8003820:	61bb      	str	r3, [r7, #24]
  return(result);
 8003822:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003824:	657b      	str	r3, [r7, #84]	@ 0x54
 8003826:	2301      	movs	r3, #1
 8003828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2120      	movs	r1, #32
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800384e:	e007      	b.n	8003860 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2108      	movs	r1, #8
 800385c:	430a      	orrs	r2, r1
 800385e:	619a      	str	r2, [r3, #24]
}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b022      	add	sp, #136	@ 0x88
 8003866:	bd80      	pop	{r7, pc}
 8003868:	fffffeff 	.word	0xfffffeff
 800386c:	effffffe 	.word	0xeffffffe
 8003870:	fbffffff 	.word	0xfbffffff
 8003874:	efffffff 	.word	0xefffffff
 8003878:	0800304d 	.word	0x0800304d

0800387c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2284      	movs	r2, #132	@ 0x84
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80038be:	2302      	movs	r3, #2
 80038c0:	e027      	b.n	8003912 <HAL_UARTEx_DisableFifoMode+0x66>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2284      	movs	r2, #132	@ 0x84
 80038c6:	2101      	movs	r1, #1
 80038c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2288      	movs	r2, #136	@ 0x88
 80038ce:	2124      	movs	r1, #36	@ 0x24
 80038d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2101      	movs	r1, #1
 80038e6:	438a      	bics	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a0b      	ldr	r2, [pc, #44]	@ (800391c <HAL_UARTEx_DisableFifoMode+0x70>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2288      	movs	r2, #136	@ 0x88
 8003904:	2120      	movs	r1, #32
 8003906:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2284      	movs	r2, #132	@ 0x84
 800390c:	2100      	movs	r1, #0
 800390e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	0018      	movs	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	b004      	add	sp, #16
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	dfffffff 	.word	0xdfffffff

08003920 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2284      	movs	r2, #132	@ 0x84
 800392e:	5c9b      	ldrb	r3, [r3, r2]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003934:	2302      	movs	r3, #2
 8003936:	e02e      	b.n	8003996 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2284      	movs	r2, #132	@ 0x84
 800393c:	2101      	movs	r1, #1
 800393e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2288      	movs	r2, #136	@ 0x88
 8003944:	2124      	movs	r1, #36	@ 0x24
 8003946:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	438a      	bics	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	08d9      	lsrs	r1, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 f854 	bl	8003a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2288      	movs	r2, #136	@ 0x88
 8003988:	2120      	movs	r1, #32
 800398a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2284      	movs	r2, #132	@ 0x84
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b004      	add	sp, #16
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2284      	movs	r2, #132	@ 0x84
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e02f      	b.n	8003a18 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2284      	movs	r2, #132	@ 0x84
 80039bc:	2101      	movs	r1, #1
 80039be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2288      	movs	r2, #136	@ 0x88
 80039c4:	2124      	movs	r1, #36	@ 0x24
 80039c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	438a      	bics	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a20 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 f813 	bl	8003a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2288      	movs	r2, #136	@ 0x88
 8003a0a:	2120      	movs	r1, #32
 8003a0c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2284      	movs	r2, #132	@ 0x84
 8003a12:	2100      	movs	r1, #0
 8003a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b004      	add	sp, #16
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	f1ffffff 	.word	0xf1ffffff

08003a24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d108      	bne.n	8003a46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	226a      	movs	r2, #106	@ 0x6a
 8003a38:	2101      	movs	r1, #1
 8003a3a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2268      	movs	r2, #104	@ 0x68
 8003a40:	2101      	movs	r1, #1
 8003a42:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a44:	e043      	b.n	8003ace <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a46:	260f      	movs	r6, #15
 8003a48:	19bb      	adds	r3, r7, r6
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a4e:	200e      	movs	r0, #14
 8003a50:	183b      	adds	r3, r7, r0
 8003a52:	2208      	movs	r2, #8
 8003a54:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	0e5b      	lsrs	r3, r3, #25
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	240d      	movs	r4, #13
 8003a62:	193b      	adds	r3, r7, r4
 8003a64:	2107      	movs	r1, #7
 8003a66:	400a      	ands	r2, r1
 8003a68:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	0f5b      	lsrs	r3, r3, #29
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	250c      	movs	r5, #12
 8003a76:	197b      	adds	r3, r7, r5
 8003a78:	2107      	movs	r1, #7
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a7e:	183b      	adds	r3, r7, r0
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	197a      	adds	r2, r7, r5
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	4914      	ldr	r1, [pc, #80]	@ (8003ad8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a88:	5c8a      	ldrb	r2, [r1, r2]
 8003a8a:	435a      	muls	r2, r3
 8003a8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a8e:	197b      	adds	r3, r7, r5
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <UARTEx_SetNbDataToProcess+0xb8>)
 8003a94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a96:	0019      	movs	r1, r3
 8003a98:	f7fc fbce 	bl	8000238 <__divsi3>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	b299      	uxth	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	226a      	movs	r2, #106	@ 0x6a
 8003aa4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aa6:	19bb      	adds	r3, r7, r6
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	193a      	adds	r2, r7, r4
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	490a      	ldr	r1, [pc, #40]	@ (8003ad8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ab0:	5c8a      	ldrb	r2, [r1, r2]
 8003ab2:	435a      	muls	r2, r3
 8003ab4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	4a08      	ldr	r2, [pc, #32]	@ (8003adc <UARTEx_SetNbDataToProcess+0xb8>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003abe:	0019      	movs	r1, r3
 8003ac0:	f7fc fbba 	bl	8000238 <__divsi3>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	b299      	uxth	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2268      	movs	r2, #104	@ 0x68
 8003acc:	5299      	strh	r1, [r3, r2]
}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b005      	add	sp, #20
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	08004770 	.word	0x08004770
 8003adc:	08004778 	.word	0x08004778

08003ae0 <LL_GPIO_SetPinMode>:
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6819      	ldr	r1, [r3, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	435b      	muls	r3, r3
 8003af4:	001a      	movs	r2, r3
 8003af6:	0013      	movs	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	43db      	mvns	r3, r3
 8003afe:	400b      	ands	r3, r1
 8003b00:	001a      	movs	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	435b      	muls	r3, r3
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	434b      	muls	r3, r1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <LL_GPIO_SetPinOutputType>:
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	43d2      	mvns	r2, r2
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	434b      	muls	r3, r1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	605a      	str	r2, [r3, #4]
}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <LL_GPIO_SetPinSpeed>:
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	435b      	muls	r3, r3
 8003b56:	001a      	movs	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	189b      	adds	r3, r3, r2
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	400b      	ands	r3, r1
 8003b62:	001a      	movs	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	435b      	muls	r3, r3
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	434b      	muls	r3, r1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <LL_GPIO_SetPinPull>:
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	68d9      	ldr	r1, [r3, #12]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	435b      	muls	r3, r3
 8003b8e:	001a      	movs	r2, r3
 8003b90:	0013      	movs	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	189b      	adds	r3, r3, r2
 8003b96:	43db      	mvns	r3, r3
 8003b98:	400b      	ands	r3, r1
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	435b      	muls	r3, r3
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	434b      	muls	r3, r1
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	60da      	str	r2, [r3, #12]
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <LL_GPIO_SetAFPin_0_7>:
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a19      	ldr	r1, [r3, #32]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	435b      	muls	r3, r3
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4353      	muls	r3, r2
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	435a      	muls	r2, r3
 8003bce:	0013      	movs	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	001a      	movs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	435b      	muls	r3, r3
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	434b      	muls	r3, r1
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	434b      	muls	r3, r1
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	434b      	muls	r3, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	621a      	str	r2, [r3, #32]
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b004      	add	sp, #16
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <LL_GPIO_SetAFPin_8_15>:
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	0a12      	lsrs	r2, r2, #8
 8003c10:	4353      	muls	r3, r2
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	0a12      	lsrs	r2, r2, #8
 8003c16:	4353      	muls	r3, r2
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	0a12      	lsrs	r2, r2, #8
 8003c1c:	435a      	muls	r2, r3
 8003c1e:	0013      	movs	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	43db      	mvns	r3, r3
 8003c26:	400b      	ands	r3, r1
 8003c28:	001a      	movs	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	0a09      	lsrs	r1, r1, #8
 8003c32:	434b      	muls	r3, r1
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	0a09      	lsrs	r1, r1, #8
 8003c38:	434b      	muls	r3, r1
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	0a09      	lsrs	r1, r1, #8
 8003c3e:	434b      	muls	r3, r1
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	434b      	muls	r3, r1
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003c60:	e047      	b.n	8003cf2 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4091      	lsls	r1, r2
 8003c6c:	000a      	movs	r2, r1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d039      	beq.n	8003cec <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d003      	beq.n	8003c88 <LL_GPIO_Init+0x36>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d10d      	bne.n	8003ca4 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7ff ff56 	bl	8003b42 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7ff ff3a 	bl	8003b18 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff ff64 	bl	8003b7a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d111      	bne.n	8003cde <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2bff      	cmp	r3, #255	@ 0xff
 8003cbe:	d807      	bhi.n	8003cd0 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7ff ff72 	bl	8003bb2 <LL_GPIO_SetAFPin_0_7>
 8003cce:	e006      	b.n	8003cde <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7ff ff8d 	bl	8003bf8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7ff fefa 	bl	8003ae0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	40da      	lsrs	r2, r3
 8003cfa:	1e13      	subs	r3, r2, #0
 8003cfc:	d1b1      	bne.n	8003c62 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b004      	add	sp, #16
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d10:	4b03      	ldr	r3, [pc, #12]	@ (8003d20 <LL_SetSystemCoreClock+0x18>)
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	20000034 	.word	0x20000034

08003d24 <siprintf>:
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	b500      	push	{lr}
 8003d28:	490b      	ldr	r1, [pc, #44]	@ (8003d58 <siprintf+0x34>)
 8003d2a:	b09c      	sub	sp, #112	@ 0x70
 8003d2c:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d2e:	9002      	str	r0, [sp, #8]
 8003d30:	9006      	str	r0, [sp, #24]
 8003d32:	9107      	str	r1, [sp, #28]
 8003d34:	9104      	str	r1, [sp, #16]
 8003d36:	4809      	ldr	r0, [pc, #36]	@ (8003d5c <siprintf+0x38>)
 8003d38:	4909      	ldr	r1, [pc, #36]	@ (8003d60 <siprintf+0x3c>)
 8003d3a:	cb04      	ldmia	r3!, {r2}
 8003d3c:	9105      	str	r1, [sp, #20]
 8003d3e:	6800      	ldr	r0, [r0, #0]
 8003d40:	a902      	add	r1, sp, #8
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	f000 f9b4 	bl	80040b0 <_svfiprintf_r>
 8003d48:	2200      	movs	r2, #0
 8003d4a:	9b02      	ldr	r3, [sp, #8]
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	b01c      	add	sp, #112	@ 0x70
 8003d50:	bc08      	pop	{r3}
 8003d52:	b003      	add	sp, #12
 8003d54:	4718      	bx	r3
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	7fffffff 	.word	0x7fffffff
 8003d5c:	20000040 	.word	0x20000040
 8003d60:	ffff0208 	.word	0xffff0208

08003d64 <memset>:
 8003d64:	0003      	movs	r3, r0
 8003d66:	1882      	adds	r2, r0, r2
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <memset+0xa>
 8003d6c:	4770      	bx	lr
 8003d6e:	7019      	strb	r1, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	e7f9      	b.n	8003d68 <memset+0x4>

08003d74 <strstr>:
 8003d74:	780a      	ldrb	r2, [r1, #0]
 8003d76:	b530      	push	{r4, r5, lr}
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	d10c      	bne.n	8003d96 <strstr+0x22>
 8003d7c:	bd30      	pop	{r4, r5, pc}
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d108      	bne.n	8003d94 <strstr+0x20>
 8003d82:	2301      	movs	r3, #1
 8003d84:	5ccc      	ldrb	r4, [r1, r3]
 8003d86:	2c00      	cmp	r4, #0
 8003d88:	d0f8      	beq.n	8003d7c <strstr+0x8>
 8003d8a:	5cc5      	ldrb	r5, [r0, r3]
 8003d8c:	42a5      	cmp	r5, r4
 8003d8e:	d101      	bne.n	8003d94 <strstr+0x20>
 8003d90:	3301      	adds	r3, #1
 8003d92:	e7f7      	b.n	8003d84 <strstr+0x10>
 8003d94:	3001      	adds	r0, #1
 8003d96:	7803      	ldrb	r3, [r0, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <strstr+0xa>
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	e7ed      	b.n	8003d7c <strstr+0x8>

08003da0 <__errno>:
 8003da0:	4b01      	ldr	r3, [pc, #4]	@ (8003da8 <__errno+0x8>)
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	4770      	bx	lr
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	20000040 	.word	0x20000040

08003dac <__libc_init_array>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	2600      	movs	r6, #0
 8003db0:	4c0c      	ldr	r4, [pc, #48]	@ (8003de4 <__libc_init_array+0x38>)
 8003db2:	4d0d      	ldr	r5, [pc, #52]	@ (8003de8 <__libc_init_array+0x3c>)
 8003db4:	1b64      	subs	r4, r4, r5
 8003db6:	10a4      	asrs	r4, r4, #2
 8003db8:	42a6      	cmp	r6, r4
 8003dba:	d109      	bne.n	8003dd0 <__libc_init_array+0x24>
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	f000 fc65 	bl	800468c <_init>
 8003dc2:	4c0a      	ldr	r4, [pc, #40]	@ (8003dec <__libc_init_array+0x40>)
 8003dc4:	4d0a      	ldr	r5, [pc, #40]	@ (8003df0 <__libc_init_array+0x44>)
 8003dc6:	1b64      	subs	r4, r4, r5
 8003dc8:	10a4      	asrs	r4, r4, #2
 8003dca:	42a6      	cmp	r6, r4
 8003dcc:	d105      	bne.n	8003dda <__libc_init_array+0x2e>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	00b3      	lsls	r3, r6, #2
 8003dd2:	58eb      	ldr	r3, [r5, r3]
 8003dd4:	4798      	blx	r3
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	e7ee      	b.n	8003db8 <__libc_init_array+0xc>
 8003dda:	00b3      	lsls	r3, r6, #2
 8003ddc:	58eb      	ldr	r3, [r5, r3]
 8003dde:	4798      	blx	r3
 8003de0:	3601      	adds	r6, #1
 8003de2:	e7f2      	b.n	8003dca <__libc_init_array+0x1e>
 8003de4:	080047b4 	.word	0x080047b4
 8003de8:	080047b4 	.word	0x080047b4
 8003dec:	080047b8 	.word	0x080047b8
 8003df0:	080047b4 	.word	0x080047b4

08003df4 <__retarget_lock_acquire_recursive>:
 8003df4:	4770      	bx	lr

08003df6 <__retarget_lock_release_recursive>:
 8003df6:	4770      	bx	lr

08003df8 <_free_r>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	0005      	movs	r5, r0
 8003dfc:	1e0c      	subs	r4, r1, #0
 8003dfe:	d010      	beq.n	8003e22 <_free_r+0x2a>
 8003e00:	3c04      	subs	r4, #4
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da00      	bge.n	8003e0a <_free_r+0x12>
 8003e08:	18e4      	adds	r4, r4, r3
 8003e0a:	0028      	movs	r0, r5
 8003e0c:	f000 f8e0 	bl	8003fd0 <__malloc_lock>
 8003e10:	4a1d      	ldr	r2, [pc, #116]	@ (8003e88 <_free_r+0x90>)
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <_free_r+0x2c>
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	6014      	str	r4, [r2, #0]
 8003e1c:	0028      	movs	r0, r5
 8003e1e:	f000 f8df 	bl	8003fe0 <__malloc_unlock>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	42a3      	cmp	r3, r4
 8003e26:	d908      	bls.n	8003e3a <_free_r+0x42>
 8003e28:	6820      	ldr	r0, [r4, #0]
 8003e2a:	1821      	adds	r1, r4, r0
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d1f3      	bne.n	8003e18 <_free_r+0x20>
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	1809      	adds	r1, r1, r0
 8003e36:	6021      	str	r1, [r4, #0]
 8003e38:	e7ee      	b.n	8003e18 <_free_r+0x20>
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <_free_r+0x4e>
 8003e42:	42a3      	cmp	r3, r4
 8003e44:	d9f9      	bls.n	8003e3a <_free_r+0x42>
 8003e46:	6811      	ldr	r1, [r2, #0]
 8003e48:	1850      	adds	r0, r2, r1
 8003e4a:	42a0      	cmp	r0, r4
 8003e4c:	d10b      	bne.n	8003e66 <_free_r+0x6e>
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	1809      	adds	r1, r1, r0
 8003e52:	1850      	adds	r0, r2, r1
 8003e54:	6011      	str	r1, [r2, #0]
 8003e56:	4283      	cmp	r3, r0
 8003e58:	d1e0      	bne.n	8003e1c <_free_r+0x24>
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	1841      	adds	r1, r0, r1
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	6053      	str	r3, [r2, #4]
 8003e64:	e7da      	b.n	8003e1c <_free_r+0x24>
 8003e66:	42a0      	cmp	r0, r4
 8003e68:	d902      	bls.n	8003e70 <_free_r+0x78>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	e7d5      	b.n	8003e1c <_free_r+0x24>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	1821      	adds	r1, r4, r0
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d103      	bne.n	8003e80 <_free_r+0x88>
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	1809      	adds	r1, r1, r0
 8003e7e:	6021      	str	r1, [r4, #0]
 8003e80:	6063      	str	r3, [r4, #4]
 8003e82:	6054      	str	r4, [r2, #4]
 8003e84:	e7ca      	b.n	8003e1c <_free_r+0x24>
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	200003b8 	.word	0x200003b8

08003e8c <sbrk_aligned>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8003ecc <sbrk_aligned+0x40>)
 8003e90:	000d      	movs	r5, r1
 8003e92:	6831      	ldr	r1, [r6, #0]
 8003e94:	0004      	movs	r4, r0
 8003e96:	2900      	cmp	r1, #0
 8003e98:	d102      	bne.n	8003ea0 <sbrk_aligned+0x14>
 8003e9a:	f000 fb99 	bl	80045d0 <_sbrk_r>
 8003e9e:	6030      	str	r0, [r6, #0]
 8003ea0:	0029      	movs	r1, r5
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f000 fb94 	bl	80045d0 <_sbrk_r>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <sbrk_aligned+0x28>
 8003eac:	2501      	movs	r5, #1
 8003eae:	426d      	negs	r5, r5
 8003eb0:	0028      	movs	r0, r5
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	1cc5      	adds	r5, r0, #3
 8003eb8:	439d      	bics	r5, r3
 8003eba:	42a8      	cmp	r0, r5
 8003ebc:	d0f8      	beq.n	8003eb0 <sbrk_aligned+0x24>
 8003ebe:	1a29      	subs	r1, r5, r0
 8003ec0:	0020      	movs	r0, r4
 8003ec2:	f000 fb85 	bl	80045d0 <_sbrk_r>
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d1f2      	bne.n	8003eb0 <sbrk_aligned+0x24>
 8003eca:	e7ef      	b.n	8003eac <sbrk_aligned+0x20>
 8003ecc:	200003b4 	.word	0x200003b4

08003ed0 <_malloc_r>:
 8003ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	1ccb      	adds	r3, r1, #3
 8003ed6:	4393      	bics	r3, r2
 8003ed8:	3308      	adds	r3, #8
 8003eda:	0005      	movs	r5, r0
 8003edc:	001f      	movs	r7, r3
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d234      	bcs.n	8003f4c <_malloc_r+0x7c>
 8003ee2:	270c      	movs	r7, #12
 8003ee4:	42b9      	cmp	r1, r7
 8003ee6:	d833      	bhi.n	8003f50 <_malloc_r+0x80>
 8003ee8:	0028      	movs	r0, r5
 8003eea:	f000 f871 	bl	8003fd0 <__malloc_lock>
 8003eee:	4e37      	ldr	r6, [pc, #220]	@ (8003fcc <_malloc_r+0xfc>)
 8003ef0:	6833      	ldr	r3, [r6, #0]
 8003ef2:	001c      	movs	r4, r3
 8003ef4:	2c00      	cmp	r4, #0
 8003ef6:	d12f      	bne.n	8003f58 <_malloc_r+0x88>
 8003ef8:	0039      	movs	r1, r7
 8003efa:	0028      	movs	r0, r5
 8003efc:	f7ff ffc6 	bl	8003e8c <sbrk_aligned>
 8003f00:	0004      	movs	r4, r0
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d15f      	bne.n	8003fc6 <_malloc_r+0xf6>
 8003f06:	6834      	ldr	r4, [r6, #0]
 8003f08:	9400      	str	r4, [sp, #0]
 8003f0a:	9b00      	ldr	r3, [sp, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d14a      	bne.n	8003fa6 <_malloc_r+0xd6>
 8003f10:	2c00      	cmp	r4, #0
 8003f12:	d052      	beq.n	8003fba <_malloc_r+0xea>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	0028      	movs	r0, r5
 8003f18:	18e3      	adds	r3, r4, r3
 8003f1a:	9900      	ldr	r1, [sp, #0]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	f000 fb57 	bl	80045d0 <_sbrk_r>
 8003f22:	9b01      	ldr	r3, [sp, #4]
 8003f24:	4283      	cmp	r3, r0
 8003f26:	d148      	bne.n	8003fba <_malloc_r+0xea>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	0028      	movs	r0, r5
 8003f2c:	1aff      	subs	r7, r7, r3
 8003f2e:	0039      	movs	r1, r7
 8003f30:	f7ff ffac 	bl	8003e8c <sbrk_aligned>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d040      	beq.n	8003fba <_malloc_r+0xea>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	6833      	ldr	r3, [r6, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d133      	bne.n	8003fae <_malloc_r+0xde>
 8003f46:	9b00      	ldr	r3, [sp, #0]
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	e019      	b.n	8003f80 <_malloc_r+0xb0>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	dac9      	bge.n	8003ee4 <_malloc_r+0x14>
 8003f50:	230c      	movs	r3, #12
 8003f52:	602b      	str	r3, [r5, #0]
 8003f54:	2000      	movs	r0, #0
 8003f56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f58:	6821      	ldr	r1, [r4, #0]
 8003f5a:	1bc9      	subs	r1, r1, r7
 8003f5c:	d420      	bmi.n	8003fa0 <_malloc_r+0xd0>
 8003f5e:	290b      	cmp	r1, #11
 8003f60:	d90a      	bls.n	8003f78 <_malloc_r+0xa8>
 8003f62:	19e2      	adds	r2, r4, r7
 8003f64:	6027      	str	r7, [r4, #0]
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	d104      	bne.n	8003f74 <_malloc_r+0xa4>
 8003f6a:	6032      	str	r2, [r6, #0]
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	6011      	str	r1, [r2, #0]
 8003f70:	6053      	str	r3, [r2, #4]
 8003f72:	e005      	b.n	8003f80 <_malloc_r+0xb0>
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	e7f9      	b.n	8003f6c <_malloc_r+0x9c>
 8003f78:	6862      	ldr	r2, [r4, #4]
 8003f7a:	42a3      	cmp	r3, r4
 8003f7c:	d10e      	bne.n	8003f9c <_malloc_r+0xcc>
 8003f7e:	6032      	str	r2, [r6, #0]
 8003f80:	0028      	movs	r0, r5
 8003f82:	f000 f82d 	bl	8003fe0 <__malloc_unlock>
 8003f86:	0020      	movs	r0, r4
 8003f88:	2207      	movs	r2, #7
 8003f8a:	300b      	adds	r0, #11
 8003f8c:	1d23      	adds	r3, r4, #4
 8003f8e:	4390      	bics	r0, r2
 8003f90:	1ac2      	subs	r2, r0, r3
 8003f92:	4298      	cmp	r0, r3
 8003f94:	d0df      	beq.n	8003f56 <_malloc_r+0x86>
 8003f96:	1a1b      	subs	r3, r3, r0
 8003f98:	50a3      	str	r3, [r4, r2]
 8003f9a:	e7dc      	b.n	8003f56 <_malloc_r+0x86>
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	e7ef      	b.n	8003f80 <_malloc_r+0xb0>
 8003fa0:	0023      	movs	r3, r4
 8003fa2:	6864      	ldr	r4, [r4, #4]
 8003fa4:	e7a6      	b.n	8003ef4 <_malloc_r+0x24>
 8003fa6:	9c00      	ldr	r4, [sp, #0]
 8003fa8:	6863      	ldr	r3, [r4, #4]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	e7ad      	b.n	8003f0a <_malloc_r+0x3a>
 8003fae:	001a      	movs	r2, r3
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	d1fb      	bne.n	8003fae <_malloc_r+0xde>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e7da      	b.n	8003f70 <_malloc_r+0xa0>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	f000 f80e 	bl	8003fe0 <__malloc_unlock>
 8003fc4:	e7c6      	b.n	8003f54 <_malloc_r+0x84>
 8003fc6:	6007      	str	r7, [r0, #0]
 8003fc8:	e7da      	b.n	8003f80 <_malloc_r+0xb0>
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	200003b8 	.word	0x200003b8

08003fd0 <__malloc_lock>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <__malloc_lock+0xc>)
 8003fd4:	f7ff ff0e 	bl	8003df4 <__retarget_lock_acquire_recursive>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	200003b0 	.word	0x200003b0

08003fe0 <__malloc_unlock>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4802      	ldr	r0, [pc, #8]	@ (8003fec <__malloc_unlock+0xc>)
 8003fe4:	f7ff ff07 	bl	8003df6 <__retarget_lock_release_recursive>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	200003b0 	.word	0x200003b0

08003ff0 <__ssputs_r>:
 8003ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff2:	688e      	ldr	r6, [r1, #8]
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	001f      	movs	r7, r3
 8003ff8:	000c      	movs	r4, r1
 8003ffa:	680b      	ldr	r3, [r1, #0]
 8003ffc:	9002      	str	r0, [sp, #8]
 8003ffe:	9203      	str	r2, [sp, #12]
 8004000:	42be      	cmp	r6, r7
 8004002:	d830      	bhi.n	8004066 <__ssputs_r+0x76>
 8004004:	210c      	movs	r1, #12
 8004006:	5e62      	ldrsh	r2, [r4, r1]
 8004008:	2190      	movs	r1, #144	@ 0x90
 800400a:	00c9      	lsls	r1, r1, #3
 800400c:	420a      	tst	r2, r1
 800400e:	d028      	beq.n	8004062 <__ssputs_r+0x72>
 8004010:	2003      	movs	r0, #3
 8004012:	6921      	ldr	r1, [r4, #16]
 8004014:	1a5b      	subs	r3, r3, r1
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	6963      	ldr	r3, [r4, #20]
 800401a:	4343      	muls	r3, r0
 800401c:	9801      	ldr	r0, [sp, #4]
 800401e:	0fdd      	lsrs	r5, r3, #31
 8004020:	18ed      	adds	r5, r5, r3
 8004022:	1c7b      	adds	r3, r7, #1
 8004024:	181b      	adds	r3, r3, r0
 8004026:	106d      	asrs	r5, r5, #1
 8004028:	42ab      	cmp	r3, r5
 800402a:	d900      	bls.n	800402e <__ssputs_r+0x3e>
 800402c:	001d      	movs	r5, r3
 800402e:	0552      	lsls	r2, r2, #21
 8004030:	d528      	bpl.n	8004084 <__ssputs_r+0x94>
 8004032:	0029      	movs	r1, r5
 8004034:	9802      	ldr	r0, [sp, #8]
 8004036:	f7ff ff4b 	bl	8003ed0 <_malloc_r>
 800403a:	1e06      	subs	r6, r0, #0
 800403c:	d02c      	beq.n	8004098 <__ssputs_r+0xa8>
 800403e:	9a01      	ldr	r2, [sp, #4]
 8004040:	6921      	ldr	r1, [r4, #16]
 8004042:	f000 fae2 	bl	800460a <memcpy>
 8004046:	89a2      	ldrh	r2, [r4, #12]
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <__ssputs_r+0xbc>)
 800404a:	401a      	ands	r2, r3
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	4313      	orrs	r3, r2
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	9b01      	ldr	r3, [sp, #4]
 8004054:	6126      	str	r6, [r4, #16]
 8004056:	18f6      	adds	r6, r6, r3
 8004058:	6026      	str	r6, [r4, #0]
 800405a:	003e      	movs	r6, r7
 800405c:	6165      	str	r5, [r4, #20]
 800405e:	1aed      	subs	r5, r5, r3
 8004060:	60a5      	str	r5, [r4, #8]
 8004062:	42be      	cmp	r6, r7
 8004064:	d900      	bls.n	8004068 <__ssputs_r+0x78>
 8004066:	003e      	movs	r6, r7
 8004068:	0032      	movs	r2, r6
 800406a:	9903      	ldr	r1, [sp, #12]
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	f000 fa9b 	bl	80045a8 <memmove>
 8004072:	2000      	movs	r0, #0
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	1b9b      	subs	r3, r3, r6
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	199b      	adds	r3, r3, r6
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	b005      	add	sp, #20
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004084:	002a      	movs	r2, r5
 8004086:	9802      	ldr	r0, [sp, #8]
 8004088:	f000 fac8 	bl	800461c <_realloc_r>
 800408c:	1e06      	subs	r6, r0, #0
 800408e:	d1e0      	bne.n	8004052 <__ssputs_r+0x62>
 8004090:	6921      	ldr	r1, [r4, #16]
 8004092:	9802      	ldr	r0, [sp, #8]
 8004094:	f7ff feb0 	bl	8003df8 <_free_r>
 8004098:	230c      	movs	r3, #12
 800409a:	2001      	movs	r0, #1
 800409c:	9a02      	ldr	r2, [sp, #8]
 800409e:	4240      	negs	r0, r0
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	89a2      	ldrh	r2, [r4, #12]
 80040a4:	3334      	adds	r3, #52	@ 0x34
 80040a6:	4313      	orrs	r3, r2
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	e7e9      	b.n	8004080 <__ssputs_r+0x90>
 80040ac:	fffffb7f 	.word	0xfffffb7f

080040b0 <_svfiprintf_r>:
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b2:	b0a1      	sub	sp, #132	@ 0x84
 80040b4:	9003      	str	r0, [sp, #12]
 80040b6:	001d      	movs	r5, r3
 80040b8:	898b      	ldrh	r3, [r1, #12]
 80040ba:	000f      	movs	r7, r1
 80040bc:	0016      	movs	r6, r2
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	d511      	bpl.n	80040e6 <_svfiprintf_r+0x36>
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10e      	bne.n	80040e6 <_svfiprintf_r+0x36>
 80040c8:	2140      	movs	r1, #64	@ 0x40
 80040ca:	f7ff ff01 	bl	8003ed0 <_malloc_r>
 80040ce:	6038      	str	r0, [r7, #0]
 80040d0:	6138      	str	r0, [r7, #16]
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d105      	bne.n	80040e2 <_svfiprintf_r+0x32>
 80040d6:	230c      	movs	r3, #12
 80040d8:	9a03      	ldr	r2, [sp, #12]
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	2001      	movs	r0, #1
 80040de:	4240      	negs	r0, r0
 80040e0:	e0cf      	b.n	8004282 <_svfiprintf_r+0x1d2>
 80040e2:	2340      	movs	r3, #64	@ 0x40
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	2300      	movs	r3, #0
 80040e8:	ac08      	add	r4, sp, #32
 80040ea:	6163      	str	r3, [r4, #20]
 80040ec:	3320      	adds	r3, #32
 80040ee:	7663      	strb	r3, [r4, #25]
 80040f0:	3310      	adds	r3, #16
 80040f2:	76a3      	strb	r3, [r4, #26]
 80040f4:	9507      	str	r5, [sp, #28]
 80040f6:	0035      	movs	r5, r6
 80040f8:	782b      	ldrb	r3, [r5, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <_svfiprintf_r+0x52>
 80040fe:	2b25      	cmp	r3, #37	@ 0x25
 8004100:	d148      	bne.n	8004194 <_svfiprintf_r+0xe4>
 8004102:	1bab      	subs	r3, r5, r6
 8004104:	9305      	str	r3, [sp, #20]
 8004106:	42b5      	cmp	r5, r6
 8004108:	d00b      	beq.n	8004122 <_svfiprintf_r+0x72>
 800410a:	0032      	movs	r2, r6
 800410c:	0039      	movs	r1, r7
 800410e:	9803      	ldr	r0, [sp, #12]
 8004110:	f7ff ff6e 	bl	8003ff0 <__ssputs_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d100      	bne.n	800411a <_svfiprintf_r+0x6a>
 8004118:	e0ae      	b.n	8004278 <_svfiprintf_r+0x1c8>
 800411a:	6963      	ldr	r3, [r4, #20]
 800411c:	9a05      	ldr	r2, [sp, #20]
 800411e:	189b      	adds	r3, r3, r2
 8004120:	6163      	str	r3, [r4, #20]
 8004122:	782b      	ldrb	r3, [r5, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d100      	bne.n	800412a <_svfiprintf_r+0x7a>
 8004128:	e0a6      	b.n	8004278 <_svfiprintf_r+0x1c8>
 800412a:	2201      	movs	r2, #1
 800412c:	2300      	movs	r3, #0
 800412e:	4252      	negs	r2, r2
 8004130:	6062      	str	r2, [r4, #4]
 8004132:	a904      	add	r1, sp, #16
 8004134:	3254      	adds	r2, #84	@ 0x54
 8004136:	1852      	adds	r2, r2, r1
 8004138:	1c6e      	adds	r6, r5, #1
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	60e3      	str	r3, [r4, #12]
 800413e:	60a3      	str	r3, [r4, #8]
 8004140:	7013      	strb	r3, [r2, #0]
 8004142:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004144:	4b54      	ldr	r3, [pc, #336]	@ (8004298 <_svfiprintf_r+0x1e8>)
 8004146:	2205      	movs	r2, #5
 8004148:	0018      	movs	r0, r3
 800414a:	7831      	ldrb	r1, [r6, #0]
 800414c:	9305      	str	r3, [sp, #20]
 800414e:	f000 fa51 	bl	80045f4 <memchr>
 8004152:	1c75      	adds	r5, r6, #1
 8004154:	2800      	cmp	r0, #0
 8004156:	d11f      	bne.n	8004198 <_svfiprintf_r+0xe8>
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	06d3      	lsls	r3, r2, #27
 800415c:	d504      	bpl.n	8004168 <_svfiprintf_r+0xb8>
 800415e:	2353      	movs	r3, #83	@ 0x53
 8004160:	a904      	add	r1, sp, #16
 8004162:	185b      	adds	r3, r3, r1
 8004164:	2120      	movs	r1, #32
 8004166:	7019      	strb	r1, [r3, #0]
 8004168:	0713      	lsls	r3, r2, #28
 800416a:	d504      	bpl.n	8004176 <_svfiprintf_r+0xc6>
 800416c:	2353      	movs	r3, #83	@ 0x53
 800416e:	a904      	add	r1, sp, #16
 8004170:	185b      	adds	r3, r3, r1
 8004172:	212b      	movs	r1, #43	@ 0x2b
 8004174:	7019      	strb	r1, [r3, #0]
 8004176:	7833      	ldrb	r3, [r6, #0]
 8004178:	2b2a      	cmp	r3, #42	@ 0x2a
 800417a:	d016      	beq.n	80041aa <_svfiprintf_r+0xfa>
 800417c:	0035      	movs	r5, r6
 800417e:	2100      	movs	r1, #0
 8004180:	200a      	movs	r0, #10
 8004182:	68e3      	ldr	r3, [r4, #12]
 8004184:	782a      	ldrb	r2, [r5, #0]
 8004186:	1c6e      	adds	r6, r5, #1
 8004188:	3a30      	subs	r2, #48	@ 0x30
 800418a:	2a09      	cmp	r2, #9
 800418c:	d950      	bls.n	8004230 <_svfiprintf_r+0x180>
 800418e:	2900      	cmp	r1, #0
 8004190:	d111      	bne.n	80041b6 <_svfiprintf_r+0x106>
 8004192:	e017      	b.n	80041c4 <_svfiprintf_r+0x114>
 8004194:	3501      	adds	r5, #1
 8004196:	e7af      	b.n	80040f8 <_svfiprintf_r+0x48>
 8004198:	9b05      	ldr	r3, [sp, #20]
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	1ac0      	subs	r0, r0, r3
 800419e:	2301      	movs	r3, #1
 80041a0:	4083      	lsls	r3, r0
 80041a2:	4313      	orrs	r3, r2
 80041a4:	002e      	movs	r6, r5
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	e7cc      	b.n	8004144 <_svfiprintf_r+0x94>
 80041aa:	9b07      	ldr	r3, [sp, #28]
 80041ac:	1d19      	adds	r1, r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	9107      	str	r1, [sp, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db01      	blt.n	80041ba <_svfiprintf_r+0x10a>
 80041b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041b8:	e004      	b.n	80041c4 <_svfiprintf_r+0x114>
 80041ba:	425b      	negs	r3, r3
 80041bc:	60e3      	str	r3, [r4, #12]
 80041be:	2302      	movs	r3, #2
 80041c0:	4313      	orrs	r3, r2
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	782b      	ldrb	r3, [r5, #0]
 80041c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80041c8:	d10c      	bne.n	80041e4 <_svfiprintf_r+0x134>
 80041ca:	786b      	ldrb	r3, [r5, #1]
 80041cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80041ce:	d134      	bne.n	800423a <_svfiprintf_r+0x18a>
 80041d0:	9b07      	ldr	r3, [sp, #28]
 80041d2:	3502      	adds	r5, #2
 80041d4:	1d1a      	adds	r2, r3, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	9207      	str	r2, [sp, #28]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da01      	bge.n	80041e2 <_svfiprintf_r+0x132>
 80041de:	2301      	movs	r3, #1
 80041e0:	425b      	negs	r3, r3
 80041e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e4:	4e2d      	ldr	r6, [pc, #180]	@ (800429c <_svfiprintf_r+0x1ec>)
 80041e6:	2203      	movs	r2, #3
 80041e8:	0030      	movs	r0, r6
 80041ea:	7829      	ldrb	r1, [r5, #0]
 80041ec:	f000 fa02 	bl	80045f4 <memchr>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d006      	beq.n	8004202 <_svfiprintf_r+0x152>
 80041f4:	2340      	movs	r3, #64	@ 0x40
 80041f6:	1b80      	subs	r0, r0, r6
 80041f8:	4083      	lsls	r3, r0
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	3501      	adds	r5, #1
 80041fe:	4313      	orrs	r3, r2
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	7829      	ldrb	r1, [r5, #0]
 8004204:	2206      	movs	r2, #6
 8004206:	4826      	ldr	r0, [pc, #152]	@ (80042a0 <_svfiprintf_r+0x1f0>)
 8004208:	1c6e      	adds	r6, r5, #1
 800420a:	7621      	strb	r1, [r4, #24]
 800420c:	f000 f9f2 	bl	80045f4 <memchr>
 8004210:	2800      	cmp	r0, #0
 8004212:	d038      	beq.n	8004286 <_svfiprintf_r+0x1d6>
 8004214:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <_svfiprintf_r+0x1f4>)
 8004216:	2b00      	cmp	r3, #0
 8004218:	d122      	bne.n	8004260 <_svfiprintf_r+0x1b0>
 800421a:	2207      	movs	r2, #7
 800421c:	9b07      	ldr	r3, [sp, #28]
 800421e:	3307      	adds	r3, #7
 8004220:	4393      	bics	r3, r2
 8004222:	3308      	adds	r3, #8
 8004224:	9307      	str	r3, [sp, #28]
 8004226:	6963      	ldr	r3, [r4, #20]
 8004228:	9a04      	ldr	r2, [sp, #16]
 800422a:	189b      	adds	r3, r3, r2
 800422c:	6163      	str	r3, [r4, #20]
 800422e:	e762      	b.n	80040f6 <_svfiprintf_r+0x46>
 8004230:	4343      	muls	r3, r0
 8004232:	0035      	movs	r5, r6
 8004234:	2101      	movs	r1, #1
 8004236:	189b      	adds	r3, r3, r2
 8004238:	e7a4      	b.n	8004184 <_svfiprintf_r+0xd4>
 800423a:	2300      	movs	r3, #0
 800423c:	200a      	movs	r0, #10
 800423e:	0019      	movs	r1, r3
 8004240:	3501      	adds	r5, #1
 8004242:	6063      	str	r3, [r4, #4]
 8004244:	782a      	ldrb	r2, [r5, #0]
 8004246:	1c6e      	adds	r6, r5, #1
 8004248:	3a30      	subs	r2, #48	@ 0x30
 800424a:	2a09      	cmp	r2, #9
 800424c:	d903      	bls.n	8004256 <_svfiprintf_r+0x1a6>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0c8      	beq.n	80041e4 <_svfiprintf_r+0x134>
 8004252:	9109      	str	r1, [sp, #36]	@ 0x24
 8004254:	e7c6      	b.n	80041e4 <_svfiprintf_r+0x134>
 8004256:	4341      	muls	r1, r0
 8004258:	0035      	movs	r5, r6
 800425a:	2301      	movs	r3, #1
 800425c:	1889      	adds	r1, r1, r2
 800425e:	e7f1      	b.n	8004244 <_svfiprintf_r+0x194>
 8004260:	aa07      	add	r2, sp, #28
 8004262:	9200      	str	r2, [sp, #0]
 8004264:	0021      	movs	r1, r4
 8004266:	003a      	movs	r2, r7
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <_svfiprintf_r+0x1f8>)
 800426a:	9803      	ldr	r0, [sp, #12]
 800426c:	e000      	b.n	8004270 <_svfiprintf_r+0x1c0>
 800426e:	bf00      	nop
 8004270:	9004      	str	r0, [sp, #16]
 8004272:	9b04      	ldr	r3, [sp, #16]
 8004274:	3301      	adds	r3, #1
 8004276:	d1d6      	bne.n	8004226 <_svfiprintf_r+0x176>
 8004278:	89bb      	ldrh	r3, [r7, #12]
 800427a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800427c:	065b      	lsls	r3, r3, #25
 800427e:	d500      	bpl.n	8004282 <_svfiprintf_r+0x1d2>
 8004280:	e72c      	b.n	80040dc <_svfiprintf_r+0x2c>
 8004282:	b021      	add	sp, #132	@ 0x84
 8004284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004286:	aa07      	add	r2, sp, #28
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	0021      	movs	r1, r4
 800428c:	003a      	movs	r2, r7
 800428e:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <_svfiprintf_r+0x1f8>)
 8004290:	9803      	ldr	r0, [sp, #12]
 8004292:	f000 f87b 	bl	800438c <_printf_i>
 8004296:	e7eb      	b.n	8004270 <_svfiprintf_r+0x1c0>
 8004298:	08004780 	.word	0x08004780
 800429c:	08004786 	.word	0x08004786
 80042a0:	0800478a 	.word	0x0800478a
 80042a4:	00000000 	.word	0x00000000
 80042a8:	08003ff1 	.word	0x08003ff1

080042ac <_printf_common>:
 80042ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ae:	0016      	movs	r6, r2
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	688a      	ldr	r2, [r1, #8]
 80042b4:	690b      	ldr	r3, [r1, #16]
 80042b6:	000c      	movs	r4, r1
 80042b8:	9000      	str	r0, [sp, #0]
 80042ba:	4293      	cmp	r3, r2
 80042bc:	da00      	bge.n	80042c0 <_printf_common+0x14>
 80042be:	0013      	movs	r3, r2
 80042c0:	0022      	movs	r2, r4
 80042c2:	6033      	str	r3, [r6, #0]
 80042c4:	3243      	adds	r2, #67	@ 0x43
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	d001      	beq.n	80042d0 <_printf_common+0x24>
 80042cc:	3301      	adds	r3, #1
 80042ce:	6033      	str	r3, [r6, #0]
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	d502      	bpl.n	80042dc <_printf_common+0x30>
 80042d6:	6833      	ldr	r3, [r6, #0]
 80042d8:	3302      	adds	r3, #2
 80042da:	6033      	str	r3, [r6, #0]
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	2306      	movs	r3, #6
 80042e0:	0015      	movs	r5, r2
 80042e2:	401d      	ands	r5, r3
 80042e4:	421a      	tst	r2, r3
 80042e6:	d027      	beq.n	8004338 <_printf_common+0x8c>
 80042e8:	0023      	movs	r3, r4
 80042ea:	3343      	adds	r3, #67	@ 0x43
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	1e5a      	subs	r2, r3, #1
 80042f0:	4193      	sbcs	r3, r2
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	0692      	lsls	r2, r2, #26
 80042f6:	d430      	bmi.n	800435a <_printf_common+0xae>
 80042f8:	0022      	movs	r2, r4
 80042fa:	9901      	ldr	r1, [sp, #4]
 80042fc:	9800      	ldr	r0, [sp, #0]
 80042fe:	9d08      	ldr	r5, [sp, #32]
 8004300:	3243      	adds	r2, #67	@ 0x43
 8004302:	47a8      	blx	r5
 8004304:	3001      	adds	r0, #1
 8004306:	d025      	beq.n	8004354 <_printf_common+0xa8>
 8004308:	2206      	movs	r2, #6
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	2500      	movs	r5, #0
 800430e:	4013      	ands	r3, r2
 8004310:	2b04      	cmp	r3, #4
 8004312:	d105      	bne.n	8004320 <_printf_common+0x74>
 8004314:	6833      	ldr	r3, [r6, #0]
 8004316:	68e5      	ldr	r5, [r4, #12]
 8004318:	1aed      	subs	r5, r5, r3
 800431a:	43eb      	mvns	r3, r5
 800431c:	17db      	asrs	r3, r3, #31
 800431e:	401d      	ands	r5, r3
 8004320:	68a3      	ldr	r3, [r4, #8]
 8004322:	6922      	ldr	r2, [r4, #16]
 8004324:	4293      	cmp	r3, r2
 8004326:	dd01      	ble.n	800432c <_printf_common+0x80>
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	18ed      	adds	r5, r5, r3
 800432c:	2600      	movs	r6, #0
 800432e:	42b5      	cmp	r5, r6
 8004330:	d120      	bne.n	8004374 <_printf_common+0xc8>
 8004332:	2000      	movs	r0, #0
 8004334:	e010      	b.n	8004358 <_printf_common+0xac>
 8004336:	3501      	adds	r5, #1
 8004338:	68e3      	ldr	r3, [r4, #12]
 800433a:	6832      	ldr	r2, [r6, #0]
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	42ab      	cmp	r3, r5
 8004340:	ddd2      	ble.n	80042e8 <_printf_common+0x3c>
 8004342:	0022      	movs	r2, r4
 8004344:	2301      	movs	r3, #1
 8004346:	9901      	ldr	r1, [sp, #4]
 8004348:	9800      	ldr	r0, [sp, #0]
 800434a:	9f08      	ldr	r7, [sp, #32]
 800434c:	3219      	adds	r2, #25
 800434e:	47b8      	blx	r7
 8004350:	3001      	adds	r0, #1
 8004352:	d1f0      	bne.n	8004336 <_printf_common+0x8a>
 8004354:	2001      	movs	r0, #1
 8004356:	4240      	negs	r0, r0
 8004358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800435a:	2030      	movs	r0, #48	@ 0x30
 800435c:	18e1      	adds	r1, r4, r3
 800435e:	3143      	adds	r1, #67	@ 0x43
 8004360:	7008      	strb	r0, [r1, #0]
 8004362:	0021      	movs	r1, r4
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	3145      	adds	r1, #69	@ 0x45
 8004368:	7809      	ldrb	r1, [r1, #0]
 800436a:	18a2      	adds	r2, r4, r2
 800436c:	3243      	adds	r2, #67	@ 0x43
 800436e:	3302      	adds	r3, #2
 8004370:	7011      	strb	r1, [r2, #0]
 8004372:	e7c1      	b.n	80042f8 <_printf_common+0x4c>
 8004374:	0022      	movs	r2, r4
 8004376:	2301      	movs	r3, #1
 8004378:	9901      	ldr	r1, [sp, #4]
 800437a:	9800      	ldr	r0, [sp, #0]
 800437c:	9f08      	ldr	r7, [sp, #32]
 800437e:	321a      	adds	r2, #26
 8004380:	47b8      	blx	r7
 8004382:	3001      	adds	r0, #1
 8004384:	d0e6      	beq.n	8004354 <_printf_common+0xa8>
 8004386:	3601      	adds	r6, #1
 8004388:	e7d1      	b.n	800432e <_printf_common+0x82>
	...

0800438c <_printf_i>:
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438e:	b08b      	sub	sp, #44	@ 0x2c
 8004390:	9206      	str	r2, [sp, #24]
 8004392:	000a      	movs	r2, r1
 8004394:	3243      	adds	r2, #67	@ 0x43
 8004396:	9307      	str	r3, [sp, #28]
 8004398:	9005      	str	r0, [sp, #20]
 800439a:	9203      	str	r2, [sp, #12]
 800439c:	7e0a      	ldrb	r2, [r1, #24]
 800439e:	000c      	movs	r4, r1
 80043a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043a2:	2a78      	cmp	r2, #120	@ 0x78
 80043a4:	d809      	bhi.n	80043ba <_printf_i+0x2e>
 80043a6:	2a62      	cmp	r2, #98	@ 0x62
 80043a8:	d80b      	bhi.n	80043c2 <_printf_i+0x36>
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d100      	bne.n	80043b0 <_printf_i+0x24>
 80043ae:	e0bc      	b.n	800452a <_printf_i+0x19e>
 80043b0:	497b      	ldr	r1, [pc, #492]	@ (80045a0 <_printf_i+0x214>)
 80043b2:	9104      	str	r1, [sp, #16]
 80043b4:	2a58      	cmp	r2, #88	@ 0x58
 80043b6:	d100      	bne.n	80043ba <_printf_i+0x2e>
 80043b8:	e090      	b.n	80044dc <_printf_i+0x150>
 80043ba:	0025      	movs	r5, r4
 80043bc:	3542      	adds	r5, #66	@ 0x42
 80043be:	702a      	strb	r2, [r5, #0]
 80043c0:	e022      	b.n	8004408 <_printf_i+0x7c>
 80043c2:	0010      	movs	r0, r2
 80043c4:	3863      	subs	r0, #99	@ 0x63
 80043c6:	2815      	cmp	r0, #21
 80043c8:	d8f7      	bhi.n	80043ba <_printf_i+0x2e>
 80043ca:	f7fb fea1 	bl	8000110 <__gnu_thumb1_case_shi>
 80043ce:	0016      	.short	0x0016
 80043d0:	fff6001f 	.word	0xfff6001f
 80043d4:	fff6fff6 	.word	0xfff6fff6
 80043d8:	001ffff6 	.word	0x001ffff6
 80043dc:	fff6fff6 	.word	0xfff6fff6
 80043e0:	fff6fff6 	.word	0xfff6fff6
 80043e4:	003600a1 	.word	0x003600a1
 80043e8:	fff60080 	.word	0xfff60080
 80043ec:	00b2fff6 	.word	0x00b2fff6
 80043f0:	0036fff6 	.word	0x0036fff6
 80043f4:	fff6fff6 	.word	0xfff6fff6
 80043f8:	0084      	.short	0x0084
 80043fa:	0025      	movs	r5, r4
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	3542      	adds	r5, #66	@ 0x42
 8004400:	1d11      	adds	r1, r2, #4
 8004402:	6019      	str	r1, [r3, #0]
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	702b      	strb	r3, [r5, #0]
 8004408:	2301      	movs	r3, #1
 800440a:	e0a0      	b.n	800454e <_printf_i+0x1c2>
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	6809      	ldr	r1, [r1, #0]
 8004410:	1d02      	adds	r2, r0, #4
 8004412:	060d      	lsls	r5, r1, #24
 8004414:	d50b      	bpl.n	800442e <_printf_i+0xa2>
 8004416:	6806      	ldr	r6, [r0, #0]
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	2e00      	cmp	r6, #0
 800441c:	da03      	bge.n	8004426 <_printf_i+0x9a>
 800441e:	232d      	movs	r3, #45	@ 0x2d
 8004420:	9a03      	ldr	r2, [sp, #12]
 8004422:	4276      	negs	r6, r6
 8004424:	7013      	strb	r3, [r2, #0]
 8004426:	4b5e      	ldr	r3, [pc, #376]	@ (80045a0 <_printf_i+0x214>)
 8004428:	270a      	movs	r7, #10
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	e018      	b.n	8004460 <_printf_i+0xd4>
 800442e:	6806      	ldr	r6, [r0, #0]
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	0649      	lsls	r1, r1, #25
 8004434:	d5f1      	bpl.n	800441a <_printf_i+0x8e>
 8004436:	b236      	sxth	r6, r6
 8004438:	e7ef      	b.n	800441a <_printf_i+0x8e>
 800443a:	6808      	ldr	r0, [r1, #0]
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	c940      	ldmia	r1!, {r6}
 8004440:	0605      	lsls	r5, r0, #24
 8004442:	d402      	bmi.n	800444a <_printf_i+0xbe>
 8004444:	0640      	lsls	r0, r0, #25
 8004446:	d500      	bpl.n	800444a <_printf_i+0xbe>
 8004448:	b2b6      	uxth	r6, r6
 800444a:	6019      	str	r1, [r3, #0]
 800444c:	4b54      	ldr	r3, [pc, #336]	@ (80045a0 <_printf_i+0x214>)
 800444e:	270a      	movs	r7, #10
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	2a6f      	cmp	r2, #111	@ 0x6f
 8004454:	d100      	bne.n	8004458 <_printf_i+0xcc>
 8004456:	3f02      	subs	r7, #2
 8004458:	0023      	movs	r3, r4
 800445a:	2200      	movs	r2, #0
 800445c:	3343      	adds	r3, #67	@ 0x43
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	60a3      	str	r3, [r4, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	db03      	blt.n	8004470 <_printf_i+0xe4>
 8004468:	2104      	movs	r1, #4
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	438a      	bics	r2, r1
 800446e:	6022      	str	r2, [r4, #0]
 8004470:	2e00      	cmp	r6, #0
 8004472:	d102      	bne.n	800447a <_printf_i+0xee>
 8004474:	9d03      	ldr	r5, [sp, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <_printf_i+0x108>
 800447a:	9d03      	ldr	r5, [sp, #12]
 800447c:	0030      	movs	r0, r6
 800447e:	0039      	movs	r1, r7
 8004480:	f7fb fed6 	bl	8000230 <__aeabi_uidivmod>
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	3d01      	subs	r5, #1
 8004488:	5c5b      	ldrb	r3, [r3, r1]
 800448a:	702b      	strb	r3, [r5, #0]
 800448c:	0033      	movs	r3, r6
 800448e:	0006      	movs	r6, r0
 8004490:	429f      	cmp	r7, r3
 8004492:	d9f3      	bls.n	800447c <_printf_i+0xf0>
 8004494:	2f08      	cmp	r7, #8
 8004496:	d109      	bne.n	80044ac <_printf_i+0x120>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	07db      	lsls	r3, r3, #31
 800449c:	d506      	bpl.n	80044ac <_printf_i+0x120>
 800449e:	6862      	ldr	r2, [r4, #4]
 80044a0:	6923      	ldr	r3, [r4, #16]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	dc02      	bgt.n	80044ac <_printf_i+0x120>
 80044a6:	2330      	movs	r3, #48	@ 0x30
 80044a8:	3d01      	subs	r5, #1
 80044aa:	702b      	strb	r3, [r5, #0]
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	1b5b      	subs	r3, r3, r5
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	9b07      	ldr	r3, [sp, #28]
 80044b4:	0021      	movs	r1, r4
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	9805      	ldr	r0, [sp, #20]
 80044ba:	9b06      	ldr	r3, [sp, #24]
 80044bc:	aa09      	add	r2, sp, #36	@ 0x24
 80044be:	f7ff fef5 	bl	80042ac <_printf_common>
 80044c2:	3001      	adds	r0, #1
 80044c4:	d148      	bne.n	8004558 <_printf_i+0x1cc>
 80044c6:	2001      	movs	r0, #1
 80044c8:	4240      	negs	r0, r0
 80044ca:	b00b      	add	sp, #44	@ 0x2c
 80044cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ce:	2220      	movs	r2, #32
 80044d0:	6809      	ldr	r1, [r1, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	6022      	str	r2, [r4, #0]
 80044d6:	2278      	movs	r2, #120	@ 0x78
 80044d8:	4932      	ldr	r1, [pc, #200]	@ (80045a4 <_printf_i+0x218>)
 80044da:	9104      	str	r1, [sp, #16]
 80044dc:	0021      	movs	r1, r4
 80044de:	3145      	adds	r1, #69	@ 0x45
 80044e0:	700a      	strb	r2, [r1, #0]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	c940      	ldmia	r1!, {r6}
 80044e8:	0610      	lsls	r0, r2, #24
 80044ea:	d402      	bmi.n	80044f2 <_printf_i+0x166>
 80044ec:	0650      	lsls	r0, r2, #25
 80044ee:	d500      	bpl.n	80044f2 <_printf_i+0x166>
 80044f0:	b2b6      	uxth	r6, r6
 80044f2:	6019      	str	r1, [r3, #0]
 80044f4:	07d3      	lsls	r3, r2, #31
 80044f6:	d502      	bpl.n	80044fe <_printf_i+0x172>
 80044f8:	2320      	movs	r3, #32
 80044fa:	4313      	orrs	r3, r2
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	2e00      	cmp	r6, #0
 8004500:	d001      	beq.n	8004506 <_printf_i+0x17a>
 8004502:	2710      	movs	r7, #16
 8004504:	e7a8      	b.n	8004458 <_printf_i+0xcc>
 8004506:	2220      	movs	r2, #32
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	4393      	bics	r3, r2
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	e7f8      	b.n	8004502 <_printf_i+0x176>
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	680d      	ldr	r5, [r1, #0]
 8004514:	1d10      	adds	r0, r2, #4
 8004516:	6949      	ldr	r1, [r1, #20]
 8004518:	6018      	str	r0, [r3, #0]
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	062e      	lsls	r6, r5, #24
 800451e:	d501      	bpl.n	8004524 <_printf_i+0x198>
 8004520:	6019      	str	r1, [r3, #0]
 8004522:	e002      	b.n	800452a <_printf_i+0x19e>
 8004524:	066d      	lsls	r5, r5, #25
 8004526:	d5fb      	bpl.n	8004520 <_printf_i+0x194>
 8004528:	8019      	strh	r1, [r3, #0]
 800452a:	2300      	movs	r3, #0
 800452c:	9d03      	ldr	r5, [sp, #12]
 800452e:	6123      	str	r3, [r4, #16]
 8004530:	e7bf      	b.n	80044b2 <_printf_i+0x126>
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	1d11      	adds	r1, r2, #4
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	6815      	ldr	r5, [r2, #0]
 800453a:	2100      	movs	r1, #0
 800453c:	0028      	movs	r0, r5
 800453e:	6862      	ldr	r2, [r4, #4]
 8004540:	f000 f858 	bl	80045f4 <memchr>
 8004544:	2800      	cmp	r0, #0
 8004546:	d001      	beq.n	800454c <_printf_i+0x1c0>
 8004548:	1b40      	subs	r0, r0, r5
 800454a:	6060      	str	r0, [r4, #4]
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	6123      	str	r3, [r4, #16]
 8004550:	2300      	movs	r3, #0
 8004552:	9a03      	ldr	r2, [sp, #12]
 8004554:	7013      	strb	r3, [r2, #0]
 8004556:	e7ac      	b.n	80044b2 <_printf_i+0x126>
 8004558:	002a      	movs	r2, r5
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	9906      	ldr	r1, [sp, #24]
 800455e:	9805      	ldr	r0, [sp, #20]
 8004560:	9d07      	ldr	r5, [sp, #28]
 8004562:	47a8      	blx	r5
 8004564:	3001      	adds	r0, #1
 8004566:	d0ae      	beq.n	80044c6 <_printf_i+0x13a>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	079b      	lsls	r3, r3, #30
 800456c:	d415      	bmi.n	800459a <_printf_i+0x20e>
 800456e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004570:	68e0      	ldr	r0, [r4, #12]
 8004572:	4298      	cmp	r0, r3
 8004574:	daa9      	bge.n	80044ca <_printf_i+0x13e>
 8004576:	0018      	movs	r0, r3
 8004578:	e7a7      	b.n	80044ca <_printf_i+0x13e>
 800457a:	0022      	movs	r2, r4
 800457c:	2301      	movs	r3, #1
 800457e:	9906      	ldr	r1, [sp, #24]
 8004580:	9805      	ldr	r0, [sp, #20]
 8004582:	9e07      	ldr	r6, [sp, #28]
 8004584:	3219      	adds	r2, #25
 8004586:	47b0      	blx	r6
 8004588:	3001      	adds	r0, #1
 800458a:	d09c      	beq.n	80044c6 <_printf_i+0x13a>
 800458c:	3501      	adds	r5, #1
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	42ab      	cmp	r3, r5
 8004596:	dcf0      	bgt.n	800457a <_printf_i+0x1ee>
 8004598:	e7e9      	b.n	800456e <_printf_i+0x1e2>
 800459a:	2500      	movs	r5, #0
 800459c:	e7f7      	b.n	800458e <_printf_i+0x202>
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	08004791 	.word	0x08004791
 80045a4:	080047a2 	.word	0x080047a2

080045a8 <memmove>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	4288      	cmp	r0, r1
 80045ac:	d806      	bhi.n	80045bc <memmove+0x14>
 80045ae:	2300      	movs	r3, #0
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d008      	beq.n	80045c6 <memmove+0x1e>
 80045b4:	5ccc      	ldrb	r4, [r1, r3]
 80045b6:	54c4      	strb	r4, [r0, r3]
 80045b8:	3301      	adds	r3, #1
 80045ba:	e7f9      	b.n	80045b0 <memmove+0x8>
 80045bc:	188b      	adds	r3, r1, r2
 80045be:	4298      	cmp	r0, r3
 80045c0:	d2f5      	bcs.n	80045ae <memmove+0x6>
 80045c2:	3a01      	subs	r2, #1
 80045c4:	d200      	bcs.n	80045c8 <memmove+0x20>
 80045c6:	bd10      	pop	{r4, pc}
 80045c8:	5c8b      	ldrb	r3, [r1, r2]
 80045ca:	5483      	strb	r3, [r0, r2]
 80045cc:	e7f9      	b.n	80045c2 <memmove+0x1a>
	...

080045d0 <_sbrk_r>:
 80045d0:	2300      	movs	r3, #0
 80045d2:	b570      	push	{r4, r5, r6, lr}
 80045d4:	4d06      	ldr	r5, [pc, #24]	@ (80045f0 <_sbrk_r+0x20>)
 80045d6:	0004      	movs	r4, r0
 80045d8:	0008      	movs	r0, r1
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	f7fc fdba 	bl	8001154 <_sbrk>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d103      	bne.n	80045ec <_sbrk_r+0x1c>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d000      	beq.n	80045ec <_sbrk_r+0x1c>
 80045ea:	6023      	str	r3, [r4, #0]
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
 80045ee:	46c0      	nop			@ (mov r8, r8)
 80045f0:	200003ac 	.word	0x200003ac

080045f4 <memchr>:
 80045f4:	b2c9      	uxtb	r1, r1
 80045f6:	1882      	adds	r2, r0, r2
 80045f8:	4290      	cmp	r0, r2
 80045fa:	d101      	bne.n	8004600 <memchr+0xc>
 80045fc:	2000      	movs	r0, #0
 80045fe:	4770      	bx	lr
 8004600:	7803      	ldrb	r3, [r0, #0]
 8004602:	428b      	cmp	r3, r1
 8004604:	d0fb      	beq.n	80045fe <memchr+0xa>
 8004606:	3001      	adds	r0, #1
 8004608:	e7f6      	b.n	80045f8 <memchr+0x4>

0800460a <memcpy>:
 800460a:	2300      	movs	r3, #0
 800460c:	b510      	push	{r4, lr}
 800460e:	429a      	cmp	r2, r3
 8004610:	d100      	bne.n	8004614 <memcpy+0xa>
 8004612:	bd10      	pop	{r4, pc}
 8004614:	5ccc      	ldrb	r4, [r1, r3]
 8004616:	54c4      	strb	r4, [r0, r3]
 8004618:	3301      	adds	r3, #1
 800461a:	e7f8      	b.n	800460e <memcpy+0x4>

0800461c <_realloc_r>:
 800461c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800461e:	0006      	movs	r6, r0
 8004620:	000c      	movs	r4, r1
 8004622:	0015      	movs	r5, r2
 8004624:	2900      	cmp	r1, #0
 8004626:	d105      	bne.n	8004634 <_realloc_r+0x18>
 8004628:	0011      	movs	r1, r2
 800462a:	f7ff fc51 	bl	8003ed0 <_malloc_r>
 800462e:	0004      	movs	r4, r0
 8004630:	0020      	movs	r0, r4
 8004632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004634:	2a00      	cmp	r2, #0
 8004636:	d103      	bne.n	8004640 <_realloc_r+0x24>
 8004638:	f7ff fbde 	bl	8003df8 <_free_r>
 800463c:	2400      	movs	r4, #0
 800463e:	e7f7      	b.n	8004630 <_realloc_r+0x14>
 8004640:	f000 f81b 	bl	800467a <_malloc_usable_size_r>
 8004644:	0007      	movs	r7, r0
 8004646:	4285      	cmp	r5, r0
 8004648:	d802      	bhi.n	8004650 <_realloc_r+0x34>
 800464a:	0843      	lsrs	r3, r0, #1
 800464c:	42ab      	cmp	r3, r5
 800464e:	d3ef      	bcc.n	8004630 <_realloc_r+0x14>
 8004650:	0029      	movs	r1, r5
 8004652:	0030      	movs	r0, r6
 8004654:	f7ff fc3c 	bl	8003ed0 <_malloc_r>
 8004658:	9001      	str	r0, [sp, #4]
 800465a:	2800      	cmp	r0, #0
 800465c:	d0ee      	beq.n	800463c <_realloc_r+0x20>
 800465e:	002a      	movs	r2, r5
 8004660:	42bd      	cmp	r5, r7
 8004662:	d900      	bls.n	8004666 <_realloc_r+0x4a>
 8004664:	003a      	movs	r2, r7
 8004666:	0021      	movs	r1, r4
 8004668:	9801      	ldr	r0, [sp, #4]
 800466a:	f7ff ffce 	bl	800460a <memcpy>
 800466e:	0021      	movs	r1, r4
 8004670:	0030      	movs	r0, r6
 8004672:	f7ff fbc1 	bl	8003df8 <_free_r>
 8004676:	9c01      	ldr	r4, [sp, #4]
 8004678:	e7da      	b.n	8004630 <_realloc_r+0x14>

0800467a <_malloc_usable_size_r>:
 800467a:	1f0b      	subs	r3, r1, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	1f18      	subs	r0, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	da01      	bge.n	8004688 <_malloc_usable_size_r+0xe>
 8004684:	580b      	ldr	r3, [r1, r0]
 8004686:	18c0      	adds	r0, r0, r3
 8004688:	4770      	bx	lr
	...

0800468c <_init>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

08004698 <_fini>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr
