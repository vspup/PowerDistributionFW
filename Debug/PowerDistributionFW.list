
PowerDistributionFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021b4  080021b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021b4  080021b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021b4  080021b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021b8  080021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080021c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080021c8  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a61e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8f  00000000  00000000  0002a695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b1  00000000  00000000  0002c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f0d  00000000  00000000  0002d091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad35  00000000  00000000  00041f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000840b8  00000000  00000000  0004ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e28  00000000  00000000  000d0d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d2bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002154 	.word	0x08002154

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002154 	.word	0x08002154

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <LL_RCC_HSI_Enable+0x18>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <LL_RCC_HSI_Enable+0x18>)
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	0049      	lsls	r1, r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <LL_RCC_HSI_IsReady+0x24>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	401a      	ands	r2, r3
 8000416:	2380      	movs	r3, #128	; 0x80
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	429a      	cmp	r2, r3
 800041c:	d101      	bne.n	8000422 <LL_RCC_HSI_IsReady+0x1a>
 800041e:	2301      	movs	r3, #1
 8000420:	e000      	b.n	8000424 <LL_RCC_HSI_IsReady+0x1c>
 8000422:	2300      	movs	r3, #0
}
 8000424:	0018      	movs	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000

08000430 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <LL_RCC_SetSysClkSource+0x24>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	2207      	movs	r2, #7
 800043e:	4393      	bics	r3, r2
 8000440:	0019      	movs	r1, r3
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <LL_RCC_SetSysClkSource+0x24>)
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	430a      	orrs	r2, r1
 8000448:	609a      	str	r2, [r3, #8]
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	40021000 	.word	0x40021000

08000458 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <LL_RCC_GetSysClkSource+0x14>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2238      	movs	r2, #56	; 0x38
 8000462:	4013      	ands	r3, r2
}
 8000464:	0018      	movs	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <LL_RCC_SetAHBPrescaler+0x24>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <LL_RCC_SetAHBPrescaler+0x28>)
 800047e:	4013      	ands	r3, r2
 8000480:	0019      	movs	r1, r3
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <LL_RCC_SetAHBPrescaler+0x24>)
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	430a      	orrs	r2, r1
 8000488:	609a      	str	r2, [r3, #8]
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	40021000 	.word	0x40021000
 8000498:	fffff0ff 	.word	0xfffff0ff

0800049c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004aa:	4013      	ands	r3, r2
 80004ac:	0019      	movs	r1, r3
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	430a      	orrs	r2, r1
 80004b4:	609a      	str	r2, [r3, #8]
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000
 80004c4:	ffff8fff 	.word	0xffff8fff

080004c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <LL_RCC_PLL_Enable+0x18>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <LL_RCC_PLL_Enable+0x18>)
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	0449      	lsls	r1, r1, #17
 80004d6:	430a      	orrs	r2, r1
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <LL_RCC_PLL_IsReady+0x24>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	049b      	lsls	r3, r3, #18
 80004f0:	401a      	ands	r2, r3
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	049b      	lsls	r3, r3, #18
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d101      	bne.n	80004fe <LL_RCC_PLL_IsReady+0x1a>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <LL_RCC_PLL_IsReady+0x1c>
 80004fe:	2300      	movs	r3, #0
}
 8000500:	0018      	movs	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40021000 	.word	0x40021000

0800050c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000520:	4013      	ands	r3, r2
 8000522:	0019      	movs	r1, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	431a      	orrs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	021b      	lsls	r3, r3, #8
 800052e:	431a      	orrs	r2, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	431a      	orrs	r2, r3
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000536:	430a      	orrs	r2, r1
 8000538:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b004      	add	sp, #16
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000
 8000548:	1fff808c 	.word	0x1fff808c

0800054c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000552:	68da      	ldr	r2, [r3, #12]
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	0549      	lsls	r1, r1, #21
 800055a:	430a      	orrs	r2, r1
 800055c:	60da      	str	r2, [r3, #12]
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000

08000568 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <LL_IOP_GRP1_EnableClock+0x28>)
 8000572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <LL_IOP_GRP1_EnableClock+0x28>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	430a      	orrs	r2, r1
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_IOP_GRP1_EnableClock+0x28>)
 800057e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4013      	ands	r3, r2
 8000584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b004      	add	sp, #16
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000

08000594 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2207      	movs	r2, #7
 80005a2:	4393      	bics	r3, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40022000 	.word	0x40022000

080005bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <LL_FLASH_GetLatency+0x14>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2207      	movs	r2, #7
 80005c6:	4013      	ands	r3, r2
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40022000 	.word	0x40022000

080005d4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	4013      	ands	r3, r2
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d101      	bne.n	80005f0 <LL_GPIO_IsInputPinSet+0x1c>
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <LL_GPIO_IsInputPinSet+0x1e>
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	0018      	movs	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}

080005fa <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	619a      	str	r2, [r3, #24]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}

08000612 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}

0800062a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b084      	sub	sp, #16
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	4013      	ands	r3, r2
 8000640:	041a      	lsls	r2, r3, #16
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	43db      	mvns	r3, r3
 8000646:	6839      	ldr	r1, [r7, #0]
 8000648:	400b      	ands	r3, r1
 800064a:	431a      	orrs	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	619a      	str	r2, [r3, #24]
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b004      	add	sp, #16
 8000656:	bd80      	pop	{r7, pc}

08000658 <SwitchTimingHandlar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SwitchTimingHandlar(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	timeoutPwrOff ++;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <SwitchTimingHandlar+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <SwitchTimingHandlar+0x28>)
 8000664:	601a      	str	r2, [r3, #0]
	if(leaveSwitch)
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <SwitchTimingHandlar+0x2c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <SwitchTimingHandlar+0x22>
	{
		return;
	}
	counterSwitch ++;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <SwitchTimingHandlar+0x30>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <SwitchTimingHandlar+0x30>)
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	e000      	b.n	800067c <SwitchTimingHandlar+0x24>
		return;
 800067a:	46c0      	nop			; (mov r8, r8)
}
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000c4 	.word	0x200000c4
 8000684:	200000c1 	.word	0x200000c1
 8000688:	200000bc 	.word	0x200000bc

0800068c <LED_GreenHandler>:

uint8_t greenLEDState = 0;
uint32_t greenLedTimer = 0;
void LED_GreenHandler (void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0


	if(greenLEDState == 0)
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <LED_GreenHandler+0x5c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d024      	beq.n	80006e2 <LED_GreenHandler+0x56>
	{
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
	}

	if(greenLEDState == 1)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <LED_GreenHandler+0x5c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d114      	bne.n	80006ca <LED_GreenHandler+0x3e>
	{
		greenLedTimer++;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <LED_GreenHandler+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <LED_GreenHandler+0x60>)
 80006a8:	601a      	str	r2, [r3, #0]

		if(greenLedTimer > TIME_LED_GREEN_BLINK)
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <LED_GreenHandler+0x60>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	23fa      	movs	r3, #250	; 0xfa
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d909      	bls.n	80006ca <LED_GreenHandler+0x3e>
		{
			greenLedTimer = 0;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <LED_GreenHandler+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
			LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <LED_GreenHandler+0x64>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f7ff ffb0 	bl	800062a <LL_GPIO_TogglePin>
		}
	}

	if(greenLEDState == 2)
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <LED_GreenHandler+0x5c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d108      	bne.n	80006e4 <LED_GreenHandler+0x58>
	{
		LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <LED_GreenHandler+0x64>)
 80006d8:	0019      	movs	r1, r3
 80006da:	0010      	movs	r0, r2
 80006dc:	f7ff ff8d 	bl	80005fa <LL_GPIO_SetOutputPin>
 80006e0:	e000      	b.n	80006e4 <LED_GreenHandler+0x58>
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80006e2:	46c0      	nop			; (mov r8, r8)
	}
}
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000c8 	.word	0x200000c8
 80006ec:	200000cc 	.word	0x200000cc
 80006f0:	50000400 	.word	0x50000400

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fb8f 	bl	8000e1c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 80006fe:	23fa      	movs	r3, #250	; 0xfa
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fc10 	bl	8000f28 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f906 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f996 	bl	8000a3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f946 	bl	80009a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t cnt400V[2] = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	801a      	strh	r2, [r3, #0]
  while(1)
  {
	  if(LL_GPIO_IsInputPinSet(CMP_400V_GPIO_Port,CMP_400V_Pin))
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	015b      	lsls	r3, r3, #5
 800071e:	4a77      	ldr	r2, [pc, #476]	; (80008fc <main+0x208>)
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f7ff ff56 	bl	80005d4 <LL_GPIO_IsInputPinSet>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d009      	beq.n	8000740 <main+0x4c>
	  {
		  cnt400V[0]++;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	701a      	strb	r2, [r3, #0]
		  cnt400V[1]=0;
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	705a      	strb	r2, [r3, #1]
 800073e:	e008      	b.n	8000752 <main+0x5e>
	  }
	  else
	  {
		  cnt400V[1]++;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	705a      	strb	r2, [r3, #1]
		  cnt400V[0]=0;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(33);
 8000752:	2021      	movs	r0, #33	; 0x21
 8000754:	f000 fbe8 	bl	8000f28 <HAL_Delay>

	  if(cnt400V[1] >= COUNT_400V_PULL)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d90c      	bls.n	800077a <main+0x86>
	  {
	       LL_GPIO_SetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	019b      	lsls	r3, r3, #6
 8000764:	4a65      	ldr	r2, [pc, #404]	; (80008fc <main+0x208>)
 8000766:	0019      	movs	r1, r3
 8000768:	0010      	movs	r0, r2
 800076a:	f7ff ff46 	bl	80005fa <LL_GPIO_SetOutputPin>
           LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800076e:	4b63      	ldr	r3, [pc, #396]	; (80008fc <main+0x208>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff ff41 	bl	80005fa <LL_GPIO_SetOutputPin>
		  break;
 8000778:	e011      	b.n	800079e <main+0xaa>
	  }
	  else if(cnt400V[0] >= COUNT_400V_PULL)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d9cb      	bls.n	800071a <main+0x26>
	  {
		  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	4a5d      	ldr	r2, [pc, #372]	; (80008fc <main+0x208>)
 8000788:	0019      	movs	r1, r3
 800078a:	0010      	movs	r0, r2
 800078c:	f7ff ff41 	bl	8000612 <LL_GPIO_ResetOutputPin>
		  LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4a59      	ldr	r2, [pc, #356]	; (80008fc <main+0x208>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f7ff ff2e 	bl	80005fa <LL_GPIO_SetOutputPin>
		  break;
	  }

  }
  //LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
  HAL_Delay(2000);
 800079e:	23fa      	movs	r3, #250	; 0xfa
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fbc0 	bl	8000f28 <HAL_Delay>
  //LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
  greenLEDState = 1;
 80007a8:	4b55      	ldr	r3, [pc, #340]	; (8000900 <main+0x20c>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 80007ae:	4b53      	ldr	r3, [pc, #332]	; (80008fc <main+0x208>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff2d 	bl	8000612 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4a4f      	ldr	r2, [pc, #316]	; (80008fc <main+0x208>)
 80007be:	0019      	movs	r1, r3
 80007c0:	0010      	movs	r0, r2
 80007c2:	f7ff ff26 	bl	8000612 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4a4c      	ldr	r2, [pc, #304]	; (80008fc <main+0x208>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f7ff ff1f 	bl	8000612 <LL_GPIO_ResetOutputPin>
  counterSwitch = 0;
 80007d4:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <main+0x210>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
					  HAL_Delay(2000);
					  LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
				  }
			  }*/

			  if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	019b      	lsls	r3, r3, #6
 80007de:	4a4a      	ldr	r2, [pc, #296]	; (8000908 <main+0x214>)
 80007e0:	0019      	movs	r1, r3
 80007e2:	0010      	movs	r0, r2
 80007e4:	f7ff fef6 	bl	80005d4 <LL_GPIO_IsInputPinSet>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d000      	beq.n	80007ee <main+0xfa>
 80007ec:	e07e      	b.n	80008ec <main+0x1f8>
			  {
				  if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 80007ee:	4b43      	ldr	r3, [pc, #268]	; (80008fc <main+0x208>)
 80007f0:	2104      	movs	r1, #4
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff feee 	bl	80005d4 <LL_GPIO_IsInputPinSet>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d133      	bne.n	8000864 <main+0x170>
				  {
					  while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 80007fc:	e012      	b.n	8000824 <main+0x130>
					  {
						  LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 80007fe:	4b3f      	ldr	r3, [pc, #252]	; (80008fc <main+0x208>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fef9 	bl	80005fa <LL_GPIO_SetOutputPin>
						  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4a3b      	ldr	r2, [pc, #236]	; (80008fc <main+0x208>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f7ff fefe 	bl	8000612 <LL_GPIO_ResetOutputPin>
						  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a38      	ldr	r2, [pc, #224]	; (80008fc <main+0x208>)
 800081c:	0019      	movs	r1, r3
 800081e:	0010      	movs	r0, r2
 8000820:	f7ff fef7 	bl	8000612 <LL_GPIO_ResetOutputPin>
					  while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 8000824:	4b35      	ldr	r3, [pc, #212]	; (80008fc <main+0x208>)
 8000826:	2104      	movs	r1, #4
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fed3 	bl	80005d4 <LL_GPIO_IsInputPinSet>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d0e5      	beq.n	80007fe <main+0x10a>
					  }

					  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <main+0x208>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff feeb 	bl	8000612 <LL_GPIO_ResetOutputPin>
					  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4a2e      	ldr	r2, [pc, #184]	; (80008fc <main+0x208>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f7ff fee4 	bl	8000612 <LL_GPIO_ResetOutputPin>
					  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <main+0x208>)
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f7ff fedd 	bl	8000612 <LL_GPIO_ResetOutputPin>
					  counterSwitch = 0;
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <main+0x210>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
					  leaveSwitch   = 0;
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <main+0x218>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

				  }


				  if( (counterSwitch > TIME_SWITCH_PRESSHED)&&(leaveSwitch == 0) )
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <main+0x210>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	23fa      	movs	r3, #250	; 0xfa
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	429a      	cmp	r2, r3
 800086e:	d9b4      	bls.n	80007da <main+0xe6>
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <main+0x218>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1b0      	bne.n	80007da <main+0xe6>
				  {
					  stateSwitch ^= 1;
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <main+0x21c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2201      	movs	r2, #1
 800087e:	4053      	eors	r3, r2
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <main+0x21c>)
 8000884:	701a      	strb	r2, [r3, #0]

					  if(stateSwitch)
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <main+0x21c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d015      	beq.n	80008ba <main+0x1c6>
					  {
						  greenLEDState = 2;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <main+0x20c>)
 8000890:	2202      	movs	r2, #2
 8000892:	701a      	strb	r2, [r3, #0]
						  //LL_GPIO_SetOutputPin(EN_12V_GPIO_Port, EN_12V_Pin);
						  LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <main+0x208>)
 800089a:	0019      	movs	r1, r3
 800089c:	0010      	movs	r0, r2
 800089e:	f7ff feac 	bl	80005fa <LL_GPIO_SetOutputPin>
						  HAL_Delay(TIME_PRECHARGE_OFF);
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <main+0x220>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fb3f 	bl	8000f28 <HAL_Delay>
						  LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <main+0x208>)
 80008b0:	0019      	movs	r1, r3
 80008b2:	0010      	movs	r0, r2
 80008b4:	f7ff fea1 	bl	80005fa <LL_GPIO_SetOutputPin>
 80008b8:	e014      	b.n	80008e4 <main+0x1f0>

					  }
					  else
					  {
						  //LL_GPIO_ResetOutputPin(EN_12V_GPIO_Port, EN_12V_Pin);
						  LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <main+0x208>)
 80008c0:	0019      	movs	r1, r3
 80008c2:	0010      	movs	r0, r2
 80008c4:	f7ff fea5 	bl	8000612 <LL_GPIO_ResetOutputPin>
						  HAL_Delay(TIME_PRECHARGE_OFF);
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <main+0x220>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fb2c 	bl	8000f28 <HAL_Delay>
						  LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <main+0x208>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f7ff fe9a 	bl	8000612 <LL_GPIO_ResetOutputPin>
						  greenLEDState = 1;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <main+0x20c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
						  //HAL_Delay(CYCLES_TIME_OFF  * 1000);
					  }
					  leaveSwitch = 1;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <main+0x218>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e776      	b.n	80007da <main+0xe6>
				  //while(1);

			  }*/
			  else
			  {
				  counterSwitch = 0;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <main+0x210>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
				  leaveSwitch   = 0;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <main+0x218>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			  if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 80008f8:	e76f      	b.n	80007da <main+0xe6>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	50000400 	.word	0x50000400
 8000900:	200000c8 	.word	0x200000c8
 8000904:	200000bc 	.word	0x200000bc
 8000908:	50000800 	.word	0x50000800
 800090c:	200000c1 	.word	0x200000c1
 8000910:	200000c0 	.word	0x200000c0
 8000914:	00001388 	.word	0x00001388

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800091c:	2002      	movs	r0, #2
 800091e:	f7ff fe39 	bl	8000594 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	f7ff fe4a 	bl	80005bc <LL_FLASH_GetLatency>
 8000928:	0003      	movs	r3, r0
 800092a:	2b02      	cmp	r3, #2
 800092c:	d1fa      	bne.n	8000924 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 800092e:	f7ff fd5d 	bl	80003ec <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	f7ff fd68 	bl	8000408 <LL_RCC_HSI_IsReady>
 8000938:	0003      	movs	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d1fa      	bne.n	8000934 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	059b      	lsls	r3, r3, #22
 8000942:	2208      	movs	r2, #8
 8000944:	2100      	movs	r1, #0
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff fde0 	bl	800050c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800094c:	f7ff fdbc 	bl	80004c8 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000950:	f7ff fdfc 	bl	800054c <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	f7ff fdc5 	bl	80004e4 <LL_RCC_PLL_IsReady>
 800095a:	0003      	movs	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	d1fa      	bne.n	8000956 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fd85 	bl	8000470 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000966:	2002      	movs	r0, #2
 8000968:	f7ff fd62 	bl	8000430 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	f7ff fd73 	bl	8000458 <LL_RCC_GetSysClkSource>
 8000972:	0003      	movs	r3, r0
 8000974:	2b10      	cmp	r3, #16
 8000976:	d1fa      	bne.n	800096e <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fd8f 	bl	800049c <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <SystemClock_Config+0x84>)
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fbad 	bl	80020e0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000986:	2003      	movs	r0, #3
 8000988:	f000 fa68 	bl	8000e5c <HAL_InitTick>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000990:	f000 f968 	bl	8000c64 <Error_Handler>
  }
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	03d09000 	.word	0x03d09000

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009a6:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <MX_USART2_UART_Init+0x98>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ac:	22e1      	movs	r2, #225	; 0xe1
 80009ae:	0252      	lsls	r2, r2, #9
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fd86 	bl	80014fc <HAL_UART_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f936 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 f97b 	bl	8001cf8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f000 f92d 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 f9b2 	bl	8001d78 <HAL_UARTEx_SetRxFifoThreshold>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f000 f924 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x94>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 f930 	bl	8001c84 <HAL_UARTEx_DisableFifoMode>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 f91c 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000028 	.word	0x20000028
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	2318      	movs	r3, #24
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f001 fb56 	bl	80020fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000a50:	2004      	movs	r0, #4
 8000a52:	f7ff fd89 	bl	8000568 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000a56:	2020      	movs	r0, #32
 8000a58:	f7ff fd86 	bl	8000568 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fd83 	bl	8000568 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff fd80 	bl	8000568 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000a68:	23a0      	movs	r3, #160	; 0xa0
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fdcf 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4a78      	ldr	r2, [pc, #480]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f7ff fdc8 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	011b      	lsls	r3, r3, #4
 8000a86:	4a75      	ldr	r2, [pc, #468]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f7ff fdc1 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	019b      	lsls	r3, r3, #6
 8000a94:	4a71      	ldr	r2, [pc, #452]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000a96:	0019      	movs	r1, r3
 8000a98:	0010      	movs	r0, r2
 8000a9a:	f7ff fdba 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a9e:	4b6f      	ldr	r3, [pc, #444]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fdb5 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4a6b      	ldr	r2, [pc, #428]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f7ff fdae 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4a68      	ldr	r2, [pc, #416]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff fda7 	bl	8000612 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	0192      	lsls	r2, r2, #6
 8000aca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000acc:	003b      	movs	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ad2:	003b      	movs	r3, r7
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	003b      	movs	r3, r7
 8000ada:	4a61      	ldr	r2, [pc, #388]	; (8000c60 <MX_GPIO_Init+0x224>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f001 faa3 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DE2_Pin;
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aea:	003b      	movs	r3, r7
 8000aec:	2201      	movs	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000af0:	003b      	movs	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000af6:	003b      	movs	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afc:	003b      	movs	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DE2_GPIO_Port, &GPIO_InitStruct);
 8000b02:	003a      	movs	r2, r7
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 fa8d 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RD_EN_Pin;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2204      	movs	r2, #4
 8000b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2201      	movs	r2, #1
 8000b20:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RD_EN_GPIO_Port, &GPIO_InitStruct);
 8000b22:	003b      	movs	r3, r7
 8000b24:	4a4d      	ldr	r2, [pc, #308]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000b26:	0019      	movs	r1, r3
 8000b28:	0010      	movs	r0, r2
 8000b2a:	f001 fa7e 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PRECHRG_Pin;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	00d2      	lsls	r2, r2, #3
 8000b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2201      	movs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b42:	003b      	movs	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b48:	003b      	movs	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(PRECHRG_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	003b      	movs	r3, r7
 8000b50:	4a42      	ldr	r2, [pc, #264]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000b52:	0019      	movs	r1, r3
 8000b54:	0010      	movs	r0, r2
 8000b56:	f001 fa68 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MAINS_REL_Pin;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2201      	movs	r2, #1
 8000b66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b74:	003b      	movs	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MAINS_REL_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	4a37      	ldr	r2, [pc, #220]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000b7e:	0019      	movs	r1, r3
 8000b80:	0010      	movs	r0, r2
 8000b82:	f001 fa52 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CMP_400V_Pin;
 8000b86:	003b      	movs	r3, r7
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	0152      	lsls	r2, r2, #5
 8000b8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2202      	movs	r2, #2
 8000b98:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CMP_400V_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	f001 fa42 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SET_SERIAL_Pin;
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	0192      	lsls	r2, r2, #6
 8000bac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bae:	003b      	movs	r3, r7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bba:	003b      	movs	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SET_SERIAL_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000bca:	0019      	movs	r1, r3
 8000bcc:	0010      	movs	r0, r2
 8000bce:	f001 fa2c 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bd8:	003b      	movs	r3, r7
 8000bda:	2201      	movs	r2, #1
 8000bdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	4a1a      	ldr	r2, [pc, #104]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	f001 fa17 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2201      	movs	r2, #1
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c10:	003b      	movs	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c16:	003b      	movs	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000c20:	0019      	movs	r1, r3
 8000c22:	0010      	movs	r0, r2
 8000c24:	f001 fa01 	bl	800202a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c30:	003b      	movs	r3, r7
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c36:	003b      	movs	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c3c:	003b      	movs	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c42:	003b      	movs	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000c48:	003b      	movs	r3, r7
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <MX_GPIO_Init+0x220>)
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0010      	movs	r0, r2
 8000c50:	f001 f9eb 	bl	800202a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	50000400 	.word	0x50000400
 8000c60:	50000800 	.word	0x50000800

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <LL_RCC_SetUSARTClockSource>:
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	0c12      	lsrs	r2, r2, #16
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	0c1a      	lsrs	r2, r3, #16
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_MspInit+0x44>)
 8000ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0549      	lsls	r1, r1, #21
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	055b      	lsls	r3, r3, #21
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b08b      	sub	sp, #44	; 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	2414      	movs	r4, #20
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2314      	movs	r3, #20
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f001 f9fe 	bl	80020fc <memset>
  if(huart->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <HAL_UART_MspInit+0x98>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d135      	bne.n	8000d76 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000d0a:	23c0      	movs	r3, #192	; 0xc0
 8000d0c:	031b      	lsls	r3, r3, #12
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff ffae 	bl	8000c70 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0x9c>)
 8000d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_UART_MspInit+0x9c>)
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	0289      	lsls	r1, r1, #10
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x9c>)
 8000d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0x9c>)
 8000d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_UART_MspInit+0x9c>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_UART_MspInit+0x9c>)
 8000d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d40:	2201      	movs	r2, #1
 8000d42:	4013      	ands	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d48:	0021      	movs	r1, r4
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	220c      	movs	r2, #12
 8000d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2202      	movs	r2, #2
 8000d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2201      	movs	r2, #1
 8000d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	187a      	adds	r2, r7, r1
 8000d6a:	23a0      	movs	r3, #160	; 0xa0
 8000d6c:	05db      	lsls	r3, r3, #23
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f000 f9b1 	bl	80010d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b00b      	add	sp, #44	; 0x2c
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40021000 	.word	0x40021000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  LED_GreenHandler ();
 8000dac:	f7ff fc6e 	bl	800068c <LED_GreenHandler>
  SwitchTimingHandlar();
 8000db0:	f7ff fc52 	bl	8000658 <SwitchTimingHandlar>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f89c 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dcc:	f7ff fff7 	bl	8000dbe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000df6:	f001 f989 	bl	800210c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000dfa:	f7ff fc7b 	bl	80006f4 <main>

08000dfe <LoopForever>:

LoopForever:
  b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
  ldr   r0, =_estack
 8000e00:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e0c:	080021bc 	.word	0x080021bc
  ldr r2, =_sbss
 8000e10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e14:	200000d4 	.word	0x200000d4

08000e18 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC1_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x3c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Init+0x3c>)
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	0049      	lsls	r1, r1, #1
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f810 	bl	8000e5c <HAL_InitTick>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e001      	b.n	8000e4c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff ff2a 	bl	8000ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40022000 	.word	0x40022000

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_InitTick+0x88>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d02b      	beq.n	8000ecc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_InitTick+0x8c>)
 8000e76:	681c      	ldr	r4, [r3, #0]
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_InitTick+0x88>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	23fa      	movs	r3, #250	; 0xfa
 8000e80:	0098      	lsls	r0, r3, #2
 8000e82:	f7ff f93d 	bl	8000100 <__udivsi3>
 8000e86:	0003      	movs	r3, r0
 8000e88:	0019      	movs	r1, r3
 8000e8a:	0020      	movs	r0, r4
 8000e8c:	f7ff f938 	bl	8000100 <__udivsi3>
 8000e90:	0003      	movs	r3, r0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f913 	bl	80010be <HAL_SYSTICK_Config>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d112      	bne.n	8000ec2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d80a      	bhi.n	8000eb8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f8f2 	bl	8001094 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_InitTick+0x90>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e00d      	b.n	8000ed4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e008      	b.n	8000ed4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e003      	b.n	8000ed4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ecc:	230f      	movs	r3, #15
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	781b      	ldrb	r3, [r3, #0]
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b005      	add	sp, #20
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x1c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x20>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	18d2      	adds	r2, r2, r3
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_IncTick+0x20>)
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	200000d0 	.word	0x200000d0

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <HAL_GetTick+0x10>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	200000d0 	.word	0x200000d0

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff fff0 	bl	8000f14 <HAL_GetTick>
 8000f34:	0003      	movs	r3, r0
 8000f36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	001a      	movs	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	189b      	adds	r3, r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	f7ff ffe0 	bl	8000f14 <HAL_GetTick>
 8000f54:	0002      	movs	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d828      	bhi.n	8000fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f86:	4a2f      	ldr	r2, [pc, #188]	; (8001044 <__NVIC_SetPriority+0xd4>)
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	33c0      	adds	r3, #192	; 0xc0
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	589b      	ldr	r3, [r3, r2]
 8000f96:	1dfa      	adds	r2, r7, #7
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	21ff      	movs	r1, #255	; 0xff
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	4003      	ands	r3, r0
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <__NVIC_SetPriority+0xd4>)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	33c0      	adds	r3, #192	; 0xc0
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fd6:	e031      	b.n	800103c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <__NVIC_SetPriority+0xd8>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	0019      	movs	r1, r3
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3306      	adds	r3, #6
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	18d3      	adds	r3, r2, r3
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1dfa      	adds	r2, r7, #7
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	00d2      	lsls	r2, r2, #3
 8000ffe:	21ff      	movs	r1, #255	; 0xff
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	43d2      	mvns	r2, r2
 8001006:	401a      	ands	r2, r3
 8001008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	401a      	ands	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0018      	movs	r0, r3
 8001018:	2303      	movs	r3, #3
 800101a:	4003      	ands	r3, r0
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <__NVIC_SetPriority+0xd8>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	001c      	movs	r4, r3
 8001028:	230f      	movs	r3, #15
 800102a:	4023      	ands	r3, r4
 800102c:	3b08      	subs	r3, #8
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	430a      	orrs	r2, r1
 8001032:	3306      	adds	r3, #6
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	18c3      	adds	r3, r0, r3
 8001038:	3304      	adds	r3, #4
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b003      	add	sp, #12
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	045b      	lsls	r3, r3, #17
 800105c:	429a      	cmp	r2, r3
 800105e:	d301      	bcc.n	8001064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001060:	2301      	movs	r3, #1
 8001062:	e010      	b.n	8001086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SysTick_Config+0x44>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	3a01      	subs	r2, #1
 800106a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106c:	2301      	movs	r3, #1
 800106e:	425b      	negs	r3, r3
 8001070:	2103      	movs	r1, #3
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ff7c 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x44>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x44>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	210f      	movs	r1, #15
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff ffbf 	bl	800104c <SysTick_Config>
 80010ce:	0003      	movs	r3, r0
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e147      	b.n	8001378 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4091      	lsls	r1, r2
 80010f2:	000a      	movs	r2, r1
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <HAL_GPIO_Init+0x28>
 80010fe:	e138      	b.n	8001372 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x40>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2203      	movs	r2, #3
 8001112:	4013      	ands	r3, r2
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	2201      	movs	r2, #1
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	4013      	ands	r3, r2
 8001182:	2b03      	cmp	r3, #3
 8001184:	d017      	beq.n	80011b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	4013      	ands	r3, r2
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d123      	bne.n	800120a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	58d3      	ldr	r3, [r2, r3]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2207      	movs	r2, #7
 80011d4:	4013      	ands	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2107      	movs	r1, #7
 80011ee:	400b      	ands	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	43da      	mvns	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	401a      	ands	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	23c0      	movs	r3, #192	; 0xc0
 8001244:	029b      	lsls	r3, r3, #10
 8001246:	4013      	ands	r3, r2
 8001248:	d100      	bne.n	800124c <HAL_GPIO_Init+0x174>
 800124a:	e092      	b.n	8001372 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3318      	adds	r3, #24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	589b      	ldr	r3, [r3, r2]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2203      	movs	r2, #3
 800125e:	4013      	ands	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	220f      	movs	r2, #15
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	23a0      	movs	r3, #160	; 0xa0
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	429a      	cmp	r2, r3
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1ca>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a45      	ldr	r2, [pc, #276]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1c6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a44      	ldr	r2, [pc, #272]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1c2>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a43      	ldr	r2, [pc, #268]	; (800139c <HAL_GPIO_Init+0x2c4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1be>
 8001292:	2303      	movs	r3, #3
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x1cc>
 8001296:	2305      	movs	r3, #5
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x1cc>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x1cc>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x1cc>
 80012a2:	2300      	movs	r3, #0
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	2103      	movs	r1, #3
 80012a8:	400a      	ands	r2, r1
 80012aa:	00d2      	lsls	r2, r2, #3
 80012ac:	4093      	lsls	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012b4:	4936      	ldr	r1, [pc, #216]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3318      	adds	r3, #24
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	035b      	lsls	r3, r3, #13
 80012da:	4013      	ands	r3, r2
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43da      	mvns	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	039b      	lsls	r3, r3, #14
 8001304:	4013      	ands	r3, r2
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 8001318:	2384      	movs	r3, #132	; 0x84
 800131a:	58d3      	ldr	r3, [r2, r3]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43da      	mvns	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	029b      	lsls	r3, r3, #10
 8001330:	4013      	ands	r3, r2
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800133c:	4914      	ldr	r1, [pc, #80]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800133e:	2284      	movs	r2, #132	; 0x84
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	58d3      	ldr	r3, [r2, r3]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	4013      	ands	r3, r2
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800136a:	4909      	ldr	r1, [pc, #36]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	40da      	lsrs	r2, r3
 8001380:	1e13      	subs	r3, r2, #0
 8001382:	d000      	beq.n	8001386 <HAL_GPIO_Init+0x2ae>
 8001384:	e6b0      	b.n	80010e8 <HAL_GPIO_Init+0x10>
  }
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b006      	add	sp, #24
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021800 	.word	0x40021800
 8001394:	50000400 	.word	0x50000400
 8001398:	50000800 	.word	0x50000800
 800139c:	50000c00 	.word	0x50000c00

080013a0 <LL_RCC_GetAPB1Prescaler>:
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	23e0      	movs	r3, #224	; 0xe0
 80013aa:	01db      	lsls	r3, r3, #7
 80013ac:	4013      	ands	r3, r2
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2238      	movs	r2, #56	; 0x38
 80013c4:	4013      	ands	r3, r2
 80013c6:	d10f      	bne.n	80013e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0adb      	lsrs	r3, r3, #11
 80013ce:	2207      	movs	r2, #7
 80013d0:	4013      	ands	r3, r2
 80013d2:	2201      	movs	r2, #1
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	4835      	ldr	r0, [pc, #212]	; (80014b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80013de:	f7fe fe8f 	bl	8000100 <__udivsi3>
 80013e2:	0003      	movs	r3, r0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	e05d      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2238      	movs	r2, #56	; 0x38
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	e054      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2238      	movs	r2, #56	; 0x38
 8001400:	4013      	ands	r3, r2
 8001402:	2b10      	cmp	r3, #16
 8001404:	d138      	bne.n	8001478 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2203      	movs	r2, #3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	2207      	movs	r2, #7
 8001418:	4013      	ands	r3, r2
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d10d      	bne.n	8001440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	4824      	ldr	r0, [pc, #144]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001428:	f7fe fe6a 	bl	8000100 <__udivsi3>
 800142c:	0003      	movs	r3, r0
 800142e:	0019      	movs	r1, r3
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	227f      	movs	r2, #127	; 0x7f
 8001438:	4013      	ands	r3, r2
 800143a:	434b      	muls	r3, r1
 800143c:	617b      	str	r3, [r7, #20]
        break;
 800143e:	e00d      	b.n	800145c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001444:	f7fe fe5c 	bl	8000100 <__udivsi3>
 8001448:	0003      	movs	r3, r0
 800144a:	0019      	movs	r1, r3
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	227f      	movs	r2, #127	; 0x7f
 8001454:	4013      	ands	r3, r2
 8001456:	434b      	muls	r3, r1
 8001458:	617b      	str	r3, [r7, #20]
        break;
 800145a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0f5b      	lsrs	r3, r3, #29
 8001462:	2207      	movs	r2, #7
 8001464:	4013      	ands	r3, r2
 8001466:	3301      	adds	r3, #1
 8001468:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	6978      	ldr	r0, [r7, #20]
 800146e:	f7fe fe47 	bl	8000100 <__udivsi3>
 8001472:	0003      	movs	r3, r0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e015      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2238      	movs	r2, #56	; 0x38
 800147e:	4013      	ands	r3, r2
 8001480:	2b20      	cmp	r3, #32
 8001482:	d103      	bne.n	800148c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2238      	movs	r2, #56	; 0x38
 8001492:	4013      	ands	r3, r2
 8001494:	2b18      	cmp	r3, #24
 8001496:	d103      	bne.n	80014a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001498:	23fa      	movs	r3, #250	; 0xfa
 800149a:	01db      	lsls	r3, r3, #7
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	e001      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80014a4:	693b      	ldr	r3, [r7, #16]
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b006      	add	sp, #24
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	40021000 	.word	0x40021000
 80014b4:	00f42400 	.word	0x00f42400
 80014b8:	007a1200 	.word	0x007a1200

080014bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_RCC_GetHCLKFreq+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80014d4:	f7ff fff2 	bl	80014bc <HAL_RCC_GetHCLKFreq>
 80014d8:	0004      	movs	r4, r0
 80014da:	f7ff ff61 	bl	80013a0 <LL_RCC_GetAPB1Prescaler>
 80014de:	0003      	movs	r3, r0
 80014e0:	0b1a      	lsrs	r2, r3, #12
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	58d3      	ldr	r3, [r2, r3]
 80014e8:	221f      	movs	r2, #31
 80014ea:	4013      	ands	r3, r2
 80014ec:	40dc      	lsrs	r4, r3
 80014ee:	0023      	movs	r3, r4
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bdb0      	pop	{r4, r5, r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	0800216c 	.word	0x0800216c

080014fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e046      	b.n	800159c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2288      	movs	r2, #136	; 0x88
 8001512:	589b      	ldr	r3, [r3, r2]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d107      	bne.n	8001528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2284      	movs	r2, #132	; 0x84
 800151c:	2100      	movs	r1, #0
 800151e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff fbe0 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2288      	movs	r2, #136	; 0x88
 800152c:	2124      	movs	r1, #36	; 0x24
 800152e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2101      	movs	r1, #1
 800153c:	438a      	bics	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	0018      	movs	r0, r3
 8001544:	f000 f830 	bl	80015a8 <UART_SetConfig>
 8001548:	0003      	movs	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e024      	b.n	800159c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f9c7 	bl	80018f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	490d      	ldr	r1, [pc, #52]	; (80015a4 <HAL_UART_Init+0xa8>)
 800156e:	400a      	ands	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	212a      	movs	r1, #42	; 0x2a
 800157e:	438a      	bics	r2, r1
 8001580:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f000 fa5f 	bl	8001a58 <UART_CheckIdleState>
 800159a:	0003      	movs	r3, r0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	ffffb7ff 	.word	0xffffb7ff

080015a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80015b0:	231a      	movs	r3, #26
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4abc      	ldr	r2, [pc, #752]	; (80018c8 <UART_SetConfig+0x320>)
 80015d8:	4013      	ands	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4ab7      	ldr	r2, [pc, #732]	; (80018cc <UART_SetConfig+0x324>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	4313      	orrs	r3, r2
 800160c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4aae      	ldr	r2, [pc, #696]	; (80018d0 <UART_SetConfig+0x328>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	220f      	movs	r2, #15
 800162c:	4393      	bics	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4aa4      	ldr	r2, [pc, #656]	; (80018d4 <UART_SetConfig+0x32c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d127      	bne.n	8001696 <UART_SetConfig+0xee>
 8001646:	4ba4      	ldr	r3, [pc, #656]	; (80018d8 <UART_SetConfig+0x330>)
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	2203      	movs	r2, #3
 800164c:	4013      	ands	r3, r2
 800164e:	2b03      	cmp	r3, #3
 8001650:	d017      	beq.n	8001682 <UART_SetConfig+0xda>
 8001652:	d81b      	bhi.n	800168c <UART_SetConfig+0xe4>
 8001654:	2b02      	cmp	r3, #2
 8001656:	d00a      	beq.n	800166e <UART_SetConfig+0xc6>
 8001658:	d818      	bhi.n	800168c <UART_SetConfig+0xe4>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <UART_SetConfig+0xbc>
 800165e:	2b01      	cmp	r3, #1
 8001660:	d00a      	beq.n	8001678 <UART_SetConfig+0xd0>
 8001662:	e013      	b.n	800168c <UART_SetConfig+0xe4>
 8001664:	231b      	movs	r3, #27
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e058      	b.n	8001720 <UART_SetConfig+0x178>
 800166e:	231b      	movs	r3, #27
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2202      	movs	r2, #2
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e053      	b.n	8001720 <UART_SetConfig+0x178>
 8001678:	231b      	movs	r3, #27
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2204      	movs	r2, #4
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e04e      	b.n	8001720 <UART_SetConfig+0x178>
 8001682:	231b      	movs	r3, #27
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2208      	movs	r2, #8
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e049      	b.n	8001720 <UART_SetConfig+0x178>
 800168c:	231b      	movs	r3, #27
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2210      	movs	r2, #16
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e044      	b.n	8001720 <UART_SetConfig+0x178>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a90      	ldr	r2, [pc, #576]	; (80018dc <UART_SetConfig+0x334>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d127      	bne.n	80016f0 <UART_SetConfig+0x148>
 80016a0:	4b8d      	ldr	r3, [pc, #564]	; (80018d8 <UART_SetConfig+0x330>)
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	220c      	movs	r2, #12
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	d017      	beq.n	80016dc <UART_SetConfig+0x134>
 80016ac:	d81b      	bhi.n	80016e6 <UART_SetConfig+0x13e>
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d00a      	beq.n	80016c8 <UART_SetConfig+0x120>
 80016b2:	d818      	bhi.n	80016e6 <UART_SetConfig+0x13e>
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <UART_SetConfig+0x116>
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00a      	beq.n	80016d2 <UART_SetConfig+0x12a>
 80016bc:	e013      	b.n	80016e6 <UART_SetConfig+0x13e>
 80016be:	231b      	movs	r3, #27
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e02b      	b.n	8001720 <UART_SetConfig+0x178>
 80016c8:	231b      	movs	r3, #27
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2202      	movs	r2, #2
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e026      	b.n	8001720 <UART_SetConfig+0x178>
 80016d2:	231b      	movs	r3, #27
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	2204      	movs	r2, #4
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e021      	b.n	8001720 <UART_SetConfig+0x178>
 80016dc:	231b      	movs	r3, #27
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	2208      	movs	r2, #8
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e01c      	b.n	8001720 <UART_SetConfig+0x178>
 80016e6:	231b      	movs	r3, #27
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2210      	movs	r2, #16
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e017      	b.n	8001720 <UART_SetConfig+0x178>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <UART_SetConfig+0x338>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d104      	bne.n	8001704 <UART_SetConfig+0x15c>
 80016fa:	231b      	movs	r3, #27
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e00d      	b.n	8001720 <UART_SetConfig+0x178>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a76      	ldr	r2, [pc, #472]	; (80018e4 <UART_SetConfig+0x33c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d104      	bne.n	8001718 <UART_SetConfig+0x170>
 800170e:	231b      	movs	r3, #27
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e003      	b.n	8001720 <UART_SetConfig+0x178>
 8001718:	231b      	movs	r3, #27
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2210      	movs	r2, #16
 800171e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	429a      	cmp	r2, r3
 800172a:	d000      	beq.n	800172e <UART_SetConfig+0x186>
 800172c:	e065      	b.n	80017fa <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800172e:	231b      	movs	r3, #27
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d015      	beq.n	8001764 <UART_SetConfig+0x1bc>
 8001738:	dc18      	bgt.n	800176c <UART_SetConfig+0x1c4>
 800173a:	2b04      	cmp	r3, #4
 800173c:	d00d      	beq.n	800175a <UART_SetConfig+0x1b2>
 800173e:	dc15      	bgt.n	800176c <UART_SetConfig+0x1c4>
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <UART_SetConfig+0x1a2>
 8001744:	2b02      	cmp	r3, #2
 8001746:	d005      	beq.n	8001754 <UART_SetConfig+0x1ac>
 8001748:	e010      	b.n	800176c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800174a:	f7ff fec1 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
 800174e:	0003      	movs	r3, r0
 8001750:	617b      	str	r3, [r7, #20]
        break;
 8001752:	e012      	b.n	800177a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <UART_SetConfig+0x340>)
 8001756:	617b      	str	r3, [r7, #20]
        break;
 8001758:	e00f      	b.n	800177a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800175a:	f7ff fe2d 	bl	80013b8 <HAL_RCC_GetSysClockFreq>
 800175e:	0003      	movs	r3, r0
 8001760:	617b      	str	r3, [r7, #20]
        break;
 8001762:	e00a      	b.n	800177a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	617b      	str	r3, [r7, #20]
        break;
 800176a:	e006      	b.n	800177a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001770:	231a      	movs	r3, #26
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
        break;
 8001778:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d100      	bne.n	8001782 <UART_SetConfig+0x1da>
 8001780:	e08d      	b.n	800189e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001786:	4b59      	ldr	r3, [pc, #356]	; (80018ec <UART_SetConfig+0x344>)
 8001788:	0052      	lsls	r2, r2, #1
 800178a:	5ad3      	ldrh	r3, [r2, r3]
 800178c:	0019      	movs	r1, r3
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7fe fcb6 	bl	8000100 <__udivsi3>
 8001794:	0003      	movs	r3, r0
 8001796:	005a      	lsls	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	18d2      	adds	r2, r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f7fe fcaa 	bl	8000100 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d91c      	bls.n	80017f0 <UART_SetConfig+0x248>
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	429a      	cmp	r2, r3
 80017be:	d217      	bcs.n	80017f0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	200e      	movs	r0, #14
 80017c6:	183b      	adds	r3, r7, r0
 80017c8:	210f      	movs	r1, #15
 80017ca:	438a      	bics	r2, r1
 80017cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	b299      	uxth	r1, r3
 80017da:	183b      	adds	r3, r7, r0
 80017dc:	183a      	adds	r2, r7, r0
 80017de:	8812      	ldrh	r2, [r2, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	183a      	adds	r2, r7, r0
 80017ea:	8812      	ldrh	r2, [r2, #0]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	e056      	b.n	800189e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80017f0:	231a      	movs	r3, #26
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e051      	b.n	800189e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80017fa:	231b      	movs	r3, #27
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d015      	beq.n	8001830 <UART_SetConfig+0x288>
 8001804:	dc18      	bgt.n	8001838 <UART_SetConfig+0x290>
 8001806:	2b04      	cmp	r3, #4
 8001808:	d00d      	beq.n	8001826 <UART_SetConfig+0x27e>
 800180a:	dc15      	bgt.n	8001838 <UART_SetConfig+0x290>
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <UART_SetConfig+0x26e>
 8001810:	2b02      	cmp	r3, #2
 8001812:	d005      	beq.n	8001820 <UART_SetConfig+0x278>
 8001814:	e010      	b.n	8001838 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001816:	f7ff fe5b 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
 800181a:	0003      	movs	r3, r0
 800181c:	617b      	str	r3, [r7, #20]
        break;
 800181e:	e012      	b.n	8001846 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <UART_SetConfig+0x340>)
 8001822:	617b      	str	r3, [r7, #20]
        break;
 8001824:	e00f      	b.n	8001846 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001826:	f7ff fdc7 	bl	80013b8 <HAL_RCC_GetSysClockFreq>
 800182a:	0003      	movs	r3, r0
 800182c:	617b      	str	r3, [r7, #20]
        break;
 800182e:	e00a      	b.n	8001846 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	617b      	str	r3, [r7, #20]
        break;
 8001836:	e006      	b.n	8001846 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800183c:	231a      	movs	r3, #26
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
        break;
 8001844:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d028      	beq.n	800189e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <UART_SetConfig+0x344>)
 8001852:	0052      	lsls	r2, r2, #1
 8001854:	5ad3      	ldrh	r3, [r2, r3]
 8001856:	0019      	movs	r1, r3
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	f7fe fc51 	bl	8000100 <__udivsi3>
 800185e:	0003      	movs	r3, r0
 8001860:	001a      	movs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	18d2      	adds	r2, r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	0019      	movs	r1, r3
 8001870:	0010      	movs	r0, r2
 8001872:	f7fe fc45 	bl	8000100 <__udivsi3>
 8001876:	0003      	movs	r3, r0
 8001878:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d90a      	bls.n	8001896 <UART_SetConfig+0x2ee>
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	429a      	cmp	r2, r3
 8001888:	d205      	bcs.n	8001896 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	e003      	b.n	800189e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8001896:	231a      	movs	r3, #26
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	226a      	movs	r2, #106	; 0x6a
 80018a2:	2101      	movs	r1, #1
 80018a4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2268      	movs	r2, #104	; 0x68
 80018aa:	2101      	movs	r1, #1
 80018ac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80018ba:	231a      	movs	r3, #26
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b008      	add	sp, #32
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	cfff69f3 	.word	0xcfff69f3
 80018cc:	ffffcfff 	.word	0xffffcfff
 80018d0:	11fff4ff 	.word	0x11fff4ff
 80018d4:	40013800 	.word	0x40013800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40004400 	.word	0x40004400
 80018e0:	40004800 	.word	0x40004800
 80018e4:	40004c00 	.word	0x40004c00
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	0800218c 	.word	0x0800218c

080018f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	2201      	movs	r2, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	d00b      	beq.n	800191a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <UART_AdvFeatureConfig+0x144>)
 800190a:	4013      	ands	r3, r2
 800190c:	0019      	movs	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d00b      	beq.n	800193c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <UART_AdvFeatureConfig+0x148>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	2204      	movs	r2, #4
 8001942:	4013      	ands	r3, r2
 8001944:	d00b      	beq.n	800195e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <UART_AdvFeatureConfig+0x14c>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	2208      	movs	r2, #8
 8001964:	4013      	ands	r3, r2
 8001966:	d00b      	beq.n	8001980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a34      	ldr	r2, [pc, #208]	; (8001a40 <UART_AdvFeatureConfig+0x150>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	2210      	movs	r2, #16
 8001986:	4013      	ands	r3, r2
 8001988:	d00b      	beq.n	80019a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a2c      	ldr	r2, [pc, #176]	; (8001a44 <UART_AdvFeatureConfig+0x154>)
 8001992:	4013      	ands	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	2220      	movs	r2, #32
 80019a8:	4013      	ands	r3, r2
 80019aa:	d00b      	beq.n	80019c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <UART_AdvFeatureConfig+0x158>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	4013      	ands	r3, r2
 80019cc:	d01d      	beq.n	8001a0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <UART_AdvFeatureConfig+0x15c>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	035b      	lsls	r3, r3, #13
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10b      	bne.n	8001a0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <UART_AdvFeatureConfig+0x160>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	4013      	ands	r3, r2
 8001a12:	d00b      	beq.n	8001a2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <UART_AdvFeatureConfig+0x164>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]
  }
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	fffdffff 	.word	0xfffdffff
 8001a38:	fffeffff 	.word	0xfffeffff
 8001a3c:	fffbffff 	.word	0xfffbffff
 8001a40:	ffff7fff 	.word	0xffff7fff
 8001a44:	ffffefff 	.word	0xffffefff
 8001a48:	ffffdfff 	.word	0xffffdfff
 8001a4c:	ffefffff 	.word	0xffefffff
 8001a50:	ff9fffff 	.word	0xff9fffff
 8001a54:	fff7ffff 	.word	0xfff7ffff

08001a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2290      	movs	r2, #144	; 0x90
 8001a64:	2100      	movs	r1, #0
 8001a66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001a68:	f7ff fa54 	bl	8000f14 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2208      	movs	r2, #8
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d10c      	bne.n	8001a98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0391      	lsls	r1, r2, #14
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <UART_CheckIdleState+0x98>)
 8001a88:	9200      	str	r2, [sp, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f000 f832 	bl	8001af4 <UART_WaitOnFlagUntilTimeout>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d001      	beq.n	8001a98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e026      	b.n	8001ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d10c      	bne.n	8001ac0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	03d1      	lsls	r1, r2, #15
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <UART_CheckIdleState+0x98>)
 8001ab0:	9200      	str	r2, [sp, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f000 f81e 	bl	8001af4 <UART_WaitOnFlagUntilTimeout>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d001      	beq.n	8001ac0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e012      	b.n	8001ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2288      	movs	r2, #136	; 0x88
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	228c      	movs	r2, #140	; 0x8c
 8001acc:	2120      	movs	r1, #32
 8001ace:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2284      	movs	r2, #132	; 0x84
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b004      	add	sp, #16
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	01ffffff 	.word	0x01ffffff

08001af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b094      	sub	sp, #80	; 0x50
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b04:	e0a7      	b.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b08:	3301      	adds	r3, #1
 8001b0a:	d100      	bne.n	8001b0e <UART_WaitOnFlagUntilTimeout+0x1a>
 8001b0c:	e0a3      	b.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0e:	f7ff fa01 	bl	8000f14 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d302      	bcc.n	8001b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d13f      	bne.n	8001ba4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b24:	f3ef 8310 	mrs	r3, PRIMASK
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b2e:	2301      	movs	r3, #1
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	f383 8810 	msr	PRIMASK, r3
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	494e      	ldr	r1, [pc, #312]	; (8001c80 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	f383 8810 	msr	PRIMASK, r3
}
 8001b54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b56:	f3ef 8310 	mrs	r3, PRIMASK
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b60:	2301      	movs	r3, #1
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	f383 8810 	msr	PRIMASK, r3
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2101      	movs	r1, #1
 8001b78:	438a      	bics	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b82:	f383 8810 	msr	PRIMASK, r3
}
 8001b86:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2288      	movs	r2, #136	; 0x88
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	228c      	movs	r2, #140	; 0x8c
 8001b94:	2120      	movs	r1, #32
 8001b96:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2284      	movs	r2, #132	; 0x84
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e069      	b.n	8001c78 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2204      	movs	r2, #4
 8001bac:	4013      	ands	r3, r2
 8001bae:	d052      	beq.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	401a      	ands	r2, r3
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d148      	bne.n	8001c56 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bce:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd2:	613b      	str	r3, [r7, #16]
  return(result);
 8001bd4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd8:	2301      	movs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f383 8810 	msr	PRIMASK, r3
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4924      	ldr	r1, [pc, #144]	; (8001c80 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f383 8810 	msr	PRIMASK, r3
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c00:	f3ef 8310 	mrs	r3, PRIMASK
 8001c04:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c06:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f383 8810 	msr	PRIMASK, r3
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	438a      	bics	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f383 8810 	msr	PRIMASK, r3
}
 8001c30:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2288      	movs	r2, #136	; 0x88
 8001c36:	2120      	movs	r1, #32
 8001c38:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	228c      	movs	r2, #140	; 0x8c
 8001c3e:	2120      	movs	r1, #32
 8001c40:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2290      	movs	r2, #144	; 0x90
 8001c46:	2120      	movs	r1, #32
 8001c48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2284      	movs	r2, #132	; 0x84
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e010      	b.n	8001c78 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	425a      	negs	r2, r3
 8001c66:	4153      	adcs	r3, r2
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d100      	bne.n	8001c76 <UART_WaitOnFlagUntilTimeout+0x182>
 8001c74:	e747      	b.n	8001b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b014      	add	sp, #80	; 0x50
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	fffffe5f 	.word	0xfffffe5f

08001c84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2284      	movs	r2, #132	; 0x84
 8001c90:	5c9b      	ldrb	r3, [r3, r2]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_UARTEx_DisableFifoMode+0x16>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e027      	b.n	8001cea <HAL_UARTEx_DisableFifoMode+0x66>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2284      	movs	r2, #132	; 0x84
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2288      	movs	r2, #136	; 0x88
 8001ca6:	2124      	movs	r1, #36	; 0x24
 8001ca8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2288      	movs	r2, #136	; 0x88
 8001cdc:	2120      	movs	r1, #32
 8001cde:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2284      	movs	r2, #132	; 0x84
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	dfffffff 	.word	0xdfffffff

08001cf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2284      	movs	r2, #132	; 0x84
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e02e      	b.n	8001d6e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2284      	movs	r2, #132	; 0x84
 8001d14:	2101      	movs	r1, #1
 8001d16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2288      	movs	r2, #136	; 0x88
 8001d1c:	2124      	movs	r1, #36	; 0x24
 8001d1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2101      	movs	r1, #1
 8001d34:	438a      	bics	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	08d9      	lsrs	r1, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 f854 	bl	8001dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2288      	movs	r2, #136	; 0x88
 8001d60:	2120      	movs	r1, #32
 8001d62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2284      	movs	r2, #132	; 0x84
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2284      	movs	r2, #132	; 0x84
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e02f      	b.n	8001df0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2284      	movs	r2, #132	; 0x84
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2288      	movs	r2, #136	; 0x88
 8001d9c:	2124      	movs	r1, #36	; 0x24
 8001d9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2101      	movs	r1, #1
 8001db4:	438a      	bics	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f813 	bl	8001dfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2288      	movs	r2, #136	; 0x88
 8001de2:	2120      	movs	r1, #32
 8001de4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2284      	movs	r2, #132	; 0x84
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	f1ffffff 	.word	0xf1ffffff

08001dfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d108      	bne.n	8001e1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	226a      	movs	r2, #106	; 0x6a
 8001e10:	2101      	movs	r1, #1
 8001e12:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2268      	movs	r2, #104	; 0x68
 8001e18:	2101      	movs	r1, #1
 8001e1a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8001e1c:	e043      	b.n	8001ea6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8001e1e:	260f      	movs	r6, #15
 8001e20:	19bb      	adds	r3, r7, r6
 8001e22:	2208      	movs	r2, #8
 8001e24:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8001e26:	200e      	movs	r0, #14
 8001e28:	183b      	adds	r3, r7, r0
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	0e5b      	lsrs	r3, r3, #25
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	240d      	movs	r4, #13
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	2107      	movs	r1, #7
 8001e3e:	400a      	ands	r2, r1
 8001e40:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	0f5b      	lsrs	r3, r3, #29
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	250c      	movs	r5, #12
 8001e4e:	197b      	adds	r3, r7, r5
 8001e50:	2107      	movs	r1, #7
 8001e52:	400a      	ands	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001e56:	183b      	adds	r3, r7, r0
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	197a      	adds	r2, r7, r5
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	4914      	ldr	r1, [pc, #80]	; (8001eb0 <UARTEx_SetNbDataToProcess+0xb4>)
 8001e60:	5c8a      	ldrb	r2, [r1, r2]
 8001e62:	435a      	muls	r2, r3
 8001e64:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8001e66:	197b      	adds	r3, r7, r5
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <UARTEx_SetNbDataToProcess+0xb8>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001e6e:	0019      	movs	r1, r3
 8001e70:	f7fe f9d0 	bl	8000214 <__divsi3>
 8001e74:	0003      	movs	r3, r0
 8001e76:	b299      	uxth	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	226a      	movs	r2, #106	; 0x6a
 8001e7c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8001e7e:	19bb      	adds	r3, r7, r6
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	193a      	adds	r2, r7, r4
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	490a      	ldr	r1, [pc, #40]	; (8001eb0 <UARTEx_SetNbDataToProcess+0xb4>)
 8001e88:	5c8a      	ldrb	r2, [r1, r2]
 8001e8a:	435a      	muls	r2, r3
 8001e8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <UARTEx_SetNbDataToProcess+0xb8>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8001e96:	0019      	movs	r1, r3
 8001e98:	f7fe f9bc 	bl	8000214 <__divsi3>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	b299      	uxth	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2268      	movs	r2, #104	; 0x68
 8001ea4:	5299      	strh	r1, [r3, r2]
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b005      	add	sp, #20
 8001eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	080021a4 	.word	0x080021a4
 8001eb4:	080021ac 	.word	0x080021ac

08001eb8 <LL_GPIO_SetPinMode>:
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6819      	ldr	r1, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	435b      	muls	r3, r3
 8001ecc:	001a      	movs	r2, r3
 8001ece:	0013      	movs	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	400b      	ands	r3, r1
 8001ed8:	001a      	movs	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	435b      	muls	r3, r3
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	434b      	muls	r3, r1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <LL_GPIO_SetPinOutputType>:
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	43d2      	mvns	r2, r2
 8001f04:	401a      	ands	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	434b      	muls	r3, r1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	605a      	str	r2, [r3, #4]
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <LL_GPIO_SetPinSpeed>:
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	435b      	muls	r3, r3
 8001f2e:	001a      	movs	r2, r3
 8001f30:	0013      	movs	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	189b      	adds	r3, r3, r2
 8001f36:	43db      	mvns	r3, r3
 8001f38:	400b      	ands	r3, r1
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	435b      	muls	r3, r3
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	434b      	muls	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	609a      	str	r2, [r3, #8]
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b004      	add	sp, #16
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <LL_GPIO_SetPinPull>:
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	435b      	muls	r3, r3
 8001f66:	001a      	movs	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	189b      	adds	r3, r3, r2
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	400b      	ands	r3, r1
 8001f72:	001a      	movs	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	435b      	muls	r3, r3
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	434b      	muls	r3, r1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	60da      	str	r2, [r3, #12]
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b004      	add	sp, #16
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <LL_GPIO_SetAFPin_0_7>:
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a19      	ldr	r1, [r3, #32]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	435b      	muls	r3, r3
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4353      	muls	r3, r2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	435a      	muls	r2, r3
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	43db      	mvns	r3, r3
 8001fae:	400b      	ands	r3, r1
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	435b      	muls	r3, r3
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	434b      	muls	r3, r1
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	434b      	muls	r3, r1
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	434b      	muls	r3, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	621a      	str	r2, [r3, #32]
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <LL_GPIO_SetAFPin_8_15>:
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	0a12      	lsrs	r2, r2, #8
 8001fe8:	4353      	muls	r3, r2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	0a12      	lsrs	r2, r2, #8
 8001fee:	4353      	muls	r3, r2
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	0a12      	lsrs	r2, r2, #8
 8001ff4:	435a      	muls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	400b      	ands	r3, r1
 8002000:	001a      	movs	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	0a09      	lsrs	r1, r1, #8
 800200a:	434b      	muls	r3, r1
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	0a09      	lsrs	r1, r1, #8
 8002010:	434b      	muls	r3, r1
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	0a09      	lsrs	r1, r1, #8
 8002016:	434b      	muls	r3, r1
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	434b      	muls	r3, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}

0800202a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002038:	e047      	b.n	80020ca <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4091      	lsls	r1, r2
 8002044:	000a      	movs	r2, r1
 8002046:	4013      	ands	r3, r2
 8002048:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d039      	beq.n	80020c4 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d003      	beq.n	8002060 <LL_GPIO_Init+0x36>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d10d      	bne.n	800207c <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff ff56 	bl	8001f1a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff ff3a 	bl	8001ef0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff ff64 	bl	8001f52 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d111      	bne.n	80020b6 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2bff      	cmp	r3, #255	; 0xff
 8002096:	d807      	bhi.n	80020a8 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff ff72 	bl	8001f8a <LL_GPIO_SetAFPin_0_7>
 80020a6:	e006      	b.n	80020b6 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff8d 	bl	8001fd0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f7ff fefa 	bl	8001eb8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	40da      	lsrs	r2, r3
 80020d2:	1e13      	subs	r3, r2, #0
 80020d4:	d1b1      	bne.n	800203a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}

080020e0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <LL_SetSystemCoreClock+0x18>)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	20000000 	.word	0x20000000

080020fc <memset>:
 80020fc:	0003      	movs	r3, r0
 80020fe:	1882      	adds	r2, r0, r2
 8002100:	4293      	cmp	r3, r2
 8002102:	d100      	bne.n	8002106 <memset+0xa>
 8002104:	4770      	bx	lr
 8002106:	7019      	strb	r1, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	e7f9      	b.n	8002100 <memset+0x4>

0800210c <__libc_init_array>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	2600      	movs	r6, #0
 8002110:	4c0c      	ldr	r4, [pc, #48]	; (8002144 <__libc_init_array+0x38>)
 8002112:	4d0d      	ldr	r5, [pc, #52]	; (8002148 <__libc_init_array+0x3c>)
 8002114:	1b64      	subs	r4, r4, r5
 8002116:	10a4      	asrs	r4, r4, #2
 8002118:	42a6      	cmp	r6, r4
 800211a:	d109      	bne.n	8002130 <__libc_init_array+0x24>
 800211c:	2600      	movs	r6, #0
 800211e:	f000 f819 	bl	8002154 <_init>
 8002122:	4c0a      	ldr	r4, [pc, #40]	; (800214c <__libc_init_array+0x40>)
 8002124:	4d0a      	ldr	r5, [pc, #40]	; (8002150 <__libc_init_array+0x44>)
 8002126:	1b64      	subs	r4, r4, r5
 8002128:	10a4      	asrs	r4, r4, #2
 800212a:	42a6      	cmp	r6, r4
 800212c:	d105      	bne.n	800213a <__libc_init_array+0x2e>
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	00b3      	lsls	r3, r6, #2
 8002132:	58eb      	ldr	r3, [r5, r3]
 8002134:	4798      	blx	r3
 8002136:	3601      	adds	r6, #1
 8002138:	e7ee      	b.n	8002118 <__libc_init_array+0xc>
 800213a:	00b3      	lsls	r3, r6, #2
 800213c:	58eb      	ldr	r3, [r5, r3]
 800213e:	4798      	blx	r3
 8002140:	3601      	adds	r6, #1
 8002142:	e7f2      	b.n	800212a <__libc_init_array+0x1e>
 8002144:	080021b4 	.word	0x080021b4
 8002148:	080021b4 	.word	0x080021b4
 800214c:	080021b8 	.word	0x080021b8
 8002150:	080021b4 	.word	0x080021b4

08002154 <_init>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr

08002160 <_fini>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr
