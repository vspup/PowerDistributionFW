
PowerDistributionFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c10  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003cc8  08003cc8  00004cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d5c  08003d5c  0000502c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d5c  08003d5c  0000502c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d5c  08003d5c  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00004d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00004d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003d64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000002c  08003d90  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08003d90  00005208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba40  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df7  00000000  00000000  00010a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00012890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074d  00000000  00000000  00013210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c06  00000000  00000000  0001395d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf51  00000000  00000000  00029563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881e6  00000000  00000000  000354b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd69a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002114  00000000  00000000  000bd6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bf7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000002c 	.word	0x2000002c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003cb0 	.word	0x08003cb0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000030 	.word	0x20000030
 80000fc:	08003cb0 	.word	0x08003cb0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <LL_RCC_HSI_Enable+0x18>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b03      	ldr	r3, [pc, #12]	@ (8000414 <LL_RCC_HSI_Enable+0x18>)
 8000406:	2180      	movs	r1, #128	@ 0x80
 8000408:	0049      	lsls	r1, r1, #1
 800040a:	430a      	orrs	r2, r1
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000

08000418 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <LL_RCC_HSI_IsReady+0x24>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	2380      	movs	r3, #128	@ 0x80
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	401a      	ands	r2, r3
 8000426:	2380      	movs	r3, #128	@ 0x80
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	429a      	cmp	r2, r3
 800042c:	d101      	bne.n	8000432 <LL_RCC_HSI_IsReady+0x1a>
 800042e:	2301      	movs	r3, #1
 8000430:	e000      	b.n	8000434 <LL_RCC_HSI_IsReady+0x1c>
 8000432:	2300      	movs	r3, #0
}
 8000434:	0018      	movs	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	40021000 	.word	0x40021000

08000440 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <LL_RCC_SetSysClkSource+0x24>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	2207      	movs	r2, #7
 800044e:	4393      	bics	r3, r2
 8000450:	0019      	movs	r1, r3
 8000452:	4b04      	ldr	r3, [pc, #16]	@ (8000464 <LL_RCC_SetSysClkSource+0x24>)
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	430a      	orrs	r2, r1
 8000458:	609a      	str	r2, [r3, #8]
}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800046c:	4b03      	ldr	r3, [pc, #12]	@ (800047c <LL_RCC_GetSysClkSource+0x14>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	2238      	movs	r2, #56	@ 0x38
 8000472:	4013      	ands	r3, r2
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	4a06      	ldr	r2, [pc, #24]	@ (80004a8 <LL_RCC_SetAHBPrescaler+0x28>)
 800048e:	4013      	ands	r3, r2
 8000490:	0019      	movs	r1, r3
 8000492:	4b04      	ldr	r3, [pc, #16]	@ (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	430a      	orrs	r2, r1
 8000498:	609a      	str	r2, [r3, #8]
}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000
 80004a8:	fffff0ff 	.word	0xfffff0ff

080004ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004b4:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	4a06      	ldr	r2, [pc, #24]	@ (80004d4 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004ba:	4013      	ands	r3, r2
 80004bc:	0019      	movs	r1, r3
 80004be:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	430a      	orrs	r2, r1
 80004c4:	609a      	str	r2, [r3, #8]
}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	40021000 	.word	0x40021000
 80004d4:	ffff8fff 	.word	0xffff8fff

080004d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <LL_RCC_PLL_Enable+0x18>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b03      	ldr	r3, [pc, #12]	@ (80004f0 <LL_RCC_PLL_Enable+0x18>)
 80004e2:	2180      	movs	r1, #128	@ 0x80
 80004e4:	0449      	lsls	r1, r1, #17
 80004e6:	430a      	orrs	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]
}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <LL_RCC_PLL_IsReady+0x24>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	2380      	movs	r3, #128	@ 0x80
 80004fe:	049b      	lsls	r3, r3, #18
 8000500:	401a      	ands	r2, r3
 8000502:	2380      	movs	r3, #128	@ 0x80
 8000504:	049b      	lsls	r3, r3, #18
 8000506:	429a      	cmp	r2, r3
 8000508:	d101      	bne.n	800050e <LL_RCC_PLL_IsReady+0x1a>
 800050a:	2301      	movs	r3, #1
 800050c:	e000      	b.n	8000510 <LL_RCC_PLL_IsReady+0x1c>
 800050e:	2300      	movs	r3, #0
}
 8000510:	0018      	movs	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	40021000 	.word	0x40021000

0800051c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800052a:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000530:	4013      	ands	r3, r2
 8000532:	0019      	movs	r1, r3
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	021b      	lsls	r3, r3, #8
 800053e:	431a      	orrs	r2, r3
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	4b03      	ldr	r3, [pc, #12]	@ (8000554 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000546:	430a      	orrs	r2, r1
 8000548:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b004      	add	sp, #16
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	40021000 	.word	0x40021000
 8000558:	1fff808c 	.word	0x1fff808c

0800055c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	0549      	lsls	r1, r1, #21
 800056a:	430a      	orrs	r2, r1
 800056c:	60da      	str	r2, [r3, #12]
}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000

08000578 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000582:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	430a      	orrs	r2, r1
 800058a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_IOP_GRP1_EnableClock+0x28>)
 800058e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b004      	add	sp, #16
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000

080005a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <LL_FLASH_SetLatency+0x24>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2207      	movs	r2, #7
 80005b2:	4393      	bics	r3, r2
 80005b4:	0019      	movs	r1, r3
 80005b6:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <LL_FLASH_SetLatency+0x24>)
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	40022000 	.word	0x40022000

080005cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005d0:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <LL_FLASH_GetLatency+0x14>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2207      	movs	r2, #7
 80005d6:	4013      	ands	r3, r2
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	40022000 	.word	0x40022000

080005e4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	4013      	ands	r3, r2
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d101      	bne.n	8000600 <LL_GPIO_IsInputPinSet+0x1c>
 80005fc:	2301      	movs	r3, #1
 80005fe:	e000      	b.n	8000602 <LL_GPIO_IsInputPinSet+0x1e>
 8000600:	2300      	movs	r3, #0
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}

0800060a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	619a      	str	r2, [r3, #24]
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}

08000622 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}

0800063a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	4013      	ands	r3, r2
 8000650:	041a      	lsls	r2, r3, #16
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	43db      	mvns	r3, r3
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	400b      	ands	r3, r1
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	619a      	str	r2, [r3, #24]
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b004      	add	sp, #16
 8000666:	bd80      	pop	{r7, pc}

08000668 <SwitchTimingHandlar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SwitchTimingHandlar(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	timeoutPwrOff ++;
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <SwitchTimingHandlar+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <SwitchTimingHandlar+0x28>)
 8000674:	601a      	str	r2, [r3, #0]
	if(leaveSwitch)
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <SwitchTimingHandlar+0x2c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d105      	bne.n	800068a <SwitchTimingHandlar+0x22>
	{
		return;
	}
	counterSwitch ++;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <SwitchTimingHandlar+0x30>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <SwitchTimingHandlar+0x30>)
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	e000      	b.n	800068c <SwitchTimingHandlar+0x24>
		return;
 800068a:	46c0      	nop			@ (mov r8, r8)
}
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000e4 	.word	0x200000e4
 8000694:	200000e1 	.word	0x200000e1
 8000698:	200000dc 	.word	0x200000dc

0800069c <LED_GreenHandler>:

uint8_t greenLEDState = 0;
uint32_t greenLedTimer = 0;
void LED_GreenHandler (void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0


	if(greenLEDState == 0)
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <LED_GreenHandler+0x5c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d024      	beq.n	80006f2 <LED_GreenHandler+0x56>
	{
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
	}

	if(greenLEDState == 1)
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <LED_GreenHandler+0x5c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d114      	bne.n	80006da <LED_GreenHandler+0x3e>
	{
		greenLedTimer++;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <LED_GreenHandler+0x60>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <LED_GreenHandler+0x60>)
 80006b8:	601a      	str	r2, [r3, #0]

		if(greenLedTimer > TIME_LED_GREEN_BLINK)
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <LED_GreenHandler+0x60>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	23fa      	movs	r3, #250	@ 0xfa
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d909      	bls.n	80006da <LED_GreenHandler+0x3e>
		{
			greenLedTimer = 0;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <LED_GreenHandler+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
			LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000700 <LED_GreenHandler+0x64>)
 80006d2:	0019      	movs	r1, r3
 80006d4:	0010      	movs	r0, r2
 80006d6:	f7ff ffb0 	bl	800063a <LL_GPIO_TogglePin>
		}
	}

	if(greenLEDState == 2)
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <LED_GreenHandler+0x5c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d108      	bne.n	80006f4 <LED_GreenHandler+0x58>
	{
		LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80006e2:	2380      	movs	r3, #128	@ 0x80
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4a06      	ldr	r2, [pc, #24]	@ (8000700 <LED_GreenHandler+0x64>)
 80006e8:	0019      	movs	r1, r3
 80006ea:	0010      	movs	r0, r2
 80006ec:	f7ff ff8d 	bl	800060a <LL_GPIO_SetOutputPin>
 80006f0:	e000      	b.n	80006f4 <LED_GreenHandler+0x58>
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80006f2:	46c0      	nop			@ (mov r8, r8)
	}
}
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000e8 	.word	0x200000e8
 80006fc:	200000ec 	.word	0x200000ec
 8000700:	50000400 	.word	0x50000400

08000704 <HAL_UART_RxCpltCallback>:
int i = 0;
uint8_t power_state = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if(rx_byte == 0x0D)
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0d      	cmp	r3, #13
 8000712:	d132      	bne.n	800077a <HAL_UART_RxCpltCallback+0x76>
  {
	 for(i = 0; i < 3; i++)
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e020      	b.n	800075e <HAL_UART_RxCpltCallback+0x5a>
	 {
		 char *ptData = NULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
		 ptData = strstr((char*)&rx_buff[0], (char*)&cmd_list[i][0]);
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	0013      	movs	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	189b      	adds	r3, r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4a1f      	ldr	r2, [pc, #124]	@ (80007ac <HAL_UART_RxCpltCallback+0xa8>)
 800072e:	189a      	adds	r2, r3, r2
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <HAL_UART_RxCpltCallback+0xac>)
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f003 fa81 	bl	8003c3c <strstr>
 800073a:	0003      	movs	r3, r0
 800073c:	60fb      	str	r3, [r7, #12]
		 if(ptData != NULL)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d007      	beq.n	8000754 <HAL_UART_RxCpltCallback+0x50>
		 {
			 get_cmd = i + 1;
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <HAL_UART_RxCpltCallback+0xb0>)
 8000750:	701a      	strb	r2, [r3, #0]
			 break;
 8000752:	e008      	b.n	8000766 <HAL_UART_RxCpltCallback+0x62>
	 for(i = 0; i < 3; i++)
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <HAL_UART_RxCpltCallback+0xa4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b02      	cmp	r3, #2
 8000764:	ddda      	ble.n	800071c <HAL_UART_RxCpltCallback+0x18>
		 }
	 }
	 memset((char*)&rx_buff[0], 0x00, sizeof(rx_buff));
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_UART_RxCpltCallback+0xac>)
 8000768:	22ff      	movs	r2, #255	@ 0xff
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f003 fa5d 	bl	8003c2c <memset>
	 rx_cnt = 0;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <HAL_UART_RxCpltCallback+0xb4>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e00a      	b.n	8000790 <HAL_UART_RxCpltCallback+0x8c>
  }
  else
  {
	  rx_buff[rx_cnt++] = rx_byte;
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_UART_RxCpltCallback+0xb4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	b2d1      	uxtb	r1, r2
 8000782:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <HAL_UART_RxCpltCallback+0xb4>)
 8000784:	7011      	strb	r1, [r2, #0]
 8000786:	001a      	movs	r2, r3
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 800078a:	7819      	ldrb	r1, [r3, #0]
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <HAL_UART_RxCpltCallback+0xac>)
 800078e:	5499      	strb	r1, [r3, r2]
  }
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000790:	4904      	ldr	r1, [pc, #16]	@ (80007a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <HAL_UART_RxCpltCallback+0xb8>)
 8000794:	2201      	movs	r2, #1
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fa26 	bl	8001be8 <HAL_UART_Receive_IT>
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000f0 	.word	0x200000f0
 80007a8:	200001f8 	.word	0x200001f8
 80007ac:	20000000 	.word	0x20000000
 80007b0:	200000f4 	.word	0x200000f4
 80007b4:	200001f4 	.word	0x200001f4
 80007b8:	200001f3 	.word	0x200001f3
 80007bc:	20000048 	.word	0x20000048

080007c0 <PowerOn>:

void PowerOn (void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	greenLEDState = 2;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <PowerOn+0x3c>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000800 <PowerOn+0x40>)
 80007d0:	0019      	movs	r1, r3
 80007d2:	0010      	movs	r0, r2
 80007d4:	f7ff ff19 	bl	800060a <LL_GPIO_SetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <PowerOn+0x44>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fd2a 	bl	8001234 <HAL_Delay>
	LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4a06      	ldr	r2, [pc, #24]	@ (8000800 <PowerOn+0x40>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	0010      	movs	r0, r2
 80007ea:	f7ff ff0e 	bl	800060a <LL_GPIO_SetOutputPin>
	power_state = 1;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <PowerOn+0x48>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	200000e8 	.word	0x200000e8
 8000800:	50000400 	.word	0x50000400
 8000804:	00001388 	.word	0x00001388
 8000808:	200001fc 	.word	0x200001fc

0800080c <PowerOff>:

void PowerOff (void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <PowerOff+0x3c>)
 8000816:	0019      	movs	r1, r3
 8000818:	0010      	movs	r0, r2
 800081a:	f7ff ff02 	bl	8000622 <LL_GPIO_ResetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <PowerOff+0x40>)
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fd07 	bl	8001234 <HAL_Delay>
	LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 8000826:	2380      	movs	r3, #128	@ 0x80
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <PowerOff+0x3c>)
 800082c:	0019      	movs	r1, r3
 800082e:	0010      	movs	r0, r2
 8000830:	f7ff fef7 	bl	8000622 <LL_GPIO_ResetOutputPin>
	greenLEDState = 1;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <PowerOff+0x44>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
	power_state = 0;
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <PowerOff+0x48>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	50000400 	.word	0x50000400
 800084c:	00001388 	.word	0x00001388
 8000850:	200000e8 	.word	0x200000e8
 8000854:	200001fc 	.word	0x200001fc

08000858 <Send_RS485_Data>:

void Send_RS485_Data (char *buff)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(buff);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff fc4c 	bl	8000100 <strlen>
 8000868:	0002      	movs	r2, r0
 800086a:	240f      	movs	r4, #15
 800086c:	193b      	adds	r3, r7, r4
 800086e:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000870:	23a0      	movs	r3, #160	@ 0xa0
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	2102      	movs	r1, #2
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff fec7 	bl	800060a <LL_GPIO_SetOutputPin>
	HAL_Delay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f000 fcd9 	bl	8001234 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, len *2);
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b29a      	uxth	r2, r3
 800088a:	187b      	adds	r3, r7, r1
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <Send_RS485_Data+0x5c>)
 8000894:	f001 f904 	bl	8001aa0 <HAL_UART_Transmit>
	HAL_Delay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fccb 	bl	8001234 <HAL_Delay>
	LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 800089e:	23a0      	movs	r3, #160	@ 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2102      	movs	r1, #2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff febc 	bl	8000622 <LL_GPIO_ResetOutputPin>
}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b005      	add	sp, #20
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	20000048 	.word	0x20000048

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fc33 	bl	8001128 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 80008c2:	23fa      	movs	r3, #250	@ 0xfa
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fcb4 	bl	8001234 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f992 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 fa22 	bl	8000d18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d4:	f000 f9d2 	bl	8000c7c <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80008d8:	49af      	ldr	r1, [pc, #700]	@ (8000b98 <main+0x2e0>)
 80008da:	4bb0      	ldr	r3, [pc, #704]	@ (8000b9c <main+0x2e4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 f982 	bl	8001be8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */
  uint8_t cnt400V[2] = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
  while(1)
  {
	  if(LL_GPIO_IsInputPinSet(CMP_400V_GPIO_Port,CMP_400V_Pin))
 80008ea:	2380      	movs	r3, #128	@ 0x80
 80008ec:	015b      	lsls	r3, r3, #5
 80008ee:	4aac      	ldr	r2, [pc, #688]	@ (8000ba0 <main+0x2e8>)
 80008f0:	0019      	movs	r1, r3
 80008f2:	0010      	movs	r0, r2
 80008f4:	f7ff fe76 	bl	80005e4 <LL_GPIO_IsInputPinSet>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d009      	beq.n	8000910 <main+0x58>
	  {
		  cnt400V[0]++;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	701a      	strb	r2, [r3, #0]
		  cnt400V[1]=0;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	705a      	strb	r2, [r3, #1]
 800090e:	e008      	b.n	8000922 <main+0x6a>
	  }
	  else
	  {
		  cnt400V[1]++;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	3301      	adds	r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	705a      	strb	r2, [r3, #1]
		  cnt400V[0]=0;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(33);
 8000922:	2021      	movs	r0, #33	@ 0x21
 8000924:	f000 fc86 	bl	8001234 <HAL_Delay>

	  if(cnt400V[1] >= COUNT_400V_PULL)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d90c      	bls.n	800094a <main+0x92>
	  {
	       LL_GPIO_SetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	019b      	lsls	r3, r3, #6
 8000934:	4a9a      	ldr	r2, [pc, #616]	@ (8000ba0 <main+0x2e8>)
 8000936:	0019      	movs	r1, r3
 8000938:	0010      	movs	r0, r2
 800093a:	f7ff fe66 	bl	800060a <LL_GPIO_SetOutputPin>
           LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800093e:	4b98      	ldr	r3, [pc, #608]	@ (8000ba0 <main+0x2e8>)
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff fe61 	bl	800060a <LL_GPIO_SetOutputPin>
		  break;
 8000948:	e011      	b.n	800096e <main+0xb6>
	  }
	  else if(cnt400V[0] >= COUNT_400V_PULL)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d9cb      	bls.n	80008ea <main+0x32>
	  {
		  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000952:	2380      	movs	r3, #128	@ 0x80
 8000954:	019b      	lsls	r3, r3, #6
 8000956:	4a92      	ldr	r2, [pc, #584]	@ (8000ba0 <main+0x2e8>)
 8000958:	0019      	movs	r1, r3
 800095a:	0010      	movs	r0, r2
 800095c:	f7ff fe61 	bl	8000622 <LL_GPIO_ResetOutputPin>
		  LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4a8e      	ldr	r2, [pc, #568]	@ (8000ba0 <main+0x2e8>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f7ff fe4e 	bl	800060a <LL_GPIO_SetOutputPin>
		  break;
	  }

  }
  //LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
  HAL_Delay(2000);
 800096e:	23fa      	movs	r3, #250	@ 0xfa
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc5e 	bl	8001234 <HAL_Delay>
  //LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
  greenLEDState = 1;
 8000978:	4b8a      	ldr	r3, [pc, #552]	@ (8000ba4 <main+0x2ec>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800097e:	4b88      	ldr	r3, [pc, #544]	@ (8000ba0 <main+0x2e8>)
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff fe4d 	bl	8000622 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000988:	2380      	movs	r3, #128	@ 0x80
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4a84      	ldr	r2, [pc, #528]	@ (8000ba0 <main+0x2e8>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f7ff fe46 	bl	8000622 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000996:	2380      	movs	r3, #128	@ 0x80
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4a81      	ldr	r2, [pc, #516]	@ (8000ba0 <main+0x2e8>)
 800099c:	0019      	movs	r1, r3
 800099e:	0010      	movs	r0, r2
 80009a0:	f7ff fe3f 	bl	8000622 <LL_GPIO_ResetOutputPin>
  counterSwitch = 0;
 80009a4:	4b80      	ldr	r3, [pc, #512]	@ (8000ba8 <main+0x2f0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 80009aa:	2380      	movs	r3, #128	@ 0x80
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	4a7f      	ldr	r2, [pc, #508]	@ (8000bac <main+0x2f4>)
 80009b0:	0019      	movs	r1, r3
 80009b2:	0010      	movs	r0, r2
 80009b4:	f7ff fe16 	bl	80005e4 <LL_GPIO_IsInputPinSet>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d158      	bne.n	8000a6e <main+0x1b6>
	{
		if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 80009bc:	4b78      	ldr	r3, [pc, #480]	@ (8000ba0 <main+0x2e8>)
 80009be:	2104      	movs	r1, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fe0f 	bl	80005e4 <LL_GPIO_IsInputPinSet>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d133      	bne.n	8000a32 <main+0x17a>
		{
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 80009ca:	e012      	b.n	80009f2 <main+0x13a>
		   {
			  LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 80009cc:	4b74      	ldr	r3, [pc, #464]	@ (8000ba0 <main+0x2e8>)
 80009ce:	2180      	movs	r1, #128	@ 0x80
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fe1a 	bl	800060a <LL_GPIO_SetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4a71      	ldr	r2, [pc, #452]	@ (8000ba0 <main+0x2e8>)
 80009dc:	0019      	movs	r1, r3
 80009de:	0010      	movs	r0, r2
 80009e0:	f7ff fe1f 	bl	8000622 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80009e4:	2380      	movs	r3, #128	@ 0x80
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4a6d      	ldr	r2, [pc, #436]	@ (8000ba0 <main+0x2e8>)
 80009ea:	0019      	movs	r1, r3
 80009ec:	0010      	movs	r0, r2
 80009ee:	f7ff fe18 	bl	8000622 <LL_GPIO_ResetOutputPin>
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 80009f2:	4b6b      	ldr	r3, [pc, #428]	@ (8000ba0 <main+0x2e8>)
 80009f4:	2104      	movs	r1, #4
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fdf4 	bl	80005e4 <LL_GPIO_IsInputPinSet>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d0e5      	beq.n	80009cc <main+0x114>
		   }

			  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a00:	4b67      	ldr	r3, [pc, #412]	@ (8000ba0 <main+0x2e8>)
 8000a02:	2180      	movs	r1, #128	@ 0x80
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fe0c 	bl	8000622 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4a64      	ldr	r2, [pc, #400]	@ (8000ba0 <main+0x2e8>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f7ff fe05 	bl	8000622 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000a18:	2380      	movs	r3, #128	@ 0x80
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4a60      	ldr	r2, [pc, #384]	@ (8000ba0 <main+0x2e8>)
 8000a1e:	0019      	movs	r1, r3
 8000a20:	0010      	movs	r0, r2
 8000a22:	f7ff fdfe 	bl	8000622 <LL_GPIO_ResetOutputPin>
			  counterSwitch = 0;
 8000a26:	4b60      	ldr	r3, [pc, #384]	@ (8000ba8 <main+0x2f0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
			  leaveSwitch   = 0;
 8000a2c:	4b60      	ldr	r3, [pc, #384]	@ (8000bb0 <main+0x2f8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

		}

		if( (counterSwitch > TIME_SWITCH_PRESSHED)&&(leaveSwitch == 0) )
 8000a32:	4b5d      	ldr	r3, [pc, #372]	@ (8000ba8 <main+0x2f0>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	23fa      	movs	r3, #250	@ 0xfa
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d91d      	bls.n	8000a7a <main+0x1c2>
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb0 <main+0x2f8>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d119      	bne.n	8000a7a <main+0x1c2>
		{
			stateSwitch ^= 1;
 8000a46:	4b5b      	ldr	r3, [pc, #364]	@ (8000bb4 <main+0x2fc>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4053      	eors	r3, r2
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b58      	ldr	r3, [pc, #352]	@ (8000bb4 <main+0x2fc>)
 8000a52:	701a      	strb	r2, [r3, #0]

			if(stateSwitch)
 8000a54:	4b57      	ldr	r3, [pc, #348]	@ (8000bb4 <main+0x2fc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <main+0x1aa>
			{
				PowerOn ();
 8000a5c:	f7ff feb0 	bl	80007c0 <PowerOn>
 8000a60:	e001      	b.n	8000a66 <main+0x1ae>
				//HAL_Delay(CYCLES_TIME_ON  * 1000);
			}
			else
			{
				PowerOff ();
 8000a62:	f7ff fed3 	bl	800080c <PowerOff>

				//HAL_Delay(CYCLES_TIME_OFF  * 1000);
			}
			leaveSwitch = 1;
 8000a66:	4b52      	ldr	r3, [pc, #328]	@ (8000bb0 <main+0x2f8>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	e005      	b.n	8000a7a <main+0x1c2>
		 }
	  }
	  else
	  {
		counterSwitch = 0;
 8000a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba8 <main+0x2f0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
		leaveSwitch   = 0;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb0 <main+0x2f8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
	  }

	if(get_cmd)
 8000a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb8 <main+0x300>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d05e      	beq.n	8000b40 <main+0x288>
	{
		switch(get_cmd)
 8000a82:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb8 <main+0x300>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d032      	beq.n	8000af0 <main+0x238>
 8000a8a:	dc56      	bgt.n	8000b3a <main+0x282>
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d002      	beq.n	8000a96 <main+0x1de>
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d01c      	beq.n	8000ace <main+0x216>
 8000a94:	e051      	b.n	8000b3a <main+0x282>
		{

			case 1:
				if(power_state)
 8000a96:	4b49      	ldr	r3, [pc, #292]	@ (8000bbc <main+0x304>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d012      	beq.n	8000ac4 <main+0x20c>
				{
					if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000a9e:	4b40      	ldr	r3, [pc, #256]	@ (8000ba0 <main+0x2e8>)
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fd9e 	bl	80005e4 <LL_GPIO_IsInputPinSet>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d104      	bne.n	8000ab6 <main+0x1fe>
					{
						Send_RS485_Data("off:-1;");
 8000aac:	4b44      	ldr	r3, [pc, #272]	@ (8000bc0 <main+0x308>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f7ff fed2 	bl	8000858 <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("off:1;");
				}
			break;
 8000ab4:	e041      	b.n	8000b3a <main+0x282>
						Send_RS485_Data("off:0;");
 8000ab6:	4b43      	ldr	r3, [pc, #268]	@ (8000bc4 <main+0x30c>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fecd 	bl	8000858 <Send_RS485_Data>
						PowerOff ();
 8000abe:	f7ff fea5 	bl	800080c <PowerOff>
			break;
 8000ac2:	e03a      	b.n	8000b3a <main+0x282>
					Send_RS485_Data("off:1;");
 8000ac4:	4b40      	ldr	r3, [pc, #256]	@ (8000bc8 <main+0x310>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fec6 	bl	8000858 <Send_RS485_Data>
			break;
 8000acc:	e035      	b.n	8000b3a <main+0x282>
			case 2:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000ace:	4b34      	ldr	r3, [pc, #208]	@ (8000ba0 <main+0x2e8>)
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff fd86 	bl	80005e4 <LL_GPIO_IsInputPinSet>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d104      	bne.n	8000ae6 <main+0x22e>
				{
					Send_RS485_Data("bus:1;");
 8000adc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bcc <main+0x314>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff feba 	bl	8000858 <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("bus:0;");
				}
			break;
 8000ae4:	e029      	b.n	8000b3a <main+0x282>
					Send_RS485_Data("bus:0;");
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd0 <main+0x318>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff feb5 	bl	8000858 <Send_RS485_Data>
			break;
 8000aee:	e024      	b.n	8000b3a <main+0x282>
			case 3:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000af0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <main+0x2e8>)
 8000af2:	2104      	movs	r1, #4
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fd75 	bl	80005e4 <LL_GPIO_IsInputPinSet>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d104      	bne.n	8000b08 <main+0x250>
				{
					Send_RS485_Data("reboot:-1;");
 8000afe:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <main+0x31c>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fea9 	bl	8000858 <Send_RS485_Data>
						reboot_state_off = 1;
						reboot_time = HAL_GetTick();
						Send_RS485_Data("reboot:1;");
					}
				}
			break;
 8000b06:	e017      	b.n	8000b38 <main+0x280>
					if(reboot_flag)
 8000b08:	4b33      	ldr	r3, [pc, #204]	@ (8000bd8 <main+0x320>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d004      	beq.n	8000b1a <main+0x262>
					    Send_RS485_Data("reboot:2;");
 8000b10:	4b32      	ldr	r3, [pc, #200]	@ (8000bdc <main+0x324>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fea0 	bl	8000858 <Send_RS485_Data>
			break;
 8000b18:	e00e      	b.n	8000b38 <main+0x280>
						reboot_flag = 1;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <main+0x320>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
						reboot_state_off = 1;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <main+0x328>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
						reboot_time = HAL_GetTick();
 8000b26:	f000 fb7b 	bl	8001220 <HAL_GetTick>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <main+0x32c>)
 8000b2e:	601a      	str	r2, [r3, #0]
						Send_RS485_Data("reboot:1;");
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <main+0x330>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff fe90 	bl	8000858 <Send_RS485_Data>
			break;
 8000b38:	46c0      	nop			@ (mov r8, r8)

		}
		get_cmd = 0;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <main+0x300>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
     }

	if(reboot_flag)
 8000b40:	4b25      	ldr	r3, [pc, #148]	@ (8000bd8 <main+0x320>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d100      	bne.n	8000b4a <main+0x292>
 8000b48:	e72f      	b.n	80009aa <main+0xf2>
	{
	   if(reboot_state_off)
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <main+0x328>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d010      	beq.n	8000b74 <main+0x2bc>
	   {
		   if(HAL_GetTick() > reboot_time + 30000)
 8000b52:	f000 fb65 	bl	8001220 <HAL_GetTick>
 8000b56:	0002      	movs	r2, r0
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <main+0x32c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4923      	ldr	r1, [pc, #140]	@ (8000bec <main+0x334>)
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4463      	add	r3, ip
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d800      	bhi.n	8000b68 <main+0x2b0>
 8000b66:	e720      	b.n	80009aa <main+0xf2>
		   {
			   reboot_state_off = 0;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <main+0x328>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
			   PowerOff ();
 8000b6e:	f7ff fe4d 	bl	800080c <PowerOff>
 8000b72:	e71a      	b.n	80009aa <main+0xf2>
		   }
	   }
	   else
	   {
		   if(HAL_GetTick() > reboot_time + 10000)
 8000b74:	f000 fb54 	bl	8001220 <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <main+0x32c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	491c      	ldr	r1, [pc, #112]	@ (8000bf0 <main+0x338>)
 8000b80:	468c      	mov	ip, r1
 8000b82:	4463      	add	r3, ip
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d800      	bhi.n	8000b8a <main+0x2d2>
 8000b88:	e70f      	b.n	80009aa <main+0xf2>
		   {
			   PowerOn ();
 8000b8a:	f7ff fe19 	bl	80007c0 <PowerOn>
			   reboot_flag = 0;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <main+0x320>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 8000b94:	e709      	b.n	80009aa <main+0xf2>
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	200000f0 	.word	0x200000f0
 8000b9c:	20000048 	.word	0x20000048
 8000ba0:	50000400 	.word	0x50000400
 8000ba4:	200000e8 	.word	0x200000e8
 8000ba8:	200000dc 	.word	0x200000dc
 8000bac:	50000800 	.word	0x50000800
 8000bb0:	200000e1 	.word	0x200000e1
 8000bb4:	200000e0 	.word	0x200000e0
 8000bb8:	200001f4 	.word	0x200001f4
 8000bbc:	200001fc 	.word	0x200001fc
 8000bc0:	08003cc8 	.word	0x08003cc8
 8000bc4:	08003cd0 	.word	0x08003cd0
 8000bc8:	08003cd8 	.word	0x08003cd8
 8000bcc:	08003ce0 	.word	0x08003ce0
 8000bd0:	08003ce8 	.word	0x08003ce8
 8000bd4:	08003cf0 	.word	0x08003cf0
 8000bd8:	200001fd 	.word	0x200001fd
 8000bdc:	08003cfc 	.word	0x08003cfc
 8000be0:	200001fe 	.word	0x200001fe
 8000be4:	20000200 	.word	0x20000200
 8000be8:	08003d08 	.word	0x08003d08
 8000bec:	00007530 	.word	0x00007530
 8000bf0:	00002710 	.word	0x00002710

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fcd3 	bl	80005a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	f7ff fce4 	bl	80005cc <LL_FLASH_GetLatency>
 8000c04:	0003      	movs	r3, r0
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d1fa      	bne.n	8000c00 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000c0a:	f7ff fbf7 	bl	80003fc <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	f7ff fc02 	bl	8000418 <LL_RCC_HSI_IsReady>
 8000c14:	0003      	movs	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d1fa      	bne.n	8000c10 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	059b      	lsls	r3, r3, #22
 8000c1e:	2208      	movs	r2, #8
 8000c20:	2100      	movs	r1, #0
 8000c22:	2002      	movs	r0, #2
 8000c24:	f7ff fc7a 	bl	800051c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c28:	f7ff fc56 	bl	80004d8 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000c2c:	f7ff fc96 	bl	800055c <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	f7ff fc5f 	bl	80004f4 <LL_RCC_PLL_IsReady>
 8000c36:	0003      	movs	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d1fa      	bne.n	8000c32 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fc1f 	bl	8000480 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff fbfc 	bl	8000440 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	f7ff fc0d 	bl	8000468 <LL_RCC_GetSysClkSource>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	2b10      	cmp	r3, #16
 8000c52:	d1fa      	bne.n	8000c4a <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fc29 	bl	80004ac <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <SystemClock_Config+0x84>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f002 ffd7 	bl	8003c10 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000c62:	2003      	movs	r0, #3
 8000c64:	f000 fa80 	bl	8001168 <HAL_InitTick>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 f968 	bl	8000f40 <Error_Handler>
  }
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	03d09000 	.word	0x03d09000

08000c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000c82:	4a24      	ldr	r2, [pc, #144]	@ (8000d14 <MX_USART2_UART_Init+0x98>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c86:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000c88:	22e1      	movs	r2, #225	@ 0xe1
 8000c8a:	0252      	lsls	r2, r2, #9
 8000c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 fe94 	bl	80019f4 <HAL_UART_Init>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cd0:	f000 f936 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f002 fda5 	bl	8003828 <HAL_UARTEx_SetTxFifoThreshold>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ce2:	f000 f92d 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	0018      	movs	r0, r3
 8000cec:	f002 fddc 	bl	80038a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cf4:	f000 f924 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <MX_USART2_UART_Init+0x94>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f002 fd5a 	bl	80037b4 <HAL_UARTEx_DisableFifoMode>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d04:	f000 f91c 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000048 	.word	0x20000048
 8000d14:	40004400 	.word	0x40004400

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	003b      	movs	r3, r7
 8000d20:	0018      	movs	r0, r3
 8000d22:	2318      	movs	r3, #24
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f002 ff80 	bl	8003c2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d2c:	2004      	movs	r0, #4
 8000d2e:	f7ff fc23 	bl	8000578 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000d32:	2020      	movs	r0, #32
 8000d34:	f7ff fc20 	bl	8000578 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fc1d 	bl	8000578 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fc1a 	bl	8000578 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000d44:	23a0      	movs	r3, #160	@ 0xa0
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	2102      	movs	r1, #2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fc69 	bl	8000622 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	4a78      	ldr	r2, [pc, #480]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000d56:	0019      	movs	r1, r3
 8000d58:	0010      	movs	r0, r2
 8000d5a:	f7ff fc62 	bl	8000622 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000d5e:	2380      	movs	r3, #128	@ 0x80
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4a75      	ldr	r2, [pc, #468]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000d64:	0019      	movs	r1, r3
 8000d66:	0010      	movs	r0, r2
 8000d68:	f7ff fc5b 	bl	8000622 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	019b      	lsls	r3, r3, #6
 8000d70:	4a71      	ldr	r2, [pc, #452]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000d72:	0019      	movs	r1, r3
 8000d74:	0010      	movs	r0, r2
 8000d76:	f7ff fc54 	bl	8000622 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fc4f 	bl	8000622 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000d84:	2380      	movs	r3, #128	@ 0x80
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4a6b      	ldr	r2, [pc, #428]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	0010      	movs	r0, r2
 8000d8e:	f7ff fc48 	bl	8000622 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4a68      	ldr	r2, [pc, #416]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0010      	movs	r0, r2
 8000d9c:	f7ff fc41 	bl	8000622 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000da0:	003b      	movs	r3, r7
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	0192      	lsls	r2, r2, #6
 8000da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2202      	movs	r2, #2
 8000db2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000db4:	003b      	movs	r3, r7
 8000db6:	4a61      	ldr	r2, [pc, #388]	@ (8000f3c <MX_GPIO_Init+0x224>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f002 fecd 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DE2_Pin;
 8000dc0:	003b      	movs	r3, r7
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2201      	movs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dcc:	003b      	movs	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd8:	003b      	movs	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DE2_GPIO_Port, &GPIO_InitStruct);
 8000dde:	003a      	movs	r2, r7
 8000de0:	23a0      	movs	r3, #160	@ 0xa0
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f002 feb7 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RD_EN_Pin;
 8000dec:	003b      	movs	r3, r7
 8000dee:	2204      	movs	r2, #4
 8000df0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RD_EN_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	003b      	movs	r3, r7
 8000e00:	4a4d      	ldr	r2, [pc, #308]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000e02:	0019      	movs	r1, r3
 8000e04:	0010      	movs	r0, r2
 8000e06:	f002 fea8 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PRECHRG_Pin;
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	00d2      	lsls	r2, r2, #3
 8000e10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2201      	movs	r2, #1
 8000e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e18:	003b      	movs	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(PRECHRG_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	4a42      	ldr	r2, [pc, #264]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000e2e:	0019      	movs	r1, r3
 8000e30:	0010      	movs	r0, r2
 8000e32:	f002 fe92 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MAINS_REL_Pin;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2201      	movs	r2, #1
 8000e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e50:	003b      	movs	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MAINS_REL_GPIO_Port, &GPIO_InitStruct);
 8000e56:	003b      	movs	r3, r7
 8000e58:	4a37      	ldr	r2, [pc, #220]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	f002 fe7c 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CMP_400V_Pin;
 8000e62:	003b      	movs	r3, r7
 8000e64:	2280      	movs	r2, #128	@ 0x80
 8000e66:	0152      	lsls	r2, r2, #5
 8000e68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2202      	movs	r2, #2
 8000e74:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CMP_400V_GPIO_Port, &GPIO_InitStruct);
 8000e76:	003b      	movs	r3, r7
 8000e78:	4a2f      	ldr	r2, [pc, #188]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	f002 fe6c 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SET_SERIAL_Pin;
 8000e82:	003b      	movs	r3, r7
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	0192      	lsls	r2, r2, #6
 8000e88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SET_SERIAL_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	003b      	movs	r3, r7
 8000ea4:	4a24      	ldr	r2, [pc, #144]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	f002 fe56 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000eae:	003b      	movs	r3, r7
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb4:	003b      	movs	r3, r7
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	003b      	movs	r3, r7
 8000ece:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	0010      	movs	r0, r2
 8000ed4:	f002 fe41 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	0052      	lsls	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eec:	003b      	movs	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	003b      	movs	r3, r7
 8000efa:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000efc:	0019      	movs	r1, r3
 8000efe:	0010      	movs	r0, r2
 8000f00:	f002 fe2b 	bl	8003b5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000f04:	003b      	movs	r3, r7
 8000f06:	2280      	movs	r2, #128	@ 0x80
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f0c:	003b      	movs	r3, r7
 8000f0e:	2201      	movs	r2, #1
 8000f10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f18:	003b      	movs	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1e:	003b      	movs	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000f24:	003b      	movs	r3, r7
 8000f26:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000f28:	0019      	movs	r1, r3
 8000f2a:	0010      	movs	r0, r2
 8000f2c:	f002 fe15 	bl	8003b5a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b006      	add	sp, #24
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	50000800 	.word	0x50000800

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <LL_RCC_SetUSARTClockSource>:
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	0c12      	lsrs	r2, r2, #16
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	0c1a      	lsrs	r2, r3, #16
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_MspInit+0x44>)
 8000f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <HAL_MspInit+0x44>)
 8000f88:	2101      	movs	r1, #1
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <HAL_MspInit+0x44>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	2201      	movs	r2, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <HAL_MspInit+0x44>)
 8000f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_MspInit+0x44>)
 8000fa0:	2180      	movs	r1, #128	@ 0x80
 8000fa2:	0549      	lsls	r1, r1, #21
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_MspInit+0x44>)
 8000faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	055b      	lsls	r3, r3, #21
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b08b      	sub	sp, #44	@ 0x2c
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	2414      	movs	r4, #20
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	2314      	movs	r3, #20
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f002 fe28 	bl	8003c2c <memset>
  if(huart->Instance==USART2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a22      	ldr	r2, [pc, #136]	@ (800106c <HAL_UART_MspInit+0xa8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d13d      	bne.n	8001062 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000fe6:	23c0      	movs	r3, #192	@ 0xc0
 8000fe8:	031b      	lsls	r3, r3, #12
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff ffae 	bl	8000f4c <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <HAL_UART_MspInit+0xac>)
 8000ff2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <HAL_UART_MspInit+0xac>)
 8000ff6:	2180      	movs	r1, #128	@ 0x80
 8000ff8:	0289      	lsls	r1, r1, #10
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <HAL_UART_MspInit+0xac>)
 8001000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	029b      	lsls	r3, r3, #10
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_UART_MspInit+0xac>)
 800100e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_UART_MspInit+0xac>)
 8001012:	2101      	movs	r1, #1
 8001014:	430a      	orrs	r2, r1
 8001016:	635a      	str	r2, [r3, #52]	@ 0x34
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_UART_MspInit+0xac>)
 800101a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101c:	2201      	movs	r2, #1
 800101e:	4013      	ands	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001024:	0021      	movs	r1, r4
 8001026:	187b      	adds	r3, r7, r1
 8001028:	220c      	movs	r2, #12
 800102a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2202      	movs	r2, #2
 8001030:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2201      	movs	r2, #1
 8001042:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	187a      	adds	r2, r7, r1
 8001046:	23a0      	movs	r3, #160	@ 0xa0
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f000 fabf 	bl	80015d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	201c      	movs	r0, #28
 8001058:	f000 f9bc 	bl	80013d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105c:	201c      	movs	r0, #28
 800105e:	f000 f9ce 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b00b      	add	sp, #44	@ 0x2c
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	40004400 	.word	0x40004400
 8001070:	40021000 	.word	0x40021000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  LED_GreenHandler ();
 800109c:	f7ff fafe 	bl	800069c <LED_GreenHandler>
  SwitchTimingHandlar();
 80010a0:	f7ff fae2 	bl	8000668 <SwitchTimingHandlar>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f8aa 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <USART2_IRQHandler+0x14>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fdee 	bl	8001c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	20000048 	.word	0x20000048

080010c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d8:	f7ff fff6 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001102:	f002 fdb1 	bl	8003c68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001106:	f7ff fbd7 	bl	80008b8 <main>

0800110a <LoopForever>:

LoopForever:
  b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   r0, =_estack
 800110c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001118:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 800111c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001120:	20000208 	.word	0x20000208

08001124 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_IRQHandler>
	...

08001128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <HAL_Init+0x3c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_Init+0x3c>)
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0049      	lsls	r1, r1, #1
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001142:	2003      	movs	r0, #3
 8001144:	f000 f810 	bl	8001168 <HAL_InitTick>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d003      	beq.n	8001154 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e001      	b.n	8001158 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff ff12 	bl	8000f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	230f      	movs	r3, #15
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001178:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <HAL_InitTick+0x88>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d02b      	beq.n	80011d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <HAL_InitTick+0x8c>)
 8001182:	681c      	ldr	r4, [r3, #0]
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <HAL_InitTick+0x88>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	0019      	movs	r1, r3
 800118a:	23fa      	movs	r3, #250	@ 0xfa
 800118c:	0098      	lsls	r0, r3, #2
 800118e:	f7fe ffbf 	bl	8000110 <__udivsi3>
 8001192:	0003      	movs	r3, r0
 8001194:	0019      	movs	r1, r3
 8001196:	0020      	movs	r0, r4
 8001198:	f7fe ffba 	bl	8000110 <__udivsi3>
 800119c:	0003      	movs	r3, r0
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 f93d 	bl	800141e <HAL_SYSTICK_Config>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d112      	bne.n	80011ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d80a      	bhi.n	80011c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f90c 	bl	80013d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_InitTick+0x90>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e00d      	b.n	80011e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e008      	b.n	80011e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e003      	b.n	80011e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011e0:	230f      	movs	r3, #15
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	781b      	ldrb	r3, [r3, #0]
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b005      	add	sp, #20
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	20000028 	.word	0x20000028
 80011f4:	20000020 	.word	0x20000020
 80011f8:	20000024 	.word	0x20000024

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	18d2      	adds	r2, r2, r3
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_IncTick+0x20>)
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	20000028 	.word	0x20000028
 800121c:	20000204 	.word	0x20000204

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	@ (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	20000204 	.word	0x20000204

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff fff0 	bl	8001220 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	001a      	movs	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	189b      	adds	r3, r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	f7ff ffe0 	bl	8001220 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	20000028 	.word	0x20000028

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b7f      	cmp	r3, #127	@ 0x7f
 800128e:	d809      	bhi.n	80012a4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	001a      	movs	r2, r3
 8001296:	231f      	movs	r3, #31
 8001298:	401a      	ands	r2, r3
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_EnableIRQ+0x30>)
 800129c:	2101      	movs	r1, #1
 800129e:	4091      	lsls	r1, r2
 80012a0:	000a      	movs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	0002      	movs	r2, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80012c4:	d828      	bhi.n	8001318 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001384 <__NVIC_SetPriority+0xd4>)
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	33c0      	adds	r3, #192	@ 0xc0
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	589b      	ldr	r3, [r3, r2]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	@ 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	481f      	ldr	r0, [pc, #124]	@ (8001384 <__NVIC_SetPriority+0xd4>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	430a      	orrs	r2, r1
 8001310:	33c0      	adds	r3, #192	@ 0xc0
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001316:	e031      	b.n	800137c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001318:	4a1b      	ldr	r2, [pc, #108]	@ (8001388 <__NVIC_SetPriority+0xd8>)
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0019      	movs	r1, r3
 8001320:	230f      	movs	r3, #15
 8001322:	400b      	ands	r3, r1
 8001324:	3b08      	subs	r3, #8
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3306      	adds	r3, #6
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	18d3      	adds	r3, r2, r3
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1dfa      	adds	r2, r7, #7
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	0011      	movs	r1, r2
 8001338:	2203      	movs	r2, #3
 800133a:	400a      	ands	r2, r1
 800133c:	00d2      	lsls	r2, r2, #3
 800133e:	21ff      	movs	r1, #255	@ 0xff
 8001340:	4091      	lsls	r1, r2
 8001342:	000a      	movs	r2, r1
 8001344:	43d2      	mvns	r2, r2
 8001346:	401a      	ands	r2, r3
 8001348:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	019b      	lsls	r3, r3, #6
 800134e:	22ff      	movs	r2, #255	@ 0xff
 8001350:	401a      	ands	r2, r3
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	2303      	movs	r3, #3
 800135a:	4003      	ands	r3, r0
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001360:	4809      	ldr	r0, [pc, #36]	@ (8001388 <__NVIC_SetPriority+0xd8>)
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	001c      	movs	r4, r3
 8001368:	230f      	movs	r3, #15
 800136a:	4023      	ands	r3, r4
 800136c:	3b08      	subs	r3, #8
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	430a      	orrs	r2, r1
 8001372:	3306      	adds	r3, #6
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	18c3      	adds	r3, r0, r3
 8001378:	3304      	adds	r3, #4
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b003      	add	sp, #12
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	045b      	lsls	r3, r3, #17
 800139c:	429a      	cmp	r2, r3
 800139e:	d301      	bcc.n	80013a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a0:	2301      	movs	r3, #1
 80013a2:	e010      	b.n	80013c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <SysTick_Config+0x44>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	3a01      	subs	r2, #1
 80013aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ac:	2301      	movs	r3, #1
 80013ae:	425b      	negs	r3, r3
 80013b0:	2103      	movs	r1, #3
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff ff7c 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <SysTick_Config+0x44>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <SysTick_Config+0x44>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	210f      	movs	r1, #15
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	1c02      	adds	r2, r0, #0
 80013e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	0002      	movs	r2, r0
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff ff33 	bl	800127c <__NVIC_EnableIRQ>
}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff ffaf 	bl	800138c <SysTick_Config>
 800142e:	0003      	movs	r3, r0
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e050      	b.n	80014ec <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2225      	movs	r2, #37	@ 0x25
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d008      	beq.n	8001468 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2204      	movs	r2, #4
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2224      	movs	r2, #36	@ 0x24
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e041      	b.n	80014ec <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	210e      	movs	r1, #14
 8001474:	438a      	bics	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	491c      	ldr	r1, [pc, #112]	@ (80014f4 <HAL_DMA_Abort+0xbc>)
 8001484:	400a      	ands	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2101      	movs	r1, #1
 8001494:	438a      	bics	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001498:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <HAL_DMA_Abort+0xc0>)
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	221c      	movs	r2, #28
 80014a2:	4013      	ands	r3, r2
 80014a4:	2201      	movs	r2, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <HAL_DMA_Abort+0xc0>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ca:	490a      	ldr	r1, [pc, #40]	@ (80014f4 <HAL_DMA_Abort+0xbc>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80014d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2225      	movs	r2, #37	@ 0x25
 80014de:	2101      	movs	r1, #1
 80014e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2224      	movs	r2, #36	@ 0x24
 80014e6:	2100      	movs	r1, #0
 80014e8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	fffffeff 	.word	0xfffffeff
 80014f8:	40020000 	.word	0x40020000

080014fc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	210f      	movs	r1, #15
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2225      	movs	r2, #37	@ 0x25
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d006      	beq.n	8001526 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2204      	movs	r2, #4
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e049      	b.n	80015ba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	210e      	movs	r1, #14
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	438a      	bics	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	491d      	ldr	r1, [pc, #116]	@ (80015c8 <HAL_DMA_Abort_IT+0xcc>)
 8001552:	400a      	ands	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <HAL_DMA_Abort_IT+0xd0>)
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	221c      	movs	r2, #28
 8001560:	4013      	ands	r3, r2
 8001562:	2201      	movs	r2, #1
 8001564:	409a      	lsls	r2, r3
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <HAL_DMA_Abort_IT+0xd0>)
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001574:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001588:	490f      	ldr	r1, [pc, #60]	@ (80015c8 <HAL_DMA_Abort_IT+0xcc>)
 800158a:	400a      	ands	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001596:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2225      	movs	r2, #37	@ 0x25
 800159c:	2101      	movs	r1, #1
 800159e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	@ 0x24
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	0010      	movs	r0, r2
 80015b8:	4798      	blx	r3
    }
  }
  return status;
 80015ba:	230f      	movs	r3, #15
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781b      	ldrb	r3, [r3, #0]
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b004      	add	sp, #16
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	fffffeff 	.word	0xfffffeff
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e147      	b.n	8001870 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4091      	lsls	r1, r2
 80015ea:	000a      	movs	r2, r1
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d100      	bne.n	80015f8 <HAL_GPIO_Init+0x28>
 80015f6:	e138      	b.n	800186a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4013      	ands	r3, r2
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	409a      	lsls	r2, r3
 800161e:	0013      	movs	r3, r2
 8001620:	43da      	mvns	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	409a      	lsls	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	2201      	movs	r2, #1
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	4013      	ands	r3, r2
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	43da      	mvns	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	58d3      	ldr	r3, [r2, r3]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2207      	movs	r2, #7
 80016cc:	4013      	ands	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2107      	movs	r1, #7
 80016e6:	400b      	ands	r3, r1
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	6939      	ldr	r1, [r7, #16]
 8001700:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	401a      	ands	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	23c0      	movs	r3, #192	@ 0xc0
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d100      	bne.n	8001744 <HAL_GPIO_Init+0x174>
 8001742:	e092      	b.n	800186a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001744:	4a50      	ldr	r2, [pc, #320]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3318      	adds	r3, #24
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	589b      	ldr	r3, [r3, r2]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	220f      	movs	r2, #15
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	23a0      	movs	r3, #160	@ 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	429a      	cmp	r2, r3
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x1ca>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a45      	ldr	r2, [pc, #276]	@ (800188c <HAL_GPIO_Init+0x2bc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x1c6>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a44      	ldr	r2, [pc, #272]	@ (8001890 <HAL_GPIO_Init+0x2c0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x1c2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a43      	ldr	r2, [pc, #268]	@ (8001894 <HAL_GPIO_Init+0x2c4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x1be>
 800178a:	2303      	movs	r3, #3
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 800178e:	2305      	movs	r3, #5
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 800179a:	2300      	movs	r3, #0
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	2103      	movs	r1, #3
 80017a0:	400a      	ands	r2, r1
 80017a2:	00d2      	lsls	r2, r2, #3
 80017a4:	4093      	lsls	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017ac:	4936      	ldr	r1, [pc, #216]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3318      	adds	r3, #24
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ba:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	2380      	movs	r3, #128	@ 0x80
 80017d0:	035b      	lsls	r3, r3, #13
 80017d2:	4013      	ands	r3, r2
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017e4:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	039b      	lsls	r3, r3, #14
 80017fc:	4013      	ands	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001808:	4b1f      	ldr	r3, [pc, #124]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800180e:	4a1e      	ldr	r2, [pc, #120]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 8001810:	2384      	movs	r3, #132	@ 0x84
 8001812:	58d3      	ldr	r3, [r2, r3]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43da      	mvns	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	029b      	lsls	r3, r3, #10
 8001828:	4013      	ands	r3, r2
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001834:	4914      	ldr	r1, [pc, #80]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 8001836:	2284      	movs	r2, #132	@ 0x84
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800183c:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	58d3      	ldr	r3, [r2, r3]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	025b      	lsls	r3, r3, #9
 8001856:	4013      	ands	r3, r2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001862:	4909      	ldr	r1, [pc, #36]	@ (8001888 <HAL_GPIO_Init+0x2b8>)
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	40da      	lsrs	r2, r3
 8001878:	1e13      	subs	r3, r2, #0
 800187a:	d000      	beq.n	800187e <HAL_GPIO_Init+0x2ae>
 800187c:	e6b0      	b.n	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b006      	add	sp, #24
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021800 	.word	0x40021800
 800188c:	50000400 	.word	0x50000400
 8001890:	50000800 	.word	0x50000800
 8001894:	50000c00 	.word	0x50000c00

08001898 <LL_RCC_GetAPB1Prescaler>:
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	23e0      	movs	r3, #224	@ 0xe0
 80018a2:	01db      	lsls	r3, r3, #7
 80018a4:	4013      	ands	r3, r2
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b6:	4b3c      	ldr	r3, [pc, #240]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2238      	movs	r2, #56	@ 0x38
 80018bc:	4013      	ands	r3, r2
 80018be:	d10f      	bne.n	80018e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018c0:	4b39      	ldr	r3, [pc, #228]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0adb      	lsrs	r3, r3, #11
 80018c6:	2207      	movs	r2, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	2201      	movs	r2, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0013      	movs	r3, r2
 80018d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	4835      	ldr	r0, [pc, #212]	@ (80019ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80018d6:	f7fe fc1b 	bl	8000110 <__udivsi3>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	e05d      	b.n	800199c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e0:	4b31      	ldr	r3, [pc, #196]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2238      	movs	r2, #56	@ 0x38
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d102      	bne.n	80018f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018ec:	4b30      	ldr	r3, [pc, #192]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	e054      	b.n	800199c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f2:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2238      	movs	r2, #56	@ 0x38
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	d138      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2203      	movs	r2, #3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	2207      	movs	r2, #7
 8001910:	4013      	ands	r3, r2
 8001912:	3301      	adds	r3, #1
 8001914:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d10d      	bne.n	8001938 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	4824      	ldr	r0, [pc, #144]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001920:	f7fe fbf6 	bl	8000110 <__udivsi3>
 8001924:	0003      	movs	r3, r0
 8001926:	0019      	movs	r1, r3
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	227f      	movs	r2, #127	@ 0x7f
 8001930:	4013      	ands	r3, r2
 8001932:	434b      	muls	r3, r1
 8001934:	617b      	str	r3, [r7, #20]
        break;
 8001936:	e00d      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	481c      	ldr	r0, [pc, #112]	@ (80019ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800193c:	f7fe fbe8 	bl	8000110 <__udivsi3>
 8001940:	0003      	movs	r3, r0
 8001942:	0019      	movs	r1, r3
 8001944:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	227f      	movs	r2, #127	@ 0x7f
 800194c:	4013      	ands	r3, r2
 800194e:	434b      	muls	r3, r1
 8001950:	617b      	str	r3, [r7, #20]
        break;
 8001952:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0f5b      	lsrs	r3, r3, #29
 800195a:	2207      	movs	r2, #7
 800195c:	4013      	ands	r3, r2
 800195e:	3301      	adds	r3, #1
 8001960:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	6978      	ldr	r0, [r7, #20]
 8001966:	f7fe fbd3 	bl	8000110 <__udivsi3>
 800196a:	0003      	movs	r3, r0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e015      	b.n	800199c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2238      	movs	r2, #56	@ 0x38
 8001976:	4013      	ands	r3, r2
 8001978:	2b20      	cmp	r3, #32
 800197a:	d103      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e00b      	b.n	800199c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2238      	movs	r2, #56	@ 0x38
 800198a:	4013      	ands	r3, r2
 800198c:	2b18      	cmp	r3, #24
 800198e:	d103      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001990:	23fa      	movs	r3, #250	@ 0xfa
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e001      	b.n	800199c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800199c:	693b      	ldr	r3, [r7, #16]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b006      	add	sp, #24
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	007a1200 	.word	0x007a1200

080019b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b8:	4b02      	ldr	r3, [pc, #8]	@ (80019c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	20000020 	.word	0x20000020

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019cc:	f7ff fff2 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019d0:	0004      	movs	r4, r0
 80019d2:	f7ff ff61 	bl	8001898 <LL_RCC_GetAPB1Prescaler>
 80019d6:	0003      	movs	r3, r0
 80019d8:	0b1a      	lsrs	r2, r3, #12
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	58d3      	ldr	r3, [r2, r3]
 80019e0:	221f      	movs	r2, #31
 80019e2:	4013      	ands	r3, r2
 80019e4:	40dc      	lsrs	r4, r3
 80019e6:	0023      	movs	r3, r4
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	08003d14 	.word	0x08003d14

080019f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e046      	b.n	8001a94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2288      	movs	r2, #136	@ 0x88
 8001a0a:	589b      	ldr	r3, [r3, r2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d107      	bne.n	8001a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2284      	movs	r2, #132	@ 0x84
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff fad2 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2288      	movs	r2, #136	@ 0x88
 8001a24:	2124      	movs	r1, #36	@ 0x24
 8001a26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 fe0e 	bl	8002664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 fc66 	bl	800231c <UART_SetConfig>
 8001a50:	0003      	movs	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e01c      	b.n	8001a94 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	490d      	ldr	r1, [pc, #52]	@ (8001a9c <HAL_UART_Init+0xa8>)
 8001a66:	400a      	ands	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	212a      	movs	r1, #42	@ 0x2a
 8001a76:	438a      	bics	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f000 fe9d 	bl	80027cc <UART_CheckIdleState>
 8001a92:	0003      	movs	r3, r0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	ffffb7ff 	.word	0xffffb7ff

08001aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	@ 0x28
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	1dbb      	adds	r3, r7, #6
 8001aae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2288      	movs	r2, #136	@ 0x88
 8001ab4:	589b      	ldr	r3, [r3, r2]
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d000      	beq.n	8001abc <HAL_UART_Transmit+0x1c>
 8001aba:	e090      	b.n	8001bde <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_UART_Transmit+0x2a>
 8001ac2:	1dbb      	adds	r3, r7, #6
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e088      	b.n	8001be0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	015b      	lsls	r3, r3, #5
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d109      	bne.n	8001aee <HAL_UART_Transmit+0x4e>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d105      	bne.n	8001aee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d001      	beq.n	8001aee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e078      	b.n	8001be0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2290      	movs	r2, #144	@ 0x90
 8001af2:	2100      	movs	r1, #0
 8001af4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2288      	movs	r2, #136	@ 0x88
 8001afa:	2121      	movs	r1, #33	@ 0x21
 8001afc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001afe:	f7ff fb8f 	bl	8001220 <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1dba      	adds	r2, r7, #6
 8001b0a:	2154      	movs	r1, #84	@ 0x54
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1dba      	adds	r2, r7, #6
 8001b14:	2156      	movs	r1, #86	@ 0x56
 8001b16:	8812      	ldrh	r2, [r2, #0]
 8001b18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	015b      	lsls	r3, r3, #5
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d108      	bne.n	8001b38 <HAL_UART_Transmit+0x98>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d104      	bne.n	8001b38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	e003      	b.n	8001b40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b40:	e030      	b.n	8001ba4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	f000 fee6 	bl	8002920 <UART_WaitOnFlagUntilTimeout>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2288      	movs	r2, #136	@ 0x88
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e03d      	b.n	8001be0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	001a      	movs	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	05d2      	lsls	r2, r2, #23
 8001b76:	0dd2      	lsrs	r2, r2, #23
 8001b78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e007      	b.n	8001b92 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2256      	movs	r2, #86	@ 0x56
 8001b96:	5a9b      	ldrh	r3, [r3, r2]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b299      	uxth	r1, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2256      	movs	r2, #86	@ 0x56
 8001ba2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2256      	movs	r2, #86	@ 0x56
 8001ba8:	5a9b      	ldrh	r3, [r3, r2]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1c8      	bne.n	8001b42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	0013      	movs	r3, r2
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2140      	movs	r1, #64	@ 0x40
 8001bbe:	f000 feaf 	bl	8002920 <UART_WaitOnFlagUntilTimeout>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2288      	movs	r2, #136	@ 0x88
 8001bca:	2120      	movs	r1, #32
 8001bcc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e006      	b.n	8001be0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2288      	movs	r2, #136	@ 0x88
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
  }
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b008      	add	sp, #32
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	1dbb      	adds	r3, r7, #6
 8001bf4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	228c      	movs	r2, #140	@ 0x8c
 8001bfa:	589b      	ldr	r3, [r3, r2]
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d145      	bne.n	8001c8c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_UART_Receive_IT+0x26>
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e03d      	b.n	8001c8e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	015b      	lsls	r3, r3, #5
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d109      	bne.n	8001c32 <HAL_UART_Receive_IT+0x4a>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d001      	beq.n	8001c32 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e02d      	b.n	8001c8e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	4013      	ands	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c46:	f3ef 8310 	mrs	r3, PRIMASK
 8001c4a:	613b      	str	r3, [r7, #16]
  return(result);
 8001c4c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	2301      	movs	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f383 8810 	msr	PRIMASK, r3
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	04c9      	lsls	r1, r1, #19
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f383 8810 	msr	PRIMASK, r3
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c7a:	1dbb      	adds	r3, r7, #6
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 febc 	bl	8002a00 <UART_Start_Receive_IT>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	e000      	b.n	8001c8e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b008      	add	sp, #32
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b0aa      	sub	sp, #168	@ 0xa8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	22a4      	movs	r2, #164	@ 0xa4
 8001ca8:	18b9      	adds	r1, r7, r2
 8001caa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	20a0      	movs	r0, #160	@ 0xa0
 8001cb4:	1839      	adds	r1, r7, r0
 8001cb6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	249c      	movs	r4, #156	@ 0x9c
 8001cc0:	1939      	adds	r1, r7, r4
 8001cc2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	18bb      	adds	r3, r7, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4aa2      	ldr	r2, [pc, #648]	@ (8001f54 <HAL_UART_IRQHandler+0x2bc>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2298      	movs	r2, #152	@ 0x98
 8001cd0:	18bd      	adds	r5, r7, r2
 8001cd2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001cd4:	18bb      	adds	r3, r7, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11a      	bne.n	8001d12 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d015      	beq.n	8001d12 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	4013      	ands	r3, r2
 8001cee:	d105      	bne.n	8001cfc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001cf0:	193b      	adds	r3, r7, r4
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	055b      	lsls	r3, r3, #21
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d00a      	beq.n	8001d12 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d100      	bne.n	8001d06 <HAL_UART_IRQHandler+0x6e>
 8001d04:	e2dc      	b.n	80022c0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	0010      	movs	r0, r2
 8001d0e:	4798      	blx	r3
      }
      return;
 8001d10:	e2d6      	b.n	80022c0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001d12:	2398      	movs	r3, #152	@ 0x98
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d100      	bne.n	8001d1e <HAL_UART_IRQHandler+0x86>
 8001d1c:	e122      	b.n	8001f64 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001d1e:	239c      	movs	r3, #156	@ 0x9c
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a8c      	ldr	r2, [pc, #560]	@ (8001f58 <HAL_UART_IRQHandler+0x2c0>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	d106      	bne.n	8001d38 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001d2a:	23a0      	movs	r3, #160	@ 0xa0
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a8a      	ldr	r2, [pc, #552]	@ (8001f5c <HAL_UART_IRQHandler+0x2c4>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	d100      	bne.n	8001d38 <HAL_UART_IRQHandler+0xa0>
 8001d36:	e115      	b.n	8001f64 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d38:	23a4      	movs	r3, #164	@ 0xa4
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d012      	beq.n	8001d6a <HAL_UART_IRQHandler+0xd2>
 8001d44:	23a0      	movs	r3, #160	@ 0xa0
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d00b      	beq.n	8001d6a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2290      	movs	r2, #144	@ 0x90
 8001d5e:	589b      	ldr	r3, [r3, r2]
 8001d60:	2201      	movs	r2, #1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2190      	movs	r1, #144	@ 0x90
 8001d68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d6a:	23a4      	movs	r3, #164	@ 0xa4
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2202      	movs	r2, #2
 8001d72:	4013      	ands	r3, r2
 8001d74:	d011      	beq.n	8001d9a <HAL_UART_IRQHandler+0x102>
 8001d76:	239c      	movs	r3, #156	@ 0x9c
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d00b      	beq.n	8001d9a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2202      	movs	r2, #2
 8001d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2290      	movs	r2, #144	@ 0x90
 8001d8e:	589b      	ldr	r3, [r3, r2]
 8001d90:	2204      	movs	r2, #4
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2190      	movs	r1, #144	@ 0x90
 8001d98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d9a:	23a4      	movs	r3, #164	@ 0xa4
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2204      	movs	r2, #4
 8001da2:	4013      	ands	r3, r2
 8001da4:	d011      	beq.n	8001dca <HAL_UART_IRQHandler+0x132>
 8001da6:	239c      	movs	r3, #156	@ 0x9c
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	d00b      	beq.n	8001dca <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2204      	movs	r2, #4
 8001db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2290      	movs	r2, #144	@ 0x90
 8001dbe:	589b      	ldr	r3, [r3, r2]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2190      	movs	r1, #144	@ 0x90
 8001dc8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001dca:	23a4      	movs	r3, #164	@ 0xa4
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d017      	beq.n	8001e06 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001dd6:	23a0      	movs	r3, #160	@ 0xa0
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	4013      	ands	r3, r2
 8001de0:	d105      	bne.n	8001dee <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001de2:	239c      	movs	r3, #156	@ 0x9c
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a5b      	ldr	r2, [pc, #364]	@ (8001f58 <HAL_UART_IRQHandler+0x2c0>)
 8001dea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001dec:	d00b      	beq.n	8001e06 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2208      	movs	r2, #8
 8001df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2290      	movs	r2, #144	@ 0x90
 8001dfa:	589b      	ldr	r3, [r3, r2]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2190      	movs	r1, #144	@ 0x90
 8001e04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e06:	23a4      	movs	r3, #164	@ 0xa4
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4013      	ands	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_UART_IRQHandler+0x1a4>
 8001e14:	23a0      	movs	r3, #160	@ 0xa0
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	04db      	lsls	r3, r3, #19
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d00c      	beq.n	8001e3c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2280      	movs	r2, #128	@ 0x80
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2290      	movs	r2, #144	@ 0x90
 8001e30:	589b      	ldr	r3, [r3, r2]
 8001e32:	2220      	movs	r2, #32
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2190      	movs	r1, #144	@ 0x90
 8001e3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2290      	movs	r2, #144	@ 0x90
 8001e40:	589b      	ldr	r3, [r3, r2]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d100      	bne.n	8001e48 <HAL_UART_IRQHandler+0x1b0>
 8001e46:	e23d      	b.n	80022c4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001e48:	23a4      	movs	r3, #164	@ 0xa4
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	4013      	ands	r3, r2
 8001e52:	d015      	beq.n	8001e80 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001e54:	23a0      	movs	r3, #160	@ 0xa0
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d106      	bne.n	8001e6e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001e60:	239c      	movs	r3, #156	@ 0x9c
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	055b      	lsls	r3, r3, #21
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d008      	beq.n	8001e80 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2290      	movs	r2, #144	@ 0x90
 8001e84:	589b      	ldr	r3, [r3, r2]
 8001e86:	2194      	movs	r1, #148	@ 0x94
 8001e88:	187a      	adds	r2, r7, r1
 8001e8a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	d004      	beq.n	8001ea4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2228      	movs	r2, #40	@ 0x28
 8001ea0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ea2:	d04c      	beq.n	8001f3e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 fece 	bl	8002c48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2240      	movs	r2, #64	@ 0x40
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b40      	cmp	r3, #64	@ 0x40
 8001eb8:	d13c      	bne.n	8001f34 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eba:	f3ef 8310 	mrs	r3, PRIMASK
 8001ebe:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001ec0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec2:	2090      	movs	r0, #144	@ 0x90
 8001ec4:	183a      	adds	r2, r7, r0
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ece:	f383 8810 	msr	PRIMASK, r3
}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2140      	movs	r1, #64	@ 0x40
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	183b      	adds	r3, r7, r0
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eec:	f383 8810 	msr	PRIMASK, r3
}
 8001ef0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2280      	movs	r2, #128	@ 0x80
 8001ef6:	589b      	ldr	r3, [r3, r2]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d016      	beq.n	8001f2a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	589b      	ldr	r3, [r3, r2]
 8001f02:	4a17      	ldr	r2, [pc, #92]	@ (8001f60 <HAL_UART_IRQHandler+0x2c8>)
 8001f04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	589b      	ldr	r3, [r3, r2]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff faf5 	bl	80014fc <HAL_DMA_Abort_IT>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d01c      	beq.n	8001f50 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2280      	movs	r2, #128	@ 0x80
 8001f1a:	589b      	ldr	r3, [r3, r2]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	2180      	movs	r1, #128	@ 0x80
 8001f22:	5852      	ldr	r2, [r2, r1]
 8001f24:	0010      	movs	r0, r2
 8001f26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	e012      	b.n	8001f50 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 f9e1 	bl	80022f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f32:	e00d      	b.n	8001f50 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 f9dc 	bl	80022f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f3c:	e008      	b.n	8001f50 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 f9d7 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2290      	movs	r2, #144	@ 0x90
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001f4e:	e1b9      	b.n	80022c4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f50:	46c0      	nop			@ (mov r8, r8)
    return;
 8001f52:	e1b7      	b.n	80022c4 <HAL_UART_IRQHandler+0x62c>
 8001f54:	0000080f 	.word	0x0000080f
 8001f58:	10000001 	.word	0x10000001
 8001f5c:	04000120 	.word	0x04000120
 8001f60:	08002d15 	.word	0x08002d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d000      	beq.n	8001f6e <HAL_UART_IRQHandler+0x2d6>
 8001f6c:	e13e      	b.n	80021ec <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001f6e:	23a4      	movs	r3, #164	@ 0xa4
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2210      	movs	r2, #16
 8001f76:	4013      	ands	r3, r2
 8001f78:	d100      	bne.n	8001f7c <HAL_UART_IRQHandler+0x2e4>
 8001f7a:	e137      	b.n	80021ec <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001f7c:	23a0      	movs	r3, #160	@ 0xa0
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2210      	movs	r2, #16
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_UART_IRQHandler+0x2f2>
 8001f88:	e130      	b.n	80021ec <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2210      	movs	r2, #16
 8001f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2240      	movs	r2, #64	@ 0x40
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b40      	cmp	r3, #64	@ 0x40
 8001f9e:	d000      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x30a>
 8001fa0:	e0a4      	b.n	80020ec <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	589b      	ldr	r3, [r3, r2]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	217e      	movs	r1, #126	@ 0x7e
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001fb2:	187b      	adds	r3, r7, r1
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d100      	bne.n	8001fbc <HAL_UART_IRQHandler+0x324>
 8001fba:	e185      	b.n	80022c8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	225c      	movs	r2, #92	@ 0x5c
 8001fc0:	5a9b      	ldrh	r3, [r3, r2]
 8001fc2:	187a      	adds	r2, r7, r1
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d300      	bcc.n	8001fcc <HAL_UART_IRQHandler+0x334>
 8001fca:	e17d      	b.n	80022c8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	187a      	adds	r2, r7, r1
 8001fd0:	215e      	movs	r1, #94	@ 0x5e
 8001fd2:	8812      	ldrh	r2, [r2, #0]
 8001fd4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	589b      	ldr	r3, [r3, r2]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d170      	bne.n	80020c8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff6:	f383 8810 	msr	PRIMASK, r3
}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	49b4      	ldr	r1, [pc, #720]	@ (80022d8 <HAL_UART_IRQHandler+0x640>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800200e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002012:	f383 8810 	msr	PRIMASK, r3
}
 8002016:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002018:	f3ef 8310 	mrs	r3, PRIMASK
 800201c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800201e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002020:	677b      	str	r3, [r7, #116]	@ 0x74
 8002022:	2301      	movs	r3, #1
 8002024:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002028:	f383 8810 	msr	PRIMASK, r3
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	438a      	bics	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002040:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002044:	f383 8810 	msr	PRIMASK, r3
}
 8002048:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204a:	f3ef 8310 	mrs	r3, PRIMASK
 800204e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002052:	673b      	str	r3, [r7, #112]	@ 0x70
 8002054:	2301      	movs	r3, #1
 8002056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800205a:	f383 8810 	msr	PRIMASK, r3
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2140      	movs	r1, #64	@ 0x40
 800206c:	438a      	bics	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002072:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002076:	f383 8810 	msr	PRIMASK, r3
}
 800207a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	228c      	movs	r2, #140	@ 0x8c
 8002080:	2120      	movs	r1, #32
 8002082:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208a:	f3ef 8310 	mrs	r3, PRIMASK
 800208e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002094:	2301      	movs	r3, #1
 8002096:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800209a:	f383 8810 	msr	PRIMASK, r3
}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2110      	movs	r1, #16
 80020ac:	438a      	bics	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020b6:	f383 8810 	msr	PRIMASK, r3
}
 80020ba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	589b      	ldr	r3, [r3, r2]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff f9b8 	bl	8001438 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	225c      	movs	r2, #92	@ 0x5c
 80020d2:	5a9a      	ldrh	r2, [r3, r2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	215e      	movs	r1, #94	@ 0x5e
 80020d8:	5a5b      	ldrh	r3, [r3, r1]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f90d 	bl	8002304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80020ea:	e0ed      	b.n	80022c8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	225c      	movs	r2, #92	@ 0x5c
 80020f0:	5a99      	ldrh	r1, [r3, r2]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	225e      	movs	r2, #94	@ 0x5e
 80020f6:	5a9b      	ldrh	r3, [r3, r2]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	208e      	movs	r0, #142	@ 0x8e
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	1a8a      	subs	r2, r1, r2
 8002100:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	225e      	movs	r2, #94	@ 0x5e
 8002106:	5a9b      	ldrh	r3, [r3, r2]
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d100      	bne.n	8002110 <HAL_UART_IRQHandler+0x478>
 800210e:	e0dd      	b.n	80022cc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002110:	183b      	adds	r3, r7, r0
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d100      	bne.n	800211a <HAL_UART_IRQHandler+0x482>
 8002118:	e0d8      	b.n	80022cc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211a:	f3ef 8310 	mrs	r3, PRIMASK
 800211e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002120:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002122:	2488      	movs	r4, #136	@ 0x88
 8002124:	193a      	adds	r2, r7, r4
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f383 8810 	msr	PRIMASK, r3
}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4967      	ldr	r1, [pc, #412]	@ (80022dc <HAL_UART_IRQHandler+0x644>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	193b      	adds	r3, r7, r4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f383 8810 	msr	PRIMASK, r3
}
 8002150:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002152:	f3ef 8310 	mrs	r3, PRIMASK
 8002156:	61bb      	str	r3, [r7, #24]
  return(result);
 8002158:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800215a:	2484      	movs	r4, #132	@ 0x84
 800215c:	193a      	adds	r2, r7, r4
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f383 8810 	msr	PRIMASK, r3
}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	495a      	ldr	r1, [pc, #360]	@ (80022e0 <HAL_UART_IRQHandler+0x648>)
 8002178:	400a      	ands	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	193b      	adds	r3, r7, r4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f383 8810 	msr	PRIMASK, r3
}
 8002188:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	228c      	movs	r2, #140	@ 0x8c
 800218e:	2120      	movs	r1, #32
 8002190:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219e:	f3ef 8310 	mrs	r3, PRIMASK
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a6:	2480      	movs	r4, #128	@ 0x80
 80021a8:	193a      	adds	r2, r7, r4
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	f383 8810 	msr	PRIMASK, r3
}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2110      	movs	r1, #16
 80021c4:	438a      	bics	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d0:	f383 8810 	msr	PRIMASK, r3
}
 80021d4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021dc:	183b      	adds	r3, r7, r0
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0011      	movs	r1, r2
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f88d 	bl	8002304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021ea:	e06f      	b.n	80022cc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80021ec:	23a4      	movs	r3, #164	@ 0xa4
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	035b      	lsls	r3, r3, #13
 80021f6:	4013      	ands	r3, r2
 80021f8:	d010      	beq.n	800221c <HAL_UART_IRQHandler+0x584>
 80021fa:	239c      	movs	r3, #156	@ 0x9c
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	03db      	lsls	r3, r3, #15
 8002204:	4013      	ands	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2280      	movs	r2, #128	@ 0x80
 800220e:	0352      	lsls	r2, r2, #13
 8002210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f001 fab5 	bl	8003784 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800221a:	e05a      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800221c:	23a4      	movs	r3, #164	@ 0xa4
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2280      	movs	r2, #128	@ 0x80
 8002224:	4013      	ands	r3, r2
 8002226:	d016      	beq.n	8002256 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002228:	23a0      	movs	r3, #160	@ 0xa0
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2280      	movs	r2, #128	@ 0x80
 8002230:	4013      	ands	r3, r2
 8002232:	d106      	bne.n	8002242 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002234:	239c      	movs	r3, #156	@ 0x9c
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	@ 0x80
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002246:	2b00      	cmp	r3, #0
 8002248:	d042      	beq.n	80022d0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	0010      	movs	r0, r2
 8002252:	4798      	blx	r3
    }
    return;
 8002254:	e03c      	b.n	80022d0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002256:	23a4      	movs	r3, #164	@ 0xa4
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2240      	movs	r2, #64	@ 0x40
 800225e:	4013      	ands	r3, r2
 8002260:	d00a      	beq.n	8002278 <HAL_UART_IRQHandler+0x5e0>
 8002262:	23a0      	movs	r3, #160	@ 0xa0
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2240      	movs	r2, #64	@ 0x40
 800226a:	4013      	ands	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 fd66 	bl	8002d42 <UART_EndTransmit_IT>
    return;
 8002276:	e02c      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002278:	23a4      	movs	r3, #164	@ 0xa4
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4013      	ands	r3, r2
 8002284:	d00b      	beq.n	800229e <HAL_UART_IRQHandler+0x606>
 8002286:	23a0      	movs	r3, #160	@ 0xa0
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	05db      	lsls	r3, r3, #23
 8002290:	4013      	ands	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0018      	movs	r0, r3
 8002298:	f001 fa84 	bl	80037a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800229c:	e019      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800229e:	23a4      	movs	r3, #164	@ 0xa4
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	045b      	lsls	r3, r3, #17
 80022a8:	4013      	ands	r3, r2
 80022aa:	d012      	beq.n	80022d2 <HAL_UART_IRQHandler+0x63a>
 80022ac:	23a0      	movs	r3, #160	@ 0xa0
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	da0d      	bge.n	80022d2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f001 fa6b 	bl	8003794 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80022be:	e008      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	e006      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
    return;
 80022c4:	46c0      	nop			@ (mov r8, r8)
 80022c6:	e004      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80022c8:	46c0      	nop			@ (mov r8, r8)
 80022ca:	e002      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	e000      	b.n	80022d2 <HAL_UART_IRQHandler+0x63a>
    return;
 80022d0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b02a      	add	sp, #168	@ 0xa8
 80022d6:	bdb0      	pop	{r4, r5, r7, pc}
 80022d8:	fffffeff 	.word	0xfffffeff
 80022dc:	fffffedf 	.word	0xfffffedf
 80022e0:	effffffe 	.word	0xeffffffe

080022e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80022ec:	46c0      	nop			@ (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022fc:	46c0      	nop			@ (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	000a      	movs	r2, r1
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002324:	231a      	movs	r3, #26
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	4313      	orrs	r3, r2
 8002342:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4abc      	ldr	r2, [pc, #752]	@ (800263c <UART_SetConfig+0x320>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4ab7      	ldr	r2, [pc, #732]	@ (8002640 <UART_SetConfig+0x324>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	4313      	orrs	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4aae      	ldr	r2, [pc, #696]	@ (8002644 <UART_SetConfig+0x328>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	220f      	movs	r2, #15
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4aa4      	ldr	r2, [pc, #656]	@ (8002648 <UART_SetConfig+0x32c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d127      	bne.n	800240a <UART_SetConfig+0xee>
 80023ba:	4ba4      	ldr	r3, [pc, #656]	@ (800264c <UART_SetConfig+0x330>)
 80023bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023be:	2203      	movs	r2, #3
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d017      	beq.n	80023f6 <UART_SetConfig+0xda>
 80023c6:	d81b      	bhi.n	8002400 <UART_SetConfig+0xe4>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d00a      	beq.n	80023e2 <UART_SetConfig+0xc6>
 80023cc:	d818      	bhi.n	8002400 <UART_SetConfig+0xe4>
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <UART_SetConfig+0xbc>
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d00a      	beq.n	80023ec <UART_SetConfig+0xd0>
 80023d6:	e013      	b.n	8002400 <UART_SetConfig+0xe4>
 80023d8:	231b      	movs	r3, #27
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e058      	b.n	8002494 <UART_SetConfig+0x178>
 80023e2:	231b      	movs	r3, #27
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e053      	b.n	8002494 <UART_SetConfig+0x178>
 80023ec:	231b      	movs	r3, #27
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2204      	movs	r2, #4
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e04e      	b.n	8002494 <UART_SetConfig+0x178>
 80023f6:	231b      	movs	r3, #27
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2208      	movs	r2, #8
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e049      	b.n	8002494 <UART_SetConfig+0x178>
 8002400:	231b      	movs	r3, #27
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2210      	movs	r2, #16
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e044      	b.n	8002494 <UART_SetConfig+0x178>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a90      	ldr	r2, [pc, #576]	@ (8002650 <UART_SetConfig+0x334>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d127      	bne.n	8002464 <UART_SetConfig+0x148>
 8002414:	4b8d      	ldr	r3, [pc, #564]	@ (800264c <UART_SetConfig+0x330>)
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	220c      	movs	r2, #12
 800241a:	4013      	ands	r3, r2
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d017      	beq.n	8002450 <UART_SetConfig+0x134>
 8002420:	d81b      	bhi.n	800245a <UART_SetConfig+0x13e>
 8002422:	2b08      	cmp	r3, #8
 8002424:	d00a      	beq.n	800243c <UART_SetConfig+0x120>
 8002426:	d818      	bhi.n	800245a <UART_SetConfig+0x13e>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <UART_SetConfig+0x116>
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00a      	beq.n	8002446 <UART_SetConfig+0x12a>
 8002430:	e013      	b.n	800245a <UART_SetConfig+0x13e>
 8002432:	231b      	movs	r3, #27
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e02b      	b.n	8002494 <UART_SetConfig+0x178>
 800243c:	231b      	movs	r3, #27
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e026      	b.n	8002494 <UART_SetConfig+0x178>
 8002446:	231b      	movs	r3, #27
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2204      	movs	r2, #4
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e021      	b.n	8002494 <UART_SetConfig+0x178>
 8002450:	231b      	movs	r3, #27
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2208      	movs	r2, #8
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e01c      	b.n	8002494 <UART_SetConfig+0x178>
 800245a:	231b      	movs	r3, #27
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2210      	movs	r2, #16
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e017      	b.n	8002494 <UART_SetConfig+0x178>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a7a      	ldr	r2, [pc, #488]	@ (8002654 <UART_SetConfig+0x338>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d104      	bne.n	8002478 <UART_SetConfig+0x15c>
 800246e:	231b      	movs	r3, #27
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e00d      	b.n	8002494 <UART_SetConfig+0x178>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a76      	ldr	r2, [pc, #472]	@ (8002658 <UART_SetConfig+0x33c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d104      	bne.n	800248c <UART_SetConfig+0x170>
 8002482:	231b      	movs	r3, #27
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e003      	b.n	8002494 <UART_SetConfig+0x178>
 800248c:	231b      	movs	r3, #27
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2210      	movs	r2, #16
 8002492:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	429a      	cmp	r2, r3
 800249e:	d000      	beq.n	80024a2 <UART_SetConfig+0x186>
 80024a0:	e065      	b.n	800256e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80024a2:	231b      	movs	r3, #27
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d015      	beq.n	80024d8 <UART_SetConfig+0x1bc>
 80024ac:	dc18      	bgt.n	80024e0 <UART_SetConfig+0x1c4>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d00d      	beq.n	80024ce <UART_SetConfig+0x1b2>
 80024b2:	dc15      	bgt.n	80024e0 <UART_SetConfig+0x1c4>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <UART_SetConfig+0x1a2>
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d005      	beq.n	80024c8 <UART_SetConfig+0x1ac>
 80024bc:	e010      	b.n	80024e0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024be:	f7ff fa83 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 80024c2:	0003      	movs	r3, r0
 80024c4:	617b      	str	r3, [r7, #20]
        break;
 80024c6:	e012      	b.n	80024ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <UART_SetConfig+0x340>)
 80024ca:	617b      	str	r3, [r7, #20]
        break;
 80024cc:	e00f      	b.n	80024ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ce:	f7ff f9ef 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 80024d2:	0003      	movs	r3, r0
 80024d4:	617b      	str	r3, [r7, #20]
        break;
 80024d6:	e00a      	b.n	80024ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	617b      	str	r3, [r7, #20]
        break;
 80024de:	e006      	b.n	80024ee <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80024e4:	231a      	movs	r3, #26
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
        break;
 80024ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d100      	bne.n	80024f6 <UART_SetConfig+0x1da>
 80024f4:	e08d      	b.n	8002612 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024fa:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <UART_SetConfig+0x344>)
 80024fc:	0052      	lsls	r2, r2, #1
 80024fe:	5ad3      	ldrh	r3, [r2, r3]
 8002500:	0019      	movs	r1, r3
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7fd fe04 	bl	8000110 <__udivsi3>
 8002508:	0003      	movs	r3, r0
 800250a:	005a      	lsls	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	18d2      	adds	r2, r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0019      	movs	r1, r3
 800251a:	0010      	movs	r0, r2
 800251c:	f7fd fdf8 	bl	8000110 <__udivsi3>
 8002520:	0003      	movs	r3, r0
 8002522:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	d91c      	bls.n	8002564 <UART_SetConfig+0x248>
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	429a      	cmp	r2, r3
 8002532:	d217      	bcs.n	8002564 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	b29a      	uxth	r2, r3
 8002538:	200e      	movs	r0, #14
 800253a:	183b      	adds	r3, r7, r0
 800253c:	210f      	movs	r1, #15
 800253e:	438a      	bics	r2, r1
 8002540:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	b29b      	uxth	r3, r3
 8002548:	2207      	movs	r2, #7
 800254a:	4013      	ands	r3, r2
 800254c:	b299      	uxth	r1, r3
 800254e:	183b      	adds	r3, r7, r0
 8002550:	183a      	adds	r2, r7, r0
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	183a      	adds	r2, r7, r0
 800255e:	8812      	ldrh	r2, [r2, #0]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	e056      	b.n	8002612 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002564:	231a      	movs	r3, #26
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e051      	b.n	8002612 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800256e:	231b      	movs	r3, #27
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d015      	beq.n	80025a4 <UART_SetConfig+0x288>
 8002578:	dc18      	bgt.n	80025ac <UART_SetConfig+0x290>
 800257a:	2b04      	cmp	r3, #4
 800257c:	d00d      	beq.n	800259a <UART_SetConfig+0x27e>
 800257e:	dc15      	bgt.n	80025ac <UART_SetConfig+0x290>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <UART_SetConfig+0x26e>
 8002584:	2b02      	cmp	r3, #2
 8002586:	d005      	beq.n	8002594 <UART_SetConfig+0x278>
 8002588:	e010      	b.n	80025ac <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258a:	f7ff fa1d 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 800258e:	0003      	movs	r3, r0
 8002590:	617b      	str	r3, [r7, #20]
        break;
 8002592:	e012      	b.n	80025ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002594:	4b31      	ldr	r3, [pc, #196]	@ (800265c <UART_SetConfig+0x340>)
 8002596:	617b      	str	r3, [r7, #20]
        break;
 8002598:	e00f      	b.n	80025ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259a:	f7ff f989 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800259e:	0003      	movs	r3, r0
 80025a0:	617b      	str	r3, [r7, #20]
        break;
 80025a2:	e00a      	b.n	80025ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	617b      	str	r3, [r7, #20]
        break;
 80025aa:	e006      	b.n	80025ba <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025b0:	231a      	movs	r3, #26
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
        break;
 80025b8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d028      	beq.n	8002612 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025c4:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <UART_SetConfig+0x344>)
 80025c6:	0052      	lsls	r2, r2, #1
 80025c8:	5ad3      	ldrh	r3, [r2, r3]
 80025ca:	0019      	movs	r1, r3
 80025cc:	6978      	ldr	r0, [r7, #20]
 80025ce:	f7fd fd9f 	bl	8000110 <__udivsi3>
 80025d2:	0003      	movs	r3, r0
 80025d4:	001a      	movs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	18d2      	adds	r2, r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0019      	movs	r1, r3
 80025e4:	0010      	movs	r0, r2
 80025e6:	f7fd fd93 	bl	8000110 <__udivsi3>
 80025ea:	0003      	movs	r3, r0
 80025ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d90a      	bls.n	800260a <UART_SetConfig+0x2ee>
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	025b      	lsls	r3, r3, #9
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d205      	bcs.n	800260a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	e003      	b.n	8002612 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800260a:	231a      	movs	r3, #26
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	226a      	movs	r2, #106	@ 0x6a
 8002616:	2101      	movs	r1, #1
 8002618:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2268      	movs	r2, #104	@ 0x68
 800261e:	2101      	movs	r1, #1
 8002620:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800262e:	231a      	movs	r3, #26
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	781b      	ldrb	r3, [r3, #0]
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b008      	add	sp, #32
 800263a:	bd80      	pop	{r7, pc}
 800263c:	cfff69f3 	.word	0xcfff69f3
 8002640:	ffffcfff 	.word	0xffffcfff
 8002644:	11fff4ff 	.word	0x11fff4ff
 8002648:	40013800 	.word	0x40013800
 800264c:	40021000 	.word	0x40021000
 8002650:	40004400 	.word	0x40004400
 8002654:	40004800 	.word	0x40004800
 8002658:	40004c00 	.word	0x40004c00
 800265c:	00f42400 	.word	0x00f42400
 8002660:	08003d34 	.word	0x08003d34

08002664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	2208      	movs	r2, #8
 8002672:	4013      	ands	r3, r2
 8002674:	d00b      	beq.n	800268e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a4a      	ldr	r2, [pc, #296]	@ (80027a8 <UART_AdvFeatureConfig+0x144>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d00b      	beq.n	80026b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a43      	ldr	r2, [pc, #268]	@ (80027ac <UART_AdvFeatureConfig+0x148>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	0019      	movs	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d00b      	beq.n	80026d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a3b      	ldr	r2, [pc, #236]	@ (80027b0 <UART_AdvFeatureConfig+0x14c>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	2204      	movs	r2, #4
 80026d8:	4013      	ands	r3, r2
 80026da:	d00b      	beq.n	80026f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a34      	ldr	r2, [pc, #208]	@ (80027b4 <UART_AdvFeatureConfig+0x150>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	2210      	movs	r2, #16
 80026fa:	4013      	ands	r3, r2
 80026fc:	d00b      	beq.n	8002716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a2c      	ldr	r2, [pc, #176]	@ (80027b8 <UART_AdvFeatureConfig+0x154>)
 8002706:	4013      	ands	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271a:	2220      	movs	r2, #32
 800271c:	4013      	ands	r3, r2
 800271e:	d00b      	beq.n	8002738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a25      	ldr	r2, [pc, #148]	@ (80027bc <UART_AdvFeatureConfig+0x158>)
 8002728:	4013      	ands	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	2240      	movs	r2, #64	@ 0x40
 800273e:	4013      	ands	r3, r2
 8002740:	d01d      	beq.n	800277e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <UART_AdvFeatureConfig+0x15c>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	035b      	lsls	r3, r3, #13
 8002762:	429a      	cmp	r2, r3
 8002764:	d10b      	bne.n	800277e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <UART_AdvFeatureConfig+0x160>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	2280      	movs	r2, #128	@ 0x80
 8002784:	4013      	ands	r3, r2
 8002786:	d00b      	beq.n	80027a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a0e      	ldr	r2, [pc, #56]	@ (80027c8 <UART_AdvFeatureConfig+0x164>)
 8002790:	4013      	ands	r3, r2
 8002792:	0019      	movs	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  }
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	ffff7fff 	.word	0xffff7fff
 80027ac:	fffdffff 	.word	0xfffdffff
 80027b0:	fffeffff 	.word	0xfffeffff
 80027b4:	fffbffff 	.word	0xfffbffff
 80027b8:	ffffefff 	.word	0xffffefff
 80027bc:	ffffdfff 	.word	0xffffdfff
 80027c0:	ffefffff 	.word	0xffefffff
 80027c4:	ff9fffff 	.word	0xff9fffff
 80027c8:	fff7ffff 	.word	0xfff7ffff

080027cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b092      	sub	sp, #72	@ 0x48
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2290      	movs	r2, #144	@ 0x90
 80027d8:	2100      	movs	r1, #0
 80027da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027dc:	f7fe fd20 	bl	8001220 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2208      	movs	r2, #8
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d12d      	bne.n	800284e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027f4:	2280      	movs	r2, #128	@ 0x80
 80027f6:	0391      	lsls	r1, r2, #14
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4a47      	ldr	r2, [pc, #284]	@ (8002918 <UART_CheckIdleState+0x14c>)
 80027fc:	9200      	str	r2, [sp, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	f000 f88e 	bl	8002920 <UART_WaitOnFlagUntilTimeout>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d022      	beq.n	800284e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002808:	f3ef 8310 	mrs	r3, PRIMASK
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002810:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002812:	2301      	movs	r3, #1
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002818:	f383 8810 	msr	PRIMASK, r3
}
 800281c:	46c0      	nop			@ (mov r8, r8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2180      	movs	r1, #128	@ 0x80
 800282a:	438a      	bics	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	f383 8810 	msr	PRIMASK, r3
}
 8002838:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2288      	movs	r2, #136	@ 0x88
 800283e:	2120      	movs	r1, #32
 8002840:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2284      	movs	r2, #132	@ 0x84
 8002846:	2100      	movs	r1, #0
 8002848:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e060      	b.n	8002910 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2204      	movs	r2, #4
 8002856:	4013      	ands	r3, r2
 8002858:	2b04      	cmp	r3, #4
 800285a:	d146      	bne.n	80028ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800285c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800285e:	2280      	movs	r2, #128	@ 0x80
 8002860:	03d1      	lsls	r1, r2, #15
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4a2c      	ldr	r2, [pc, #176]	@ (8002918 <UART_CheckIdleState+0x14c>)
 8002866:	9200      	str	r2, [sp, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	f000 f859 	bl	8002920 <UART_WaitOnFlagUntilTimeout>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d03b      	beq.n	80028ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002872:	f3ef 8310 	mrs	r3, PRIMASK
 8002876:	60fb      	str	r3, [r7, #12]
  return(result);
 8002878:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800287a:	637b      	str	r3, [r7, #52]	@ 0x34
 800287c:	2301      	movs	r3, #1
 800287e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f383 8810 	msr	PRIMASK, r3
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4922      	ldr	r1, [pc, #136]	@ (800291c <UART_CheckIdleState+0x150>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f383 8810 	msr	PRIMASK, r3
}
 80028a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a4:	f3ef 8310 	mrs	r3, PRIMASK
 80028a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80028aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ae:	2301      	movs	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f383 8810 	msr	PRIMASK, r3
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	438a      	bics	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	228c      	movs	r2, #140	@ 0x8c
 80028da:	2120      	movs	r1, #32
 80028dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2284      	movs	r2, #132	@ 0x84
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e012      	b.n	8002910 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2288      	movs	r2, #136	@ 0x88
 80028ee:	2120      	movs	r1, #32
 80028f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	228c      	movs	r2, #140	@ 0x8c
 80028f6:	2120      	movs	r1, #32
 80028f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2284      	movs	r2, #132	@ 0x84
 800290a:	2100      	movs	r1, #0
 800290c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b010      	add	sp, #64	@ 0x40
 8002916:	bd80      	pop	{r7, pc}
 8002918:	01ffffff 	.word	0x01ffffff
 800291c:	fffffedf 	.word	0xfffffedf

08002920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002930:	e051      	b.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	3301      	adds	r3, #1
 8002936:	d04e      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002938:	f7fe fc72 	bl	8001220 <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	429a      	cmp	r2, r3
 8002946:	d302      	bcc.n	800294e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e051      	b.n	80029f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2204      	movs	r2, #4
 800295a:	4013      	ands	r3, r2
 800295c:	d03b      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b80      	cmp	r3, #128	@ 0x80
 8002962:	d038      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b40      	cmp	r3, #64	@ 0x40
 8002968:	d035      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2208      	movs	r2, #8
 8002972:	4013      	ands	r3, r2
 8002974:	2b08      	cmp	r3, #8
 8002976:	d111      	bne.n	800299c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2208      	movs	r2, #8
 800297e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 f960 	bl	8002c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2290      	movs	r2, #144	@ 0x90
 800298c:	2108      	movs	r1, #8
 800298e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2284      	movs	r2, #132	@ 0x84
 8002994:	2100      	movs	r1, #0
 8002996:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e02c      	b.n	80029f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	401a      	ands	r2, r3
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d112      	bne.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2280      	movs	r2, #128	@ 0x80
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f943 	bl	8002c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2290      	movs	r2, #144	@ 0x90
 80029c6:	2120      	movs	r1, #32
 80029c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2284      	movs	r2, #132	@ 0x84
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e00f      	b.n	80029f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	425a      	negs	r2, r3
 80029e6:	4153      	adcs	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	001a      	movs	r2, r3
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d09e      	beq.n	8002932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b004      	add	sp, #16
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b098      	sub	sp, #96	@ 0x60
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1dba      	adds	r2, r7, #6
 8002a18:	215c      	movs	r1, #92	@ 0x5c
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1dba      	adds	r2, r7, #6
 8002a22:	215e      	movs	r1, #94	@ 0x5e
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	015b      	lsls	r3, r3, #5
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10d      	bne.n	8002a56 <UART_Start_Receive_IT+0x56>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <UART_Start_Receive_IT+0x4c>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2260      	movs	r2, #96	@ 0x60
 8002a46:	497b      	ldr	r1, [pc, #492]	@ (8002c34 <UART_Start_Receive_IT+0x234>)
 8002a48:	5299      	strh	r1, [r3, r2]
 8002a4a:	e02e      	b.n	8002aaa <UART_Start_Receive_IT+0xaa>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2260      	movs	r2, #96	@ 0x60
 8002a50:	21ff      	movs	r1, #255	@ 0xff
 8002a52:	5299      	strh	r1, [r3, r2]
 8002a54:	e029      	b.n	8002aaa <UART_Start_Receive_IT+0xaa>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <UART_Start_Receive_IT+0x7a>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <UART_Start_Receive_IT+0x70>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2260      	movs	r2, #96	@ 0x60
 8002a6a:	21ff      	movs	r1, #255	@ 0xff
 8002a6c:	5299      	strh	r1, [r3, r2]
 8002a6e:	e01c      	b.n	8002aaa <UART_Start_Receive_IT+0xaa>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2260      	movs	r2, #96	@ 0x60
 8002a74:	217f      	movs	r1, #127	@ 0x7f
 8002a76:	5299      	strh	r1, [r3, r2]
 8002a78:	e017      	b.n	8002aaa <UART_Start_Receive_IT+0xaa>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	055b      	lsls	r3, r3, #21
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d10d      	bne.n	8002aa2 <UART_Start_Receive_IT+0xa2>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <UART_Start_Receive_IT+0x98>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2260      	movs	r2, #96	@ 0x60
 8002a92:	217f      	movs	r1, #127	@ 0x7f
 8002a94:	5299      	strh	r1, [r3, r2]
 8002a96:	e008      	b.n	8002aaa <UART_Start_Receive_IT+0xaa>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2260      	movs	r2, #96	@ 0x60
 8002a9c:	213f      	movs	r1, #63	@ 0x3f
 8002a9e:	5299      	strh	r1, [r3, r2]
 8002aa0:	e003      	b.n	8002aaa <UART_Start_Receive_IT+0xaa>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2260      	movs	r2, #96	@ 0x60
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2290      	movs	r2, #144	@ 0x90
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	228c      	movs	r2, #140	@ 0x8c
 8002ab6:	2122      	movs	r1, #34	@ 0x22
 8002ab8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aba:	f3ef 8310 	mrs	r3, PRIMASK
 8002abe:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aca:	f383 8810 	msr	PRIMASK, r3
}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	059b      	lsls	r3, r3, #22
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d150      	bne.n	8002b9a <UART_Start_Receive_IT+0x19a>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2268      	movs	r2, #104	@ 0x68
 8002afc:	5a9b      	ldrh	r3, [r3, r2]
 8002afe:	1dba      	adds	r2, r7, #6
 8002b00:	8812      	ldrh	r2, [r2, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d349      	bcc.n	8002b9a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	015b      	lsls	r3, r3, #5
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d107      	bne.n	8002b22 <UART_Start_Receive_IT+0x122>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a46      	ldr	r2, [pc, #280]	@ (8002c38 <UART_Start_Receive_IT+0x238>)
 8002b1e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002b20:	e002      	b.n	8002b28 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a45      	ldr	r2, [pc, #276]	@ (8002c3c <UART_Start_Receive_IT+0x23c>)
 8002b26:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d019      	beq.n	8002b64 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b30:	f3ef 8310 	mrs	r3, PRIMASK
 8002b34:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b40:	f383 8810 	msr	PRIMASK, r3
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2180      	movs	r1, #128	@ 0x80
 8002b52:	0049      	lsls	r1, r1, #1
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b5e:	f383 8810 	msr	PRIMASK, r3
}
 8002b62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b64:	f3ef 8310 	mrs	r3, PRIMASK
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b6e:	2301      	movs	r3, #1
 8002b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	f383 8810 	msr	PRIMASK, r3
}
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2180      	movs	r1, #128	@ 0x80
 8002b86:	0549      	lsls	r1, r1, #21
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	f383 8810 	msr	PRIMASK, r3
}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	e047      	b.n	8002c2a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	015b      	lsls	r3, r3, #5
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d107      	bne.n	8002bb6 <UART_Start_Receive_IT+0x1b6>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <UART_Start_Receive_IT+0x240>)
 8002bb2:	675a      	str	r2, [r3, #116]	@ 0x74
 8002bb4:	e002      	b.n	8002bbc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a22      	ldr	r2, [pc, #136]	@ (8002c44 <UART_Start_Receive_IT+0x244>)
 8002bba:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d019      	beq.n	8002bf8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bca:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bce:	2301      	movs	r3, #1
 8002bd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	f383 8810 	msr	PRIMASK, r3
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2190      	movs	r1, #144	@ 0x90
 8002be6:	0049      	lsls	r1, r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	e018      	b.n	8002c2a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8002bfe:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002c00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f383 8810 	msr	PRIMASK, r3
}
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2120      	movs	r1, #32
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b018      	add	sp, #96	@ 0x60
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	000001ff 	.word	0x000001ff
 8002c38:	0800343d 	.word	0x0800343d
 8002c3c:	0800310d 	.word	0x0800310d
 8002c40:	08002f55 	.word	0x08002f55
 8002c44:	08002d9d 	.word	0x08002d9d

08002c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08e      	sub	sp, #56	@ 0x38
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c50:	f3ef 8310 	mrs	r3, PRIMASK
 8002c54:	617b      	str	r3, [r7, #20]
  return(result);
 8002c56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4926      	ldr	r1, [pc, #152]	@ (8002d0c <UART_EndRxTransfer+0xc4>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f383 8810 	msr	PRIMASK, r3
}
 8002c80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c82:	f3ef 8310 	mrs	r3, PRIMASK
 8002c86:	623b      	str	r3, [r7, #32]
  return(result);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	491b      	ldr	r1, [pc, #108]	@ (8002d10 <UART_EndRxTransfer+0xc8>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cae:	f383 8810 	msr	PRIMASK, r3
}
 8002cb2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d118      	bne.n	8002cee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f383 8810 	msr	PRIMASK, r3
}
 8002cd0:	46c0      	nop			@ (mov r8, r8)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2110      	movs	r1, #16
 8002cde:	438a      	bics	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f383 8810 	msr	PRIMASK, r3
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	228c      	movs	r2, #140	@ 0x8c
 8002cf2:	2120      	movs	r1, #32
 8002cf4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b00e      	add	sp, #56	@ 0x38
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	fffffedf 	.word	0xfffffedf
 8002d10:	effffffe 	.word	0xeffffffe

08002d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	225e      	movs	r2, #94	@ 0x5e
 8002d26:	2100      	movs	r1, #0
 8002d28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2256      	movs	r2, #86	@ 0x56
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff fadd 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b004      	add	sp, #16
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d50:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	2301      	movs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f383 8810 	msr	PRIMASK, r3
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2140      	movs	r1, #64	@ 0x40
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2288      	movs	r2, #136	@ 0x88
 8002d80:	2120      	movs	r1, #32
 8002d82:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7ff faa9 	bl	80022e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b006      	add	sp, #24
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b094      	sub	sp, #80	@ 0x50
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002da4:	204e      	movs	r0, #78	@ 0x4e
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	2160      	movs	r1, #96	@ 0x60
 8002dac:	5a52      	ldrh	r2, [r2, r1]
 8002dae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	228c      	movs	r2, #140	@ 0x8c
 8002db4:	589b      	ldr	r3, [r3, r2]
 8002db6:	2b22      	cmp	r3, #34	@ 0x22
 8002db8:	d000      	beq.n	8002dbc <UART_RxISR_8BIT+0x20>
 8002dba:	e0ba      	b.n	8002f32 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc2:	214c      	movs	r1, #76	@ 0x4c
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	183b      	adds	r3, r7, r0
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b2d9      	uxtb	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	400a      	ands	r2, r1
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	225e      	movs	r2, #94	@ 0x5e
 8002dec:	5a9b      	ldrh	r3, [r3, r2]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b299      	uxth	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	225e      	movs	r2, #94	@ 0x5e
 8002df8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	225e      	movs	r2, #94	@ 0x5e
 8002dfe:	5a9b      	ldrh	r3, [r3, r2]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d000      	beq.n	8002e08 <UART_RxISR_8BIT+0x6c>
 8002e06:	e09c      	b.n	8002f42 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e08:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e12:	2301      	movs	r3, #1
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4948      	ldr	r1, [pc, #288]	@ (8002f4c <UART_RxISR_8BIT+0x1b0>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e44:	2301      	movs	r3, #1
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4a:	f383 8810 	msr	PRIMASK, r3
}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	228c      	movs	r2, #140	@ 0x8c
 8002e70:	2120      	movs	r1, #32
 8002e72:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e94:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4928      	ldr	r1, [pc, #160]	@ (8002f50 <UART_RxISR_8BIT+0x1b4>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d12f      	bne.n	8002f28 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ece:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ed4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ed8:	2301      	movs	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f383 8810 	msr	PRIMASK, r3
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2110      	movs	r1, #16
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f383 8810 	msr	PRIMASK, r3
}
 8002efe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	2210      	movs	r2, #16
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d103      	bne.n	8002f16 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2210      	movs	r2, #16
 8002f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	225c      	movs	r2, #92	@ 0x5c
 8002f1a:	5a9a      	ldrh	r2, [r3, r2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff f9ef 	bl	8002304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002f26:	e00c      	b.n	8002f42 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7fd fbea 	bl	8000704 <HAL_UART_RxCpltCallback>
}
 8002f30:	e007      	b.n	8002f42 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2108      	movs	r1, #8
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b014      	add	sp, #80	@ 0x50
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	fffffedf 	.word	0xfffffedf
 8002f50:	fbffffff 	.word	0xfbffffff

08002f54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b094      	sub	sp, #80	@ 0x50
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002f5c:	204e      	movs	r0, #78	@ 0x4e
 8002f5e:	183b      	adds	r3, r7, r0
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	2160      	movs	r1, #96	@ 0x60
 8002f64:	5a52      	ldrh	r2, [r2, r1]
 8002f66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	228c      	movs	r2, #140	@ 0x8c
 8002f6c:	589b      	ldr	r3, [r3, r2]
 8002f6e:	2b22      	cmp	r3, #34	@ 0x22
 8002f70:	d000      	beq.n	8002f74 <UART_RxISR_16BIT+0x20>
 8002f72:	e0ba      	b.n	80030ea <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f7a:	214c      	movs	r1, #76	@ 0x4c
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	183a      	adds	r2, r7, r0
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	225e      	movs	r2, #94	@ 0x5e
 8002fa4:	5a9b      	ldrh	r3, [r3, r2]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b299      	uxth	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	225e      	movs	r2, #94	@ 0x5e
 8002fb0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	225e      	movs	r2, #94	@ 0x5e
 8002fb6:	5a9b      	ldrh	r3, [r3, r2]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d000      	beq.n	8002fc0 <UART_RxISR_16BIT+0x6c>
 8002fbe:	e09c      	b.n	80030fa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc4:	623b      	str	r3, [r7, #32]
  return(result);
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	f383 8810 	msr	PRIMASK, r3
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4948      	ldr	r1, [pc, #288]	@ (8003104 <UART_RxISR_16BIT+0x1b0>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fec:	f383 8810 	msr	PRIMASK, r3
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	f383 8810 	msr	PRIMASK, r3
}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	438a      	bics	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301e:	f383 8810 	msr	PRIMASK, r3
}
 8003022:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	228c      	movs	r2, #140	@ 0x8c
 8003028:	2120      	movs	r1, #32
 800302a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	4013      	ands	r3, r2
 8003044:	d018      	beq.n	8003078 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003046:	f3ef 8310 	mrs	r3, PRIMASK
 800304a:	617b      	str	r3, [r7, #20]
  return(result);
 800304c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003050:	2301      	movs	r3, #1
 8003052:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f383 8810 	msr	PRIMASK, r3
}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4928      	ldr	r1, [pc, #160]	@ (8003108 <UART_RxISR_16BIT+0x1b4>)
 8003068:	400a      	ands	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f383 8810 	msr	PRIMASK, r3
}
 8003076:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d12f      	bne.n	80030e0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003086:	f3ef 8310 	mrs	r3, PRIMASK
 800308a:	60bb      	str	r3, [r7, #8]
  return(result);
 800308c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003090:	2301      	movs	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2110      	movs	r1, #16
 80030a8:	438a      	bics	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	2210      	movs	r2, #16
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d103      	bne.n	80030ce <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	225c      	movs	r2, #92	@ 0x5c
 80030d2:	5a9a      	ldrh	r2, [r3, r2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0011      	movs	r1, r2
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff f913 	bl	8002304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80030de:	e00c      	b.n	80030fa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7fd fb0e 	bl	8000704 <HAL_UART_RxCpltCallback>
}
 80030e8:	e007      	b.n	80030fa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2108      	movs	r1, #8
 80030f6:	430a      	orrs	r2, r1
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b014      	add	sp, #80	@ 0x50
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	fffffedf 	.word	0xfffffedf
 8003108:	fbffffff 	.word	0xfbffffff

0800310c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b0a0      	sub	sp, #128	@ 0x80
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003114:	237a      	movs	r3, #122	@ 0x7a
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	2160      	movs	r1, #96	@ 0x60
 800311c:	5a52      	ldrh	r2, [r2, r1]
 800311e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	228c      	movs	r2, #140	@ 0x8c
 800313c:	589b      	ldr	r3, [r3, r2]
 800313e:	2b22      	cmp	r3, #34	@ 0x22
 8003140:	d000      	beq.n	8003144 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003142:	e165      	b.n	8003410 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003144:	236e      	movs	r3, #110	@ 0x6e
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	2168      	movs	r1, #104	@ 0x68
 800314c:	5a52      	ldrh	r2, [r2, r1]
 800314e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003150:	e10c      	b.n	800336c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003158:	216c      	movs	r1, #108	@ 0x6c
 800315a:	187b      	adds	r3, r7, r1
 800315c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800315e:	187b      	adds	r3, r7, r1
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	237a      	movs	r3, #122	@ 0x7a
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b2d9      	uxtb	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	400a      	ands	r2, r1
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	225e      	movs	r2, #94	@ 0x5e
 8003184:	5a9b      	ldrh	r3, [r3, r2]
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b299      	uxth	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	225e      	movs	r2, #94	@ 0x5e
 8003190:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800319a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800319c:	2207      	movs	r2, #7
 800319e:	4013      	ands	r3, r2
 80031a0:	d049      	beq.n	8003236 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d010      	beq.n	80031cc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80031aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031ac:	2380      	movs	r3, #128	@ 0x80
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4013      	ands	r3, r2
 80031b2:	d00b      	beq.n	80031cc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2201      	movs	r2, #1
 80031ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2290      	movs	r2, #144	@ 0x90
 80031c0:	589b      	ldr	r3, [r3, r2]
 80031c2:	2201      	movs	r2, #1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2190      	movs	r1, #144	@ 0x90
 80031ca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031ce:	2202      	movs	r2, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	d00f      	beq.n	80031f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80031d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031d6:	2201      	movs	r2, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	d00b      	beq.n	80031f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2202      	movs	r2, #2
 80031e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2290      	movs	r2, #144	@ 0x90
 80031e8:	589b      	ldr	r3, [r3, r2]
 80031ea:	2204      	movs	r2, #4
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2190      	movs	r1, #144	@ 0x90
 80031f2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031f6:	2204      	movs	r2, #4
 80031f8:	4013      	ands	r3, r2
 80031fa:	d00f      	beq.n	800321c <UART_RxISR_8BIT_FIFOEN+0x110>
 80031fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d00b      	beq.n	800321c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2204      	movs	r2, #4
 800320a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2290      	movs	r2, #144	@ 0x90
 8003210:	589b      	ldr	r3, [r3, r2]
 8003212:	2202      	movs	r2, #2
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2190      	movs	r1, #144	@ 0x90
 800321a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2290      	movs	r2, #144	@ 0x90
 8003220:	589b      	ldr	r3, [r3, r2]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff f863 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2290      	movs	r2, #144	@ 0x90
 8003232:	2100      	movs	r1, #0
 8003234:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	225e      	movs	r2, #94	@ 0x5e
 800323a:	5a9b      	ldrh	r3, [r3, r2]
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d000      	beq.n	8003244 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003242:	e093      	b.n	800336c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003244:	f3ef 8310 	mrs	r3, PRIMASK
 8003248:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800324c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800324e:	2301      	movs	r3, #1
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4970      	ldr	r1, [pc, #448]	@ (8003428 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800326c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800327c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800327e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003280:	2301      	movs	r3, #1
 8003282:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4965      	ldr	r1, [pc, #404]	@ (800342c <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003298:	400a      	ands	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800329e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	228c      	movs	r2, #140	@ 0x8c
 80032ac:	2120      	movs	r1, #32
 80032ae:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	2380      	movs	r3, #128	@ 0x80
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	4013      	ands	r3, r2
 80032c8:	d018      	beq.n	80032fc <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80032d4:	2301      	movs	r3, #1
 80032d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4951      	ldr	r1, [pc, #324]	@ (8003430 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80032ec:	400a      	ands	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d12f      	bne.n	8003364 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	623b      	str	r3, [r7, #32]
  return(result);
 8003310:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003312:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003314:	2301      	movs	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2110      	movs	r1, #16
 800332c:	438a      	bics	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003332:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2210      	movs	r2, #16
 8003344:	4013      	ands	r3, r2
 8003346:	2b10      	cmp	r3, #16
 8003348:	d103      	bne.n	8003352 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2210      	movs	r2, #16
 8003350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	225c      	movs	r2, #92	@ 0x5c
 8003356:	5a9a      	ldrh	r2, [r3, r2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0011      	movs	r1, r2
 800335c:	0018      	movs	r0, r3
 800335e:	f7fe ffd1 	bl	8002304 <HAL_UARTEx_RxEventCallback>
 8003362:	e003      	b.n	800336c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f7fd f9cc 	bl	8000704 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800336c:	236e      	movs	r3, #110	@ 0x6e
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003378:	2220      	movs	r2, #32
 800337a:	4013      	ands	r3, r2
 800337c:	d000      	beq.n	8003380 <UART_RxISR_8BIT_FIFOEN+0x274>
 800337e:	e6e8      	b.n	8003152 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003380:	205a      	movs	r0, #90	@ 0x5a
 8003382:	183b      	adds	r3, r7, r0
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	215e      	movs	r1, #94	@ 0x5e
 8003388:	5a52      	ldrh	r2, [r2, r1]
 800338a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800338c:	0001      	movs	r1, r0
 800338e:	187b      	adds	r3, r7, r1
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d044      	beq.n	8003420 <UART_RxISR_8BIT_FIFOEN+0x314>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2268      	movs	r2, #104	@ 0x68
 800339a:	5a9b      	ldrh	r3, [r3, r2]
 800339c:	187a      	adds	r2, r7, r1
 800339e:	8812      	ldrh	r2, [r2, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d23d      	bcs.n	8003420 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a4:	f3ef 8310 	mrs	r3, PRIMASK
 80033a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80033aa:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80033ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80033ae:	2301      	movs	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	491b      	ldr	r1, [pc, #108]	@ (8003434 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f383 8810 	msr	PRIMASK, r3
}
 80033d4:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a17      	ldr	r2, [pc, #92]	@ (8003438 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80033da:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033dc:	f3ef 8310 	mrs	r3, PRIMASK
 80033e0:	617b      	str	r3, [r7, #20]
  return(result);
 80033e2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80033e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2120      	movs	r1, #32
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003404:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800340e:	e007      	b.n	8003420 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2108      	movs	r1, #8
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
}
 8003420:	46c0      	nop			@ (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b020      	add	sp, #128	@ 0x80
 8003426:	bd80      	pop	{r7, pc}
 8003428:	fffffeff 	.word	0xfffffeff
 800342c:	effffffe 	.word	0xeffffffe
 8003430:	fbffffff 	.word	0xfbffffff
 8003434:	efffffff 	.word	0xefffffff
 8003438:	08002d9d 	.word	0x08002d9d

0800343c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b0a2      	sub	sp, #136	@ 0x88
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003444:	2382      	movs	r3, #130	@ 0x82
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	2160      	movs	r1, #96	@ 0x60
 800344c:	5a52      	ldrh	r2, [r2, r1]
 800344e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2284      	movs	r2, #132	@ 0x84
 8003458:	18ba      	adds	r2, r7, r2
 800345a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	228c      	movs	r2, #140	@ 0x8c
 8003470:	589b      	ldr	r3, [r3, r2]
 8003472:	2b22      	cmp	r3, #34	@ 0x22
 8003474:	d000      	beq.n	8003478 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003476:	e16f      	b.n	8003758 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003478:	2376      	movs	r3, #118	@ 0x76
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	2168      	movs	r1, #104	@ 0x68
 8003480:	5a52      	ldrh	r2, [r2, r1]
 8003482:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003484:	e114      	b.n	80036b0 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800348c:	2174      	movs	r1, #116	@ 0x74
 800348e:	187b      	adds	r3, r7, r1
 8003490:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003496:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2282      	movs	r2, #130	@ 0x82
 800349c:	18ba      	adds	r2, r7, r2
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	8812      	ldrh	r2, [r2, #0]
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ae:	1c9a      	adds	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	225e      	movs	r2, #94	@ 0x5e
 80034b8:	5a9b      	ldrh	r3, [r3, r2]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b299      	uxth	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	225e      	movs	r2, #94	@ 0x5e
 80034c4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	2184      	movs	r1, #132	@ 0x84
 80034ce:	187a      	adds	r2, r7, r1
 80034d0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2207      	movs	r2, #7
 80034d8:	4013      	ands	r3, r2
 80034da:	d04e      	beq.n	800357a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	d010      	beq.n	8003508 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80034e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d00b      	beq.n	8003508 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2290      	movs	r2, #144	@ 0x90
 80034fc:	589b      	ldr	r3, [r3, r2]
 80034fe:	2201      	movs	r2, #1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2190      	movs	r1, #144	@ 0x90
 8003506:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003508:	2384      	movs	r3, #132	@ 0x84
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2202      	movs	r2, #2
 8003510:	4013      	ands	r3, r2
 8003512:	d00f      	beq.n	8003534 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003516:	2201      	movs	r2, #1
 8003518:	4013      	ands	r3, r2
 800351a:	d00b      	beq.n	8003534 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2202      	movs	r2, #2
 8003522:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2290      	movs	r2, #144	@ 0x90
 8003528:	589b      	ldr	r3, [r3, r2]
 800352a:	2204      	movs	r2, #4
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2190      	movs	r1, #144	@ 0x90
 8003532:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003534:	2384      	movs	r3, #132	@ 0x84
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	4013      	ands	r3, r2
 800353e:	d00f      	beq.n	8003560 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003542:	2201      	movs	r2, #1
 8003544:	4013      	ands	r3, r2
 8003546:	d00b      	beq.n	8003560 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2204      	movs	r2, #4
 800354e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2290      	movs	r2, #144	@ 0x90
 8003554:	589b      	ldr	r3, [r3, r2]
 8003556:	2202      	movs	r2, #2
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2190      	movs	r1, #144	@ 0x90
 800355e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2290      	movs	r2, #144	@ 0x90
 8003564:	589b      	ldr	r3, [r3, r2]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f7fe fec1 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2290      	movs	r2, #144	@ 0x90
 8003576:	2100      	movs	r1, #0
 8003578:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	225e      	movs	r2, #94	@ 0x5e
 800357e:	5a9b      	ldrh	r3, [r3, r2]
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d000      	beq.n	8003588 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003586:	e093      	b.n	80036b0 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003588:	f3ef 8310 	mrs	r3, PRIMASK
 800358c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800358e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003590:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003592:	2301      	movs	r3, #1
 8003594:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4971      	ldr	r1, [pc, #452]	@ (8003770 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ba:	f3ef 8310 	mrs	r3, PRIMASK
 80035be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80035c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035c4:	2301      	movs	r3, #1
 80035c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4966      	ldr	r1, [pc, #408]	@ (8003774 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80035dc:	400a      	ands	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035e2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	228c      	movs	r2, #140	@ 0x8c
 80035f0:	2120      	movs	r1, #32
 80035f2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	4013      	ands	r3, r2
 800360c:	d018      	beq.n	8003640 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360e:	f3ef 8310 	mrs	r3, PRIMASK
 8003612:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003616:	667b      	str	r3, [r7, #100]	@ 0x64
 8003618:	2301      	movs	r3, #1
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	f383 8810 	msr	PRIMASK, r3
}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4952      	ldr	r1, [pc, #328]	@ (8003778 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003630:	400a      	ands	r2, r1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003636:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	f383 8810 	msr	PRIMASK, r3
}
 800363e:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d12f      	bne.n	80036a8 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364e:	f3ef 8310 	mrs	r3, PRIMASK
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003656:	663b      	str	r3, [r7, #96]	@ 0x60
 8003658:	2301      	movs	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2110      	movs	r1, #16
 8003670:	438a      	bics	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	2210      	movs	r2, #16
 8003688:	4013      	ands	r3, r2
 800368a:	2b10      	cmp	r3, #16
 800368c:	d103      	bne.n	8003696 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2210      	movs	r2, #16
 8003694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	225c      	movs	r2, #92	@ 0x5c
 800369a:	5a9a      	ldrh	r2, [r3, r2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	0011      	movs	r1, r2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fe fe2f 	bl	8002304 <HAL_UARTEx_RxEventCallback>
 80036a6:	e003      	b.n	80036b0 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7fd f82a 	bl	8000704 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80036b0:	2376      	movs	r3, #118	@ 0x76
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80036ba:	2384      	movs	r3, #132	@ 0x84
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2220      	movs	r2, #32
 80036c2:	4013      	ands	r3, r2
 80036c4:	d000      	beq.n	80036c8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 80036c6:	e6de      	b.n	8003486 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80036c8:	205e      	movs	r0, #94	@ 0x5e
 80036ca:	183b      	adds	r3, r7, r0
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	215e      	movs	r1, #94	@ 0x5e
 80036d0:	5a52      	ldrh	r2, [r2, r1]
 80036d2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80036d4:	0001      	movs	r1, r0
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d044      	beq.n	8003768 <UART_RxISR_16BIT_FIFOEN+0x32c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2268      	movs	r2, #104	@ 0x68
 80036e2:	5a9b      	ldrh	r3, [r3, r2]
 80036e4:	187a      	adds	r2, r7, r1
 80036e6:	8812      	ldrh	r2, [r2, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d23d      	bcs.n	8003768 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ec:	f3ef 8310 	mrs	r3, PRIMASK
 80036f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80036f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80036f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036f6:	2301      	movs	r3, #1
 80036f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	491b      	ldr	r1, [pc, #108]	@ (800377c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800370e:	400a      	ands	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003722:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	61bb      	str	r3, [r7, #24]
  return(result);
 800372a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800372c:	657b      	str	r3, [r7, #84]	@ 0x54
 800372e:	2301      	movs	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2120      	movs	r1, #32
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003756:	e007      	b.n	8003768 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2108      	movs	r1, #8
 8003764:	430a      	orrs	r2, r1
 8003766:	619a      	str	r2, [r3, #24]
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b022      	add	sp, #136	@ 0x88
 800376e:	bd80      	pop	{r7, pc}
 8003770:	fffffeff 	.word	0xfffffeff
 8003774:	effffffe 	.word	0xeffffffe
 8003778:	fbffffff 	.word	0xfbffffff
 800377c:	efffffff 	.word	0xefffffff
 8003780:	08002f55 	.word	0x08002f55

08003784 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2284      	movs	r2, #132	@ 0x84
 80037c0:	5c9b      	ldrb	r3, [r3, r2]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_UARTEx_DisableFifoMode+0x16>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e027      	b.n	800381a <HAL_UARTEx_DisableFifoMode+0x66>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2284      	movs	r2, #132	@ 0x84
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2288      	movs	r2, #136	@ 0x88
 80037d6:	2124      	movs	r1, #36	@ 0x24
 80037d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	438a      	bics	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003824 <HAL_UARTEx_DisableFifoMode+0x70>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2288      	movs	r2, #136	@ 0x88
 800380c:	2120      	movs	r1, #32
 800380e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2284      	movs	r2, #132	@ 0x84
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	dfffffff 	.word	0xdfffffff

08003828 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2284      	movs	r2, #132	@ 0x84
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800383c:	2302      	movs	r3, #2
 800383e:	e02e      	b.n	800389e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2284      	movs	r2, #132	@ 0x84
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2288      	movs	r2, #136	@ 0x88
 800384c:	2124      	movs	r1, #36	@ 0x24
 800384e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2101      	movs	r1, #1
 8003864:	438a      	bics	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	08d9      	lsrs	r1, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f000 f854 	bl	800392c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2288      	movs	r2, #136	@ 0x88
 8003890:	2120      	movs	r1, #32
 8003892:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2284      	movs	r2, #132	@ 0x84
 8003898:	2100      	movs	r1, #0
 800389a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b004      	add	sp, #16
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2284      	movs	r2, #132	@ 0x84
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038bc:	2302      	movs	r3, #2
 80038be:	e02f      	b.n	8003920 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2284      	movs	r2, #132	@ 0x84
 80038c4:	2101      	movs	r1, #1
 80038c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2288      	movs	r2, #136	@ 0x88
 80038cc:	2124      	movs	r1, #36	@ 0x24
 80038ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003928 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0018      	movs	r0, r3
 8003902:	f000 f813 	bl	800392c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2288      	movs	r2, #136	@ 0x88
 8003912:	2120      	movs	r1, #32
 8003914:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2284      	movs	r2, #132	@ 0x84
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b004      	add	sp, #16
 8003926:	bd80      	pop	{r7, pc}
 8003928:	f1ffffff 	.word	0xf1ffffff

0800392c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800392c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	226a      	movs	r2, #106	@ 0x6a
 8003940:	2101      	movs	r1, #1
 8003942:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2268      	movs	r2, #104	@ 0x68
 8003948:	2101      	movs	r1, #1
 800394a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800394c:	e043      	b.n	80039d6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800394e:	260f      	movs	r6, #15
 8003950:	19bb      	adds	r3, r7, r6
 8003952:	2208      	movs	r2, #8
 8003954:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003956:	200e      	movs	r0, #14
 8003958:	183b      	adds	r3, r7, r0
 800395a:	2208      	movs	r2, #8
 800395c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	0e5b      	lsrs	r3, r3, #25
 8003966:	b2da      	uxtb	r2, r3
 8003968:	240d      	movs	r4, #13
 800396a:	193b      	adds	r3, r7, r4
 800396c:	2107      	movs	r1, #7
 800396e:	400a      	ands	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	0f5b      	lsrs	r3, r3, #29
 800397a:	b2da      	uxtb	r2, r3
 800397c:	250c      	movs	r5, #12
 800397e:	197b      	adds	r3, r7, r5
 8003980:	2107      	movs	r1, #7
 8003982:	400a      	ands	r2, r1
 8003984:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003986:	183b      	adds	r3, r7, r0
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	197a      	adds	r2, r7, r5
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	4914      	ldr	r1, [pc, #80]	@ (80039e0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003990:	5c8a      	ldrb	r2, [r1, r2]
 8003992:	435a      	muls	r2, r3
 8003994:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003996:	197b      	adds	r3, r7, r5
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <UARTEx_SetNbDataToProcess+0xb8>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800399e:	0019      	movs	r1, r3
 80039a0:	f7fc fc40 	bl	8000224 <__divsi3>
 80039a4:	0003      	movs	r3, r0
 80039a6:	b299      	uxth	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	226a      	movs	r2, #106	@ 0x6a
 80039ac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039ae:	19bb      	adds	r3, r7, r6
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	193a      	adds	r2, r7, r4
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	490a      	ldr	r1, [pc, #40]	@ (80039e0 <UARTEx_SetNbDataToProcess+0xb4>)
 80039b8:	5c8a      	ldrb	r2, [r1, r2]
 80039ba:	435a      	muls	r2, r3
 80039bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80039be:	193b      	adds	r3, r7, r4
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <UARTEx_SetNbDataToProcess+0xb8>)
 80039c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039c6:	0019      	movs	r1, r3
 80039c8:	f7fc fc2c 	bl	8000224 <__divsi3>
 80039cc:	0003      	movs	r3, r0
 80039ce:	b299      	uxth	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2268      	movs	r2, #104	@ 0x68
 80039d4:	5299      	strh	r1, [r3, r2]
}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b005      	add	sp, #20
 80039dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	08003d4c 	.word	0x08003d4c
 80039e4:	08003d54 	.word	0x08003d54

080039e8 <LL_GPIO_SetPinMode>:
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	435b      	muls	r3, r3
 80039fc:	001a      	movs	r2, r3
 80039fe:	0013      	movs	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	43db      	mvns	r3, r3
 8003a06:	400b      	ands	r3, r1
 8003a08:	001a      	movs	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	435b      	muls	r3, r3
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	434b      	muls	r3, r1
 8003a12:	431a      	orrs	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b004      	add	sp, #16
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <LL_GPIO_SetPinOutputType>:
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	43d2      	mvns	r2, r2
 8003a34:	401a      	ands	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	434b      	muls	r3, r1
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <LL_GPIO_SetPinSpeed>:
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6899      	ldr	r1, [r3, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	435b      	muls	r3, r3
 8003a5e:	001a      	movs	r2, r3
 8003a60:	0013      	movs	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	189b      	adds	r3, r3, r2
 8003a66:	43db      	mvns	r3, r3
 8003a68:	400b      	ands	r3, r1
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	435b      	muls	r3, r3
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	434b      	muls	r3, r1
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b004      	add	sp, #16
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <LL_GPIO_SetPinPull>:
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68d9      	ldr	r1, [r3, #12]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	435b      	muls	r3, r3
 8003a96:	001a      	movs	r2, r3
 8003a98:	0013      	movs	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	189b      	adds	r3, r3, r2
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	435b      	muls	r3, r3
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	434b      	muls	r3, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	60da      	str	r2, [r3, #12]
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b004      	add	sp, #16
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <LL_GPIO_SetAFPin_0_7>:
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a19      	ldr	r1, [r3, #32]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	435b      	muls	r3, r3
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4353      	muls	r3, r2
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	435a      	muls	r2, r3
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	43db      	mvns	r3, r3
 8003ade:	400b      	ands	r3, r1
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	435b      	muls	r3, r3
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	434b      	muls	r3, r1
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	434b      	muls	r3, r1
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	434b      	muls	r3, r1
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]
}
 8003af8:	46c0      	nop			@ (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <LL_GPIO_SetAFPin_8_15>:
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	0a12      	lsrs	r2, r2, #8
 8003b18:	4353      	muls	r3, r2
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	0a12      	lsrs	r2, r2, #8
 8003b1e:	4353      	muls	r3, r2
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	0a12      	lsrs	r2, r2, #8
 8003b24:	435a      	muls	r2, r3
 8003b26:	0013      	movs	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	400b      	ands	r3, r1
 8003b30:	001a      	movs	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	0a09      	lsrs	r1, r1, #8
 8003b3a:	434b      	muls	r3, r1
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	0a09      	lsrs	r1, r1, #8
 8003b40:	434b      	muls	r3, r1
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	0a09      	lsrs	r1, r1, #8
 8003b46:	434b      	muls	r3, r1
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	434b      	muls	r3, r1
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003b68:	e047      	b.n	8003bfa <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4091      	lsls	r1, r2
 8003b74:	000a      	movs	r2, r1
 8003b76:	4013      	ands	r3, r2
 8003b78:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d039      	beq.n	8003bf4 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d003      	beq.n	8003b90 <LL_GPIO_Init+0x36>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d10d      	bne.n	8003bac <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff ff56 	bl	8003a4a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7ff ff3a 	bl	8003a20 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff ff64 	bl	8003a82 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d111      	bne.n	8003be6 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2bff      	cmp	r3, #255	@ 0xff
 8003bc6:	d807      	bhi.n	8003bd8 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff ff72 	bl	8003aba <LL_GPIO_SetAFPin_0_7>
 8003bd6:	e006      	b.n	8003be6 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7ff ff8d 	bl	8003b00 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f7ff fefa 	bl	80039e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	40da      	lsrs	r2, r3
 8003c02:	1e13      	subs	r3, r2, #0
 8003c04:	d1b1      	bne.n	8003b6a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b004      	add	sp, #16
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003c18:	4b03      	ldr	r3, [pc, #12]	@ (8003c28 <LL_SetSystemCoreClock+0x18>)
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b002      	add	sp, #8
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	20000020 	.word	0x20000020

08003c2c <memset>:
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	1882      	adds	r2, r0, r2
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d100      	bne.n	8003c36 <memset+0xa>
 8003c34:	4770      	bx	lr
 8003c36:	7019      	strb	r1, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	e7f9      	b.n	8003c30 <memset+0x4>

08003c3c <strstr>:
 8003c3c:	780a      	ldrb	r2, [r1, #0]
 8003c3e:	b530      	push	{r4, r5, lr}
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	d10c      	bne.n	8003c5e <strstr+0x22>
 8003c44:	bd30      	pop	{r4, r5, pc}
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d108      	bne.n	8003c5c <strstr+0x20>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	5ccc      	ldrb	r4, [r1, r3]
 8003c4e:	2c00      	cmp	r4, #0
 8003c50:	d0f8      	beq.n	8003c44 <strstr+0x8>
 8003c52:	5cc5      	ldrb	r5, [r0, r3]
 8003c54:	42a5      	cmp	r5, r4
 8003c56:	d101      	bne.n	8003c5c <strstr+0x20>
 8003c58:	3301      	adds	r3, #1
 8003c5a:	e7f7      	b.n	8003c4c <strstr+0x10>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	7803      	ldrb	r3, [r0, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <strstr+0xa>
 8003c64:	0018      	movs	r0, r3
 8003c66:	e7ed      	b.n	8003c44 <strstr+0x8>

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	4c0c      	ldr	r4, [pc, #48]	@ (8003ca0 <__libc_init_array+0x38>)
 8003c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ca4 <__libc_init_array+0x3c>)
 8003c70:	1b64      	subs	r4, r4, r5
 8003c72:	10a4      	asrs	r4, r4, #2
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	2600      	movs	r6, #0
 8003c7a:	f000 f819 	bl	8003cb0 <_init>
 8003c7e:	4c0a      	ldr	r4, [pc, #40]	@ (8003ca8 <__libc_init_array+0x40>)
 8003c80:	4d0a      	ldr	r5, [pc, #40]	@ (8003cac <__libc_init_array+0x44>)
 8003c82:	1b64      	subs	r4, r4, r5
 8003c84:	10a4      	asrs	r4, r4, #2
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	00b3      	lsls	r3, r6, #2
 8003c8e:	58eb      	ldr	r3, [r5, r3]
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	00b3      	lsls	r3, r6, #2
 8003c98:	58eb      	ldr	r3, [r5, r3]
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08003d5c 	.word	0x08003d5c
 8003ca4:	08003d5c 	.word	0x08003d5c
 8003ca8:	08003d60 	.word	0x08003d60
 8003cac:	08003d5c 	.word	0x08003d5c

08003cb0 <_init>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr

08003cbc <_fini>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr
