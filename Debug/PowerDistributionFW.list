
PowerDistributionFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b0  080047b0  00006090  2**0
                  CONTENTS
  4 .ARM          00000000  080047b0  080047b0  00006090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b0  080047b0  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080047b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000090  08004848  00006090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08004848  000063bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbff  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb8  00000000  00000000  00011cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00013b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000760  00000000  00000000  00014510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f53  00000000  00000000  00014c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4f4  00000000  00000000  0002abc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088711  00000000  00000000  000370b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002634  00000000  00000000  000bf80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c1e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000090 	.word	0x20000090
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004688 	.word	0x08004688

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000094 	.word	0x20000094
 80000fc:	08004688 	.word	0x08004688

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <LL_RCC_HSI_Enable+0x18>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <LL_RCC_HSI_Enable+0x18>)
 800041a:	2180      	movs	r1, #128	@ 0x80
 800041c:	0049      	lsls	r1, r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000430:	4b07      	ldr	r3, [pc, #28]	@ (8000450 <LL_RCC_HSI_IsReady+0x24>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	401a      	ands	r2, r3
 800043a:	2380      	movs	r3, #128	@ 0x80
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	429a      	cmp	r2, r3
 8000440:	d101      	bne.n	8000446 <LL_RCC_HSI_IsReady+0x1a>
 8000442:	2301      	movs	r3, #1
 8000444:	e000      	b.n	8000448 <LL_RCC_HSI_IsReady+0x1c>
 8000446:	2300      	movs	r3, #0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <LL_RCC_SetSysClkSource+0x24>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2207      	movs	r2, #7
 8000462:	4393      	bics	r3, r2
 8000464:	0019      	movs	r1, r3
 8000466:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <LL_RCC_SetSysClkSource+0x24>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	430a      	orrs	r2, r1
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000480:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <LL_RCC_GetSysClkSource+0x14>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	2238      	movs	r2, #56	@ 0x38
 8000486:	4013      	ands	r3, r2
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	40021000 	.word	0x40021000

08000494 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a06      	ldr	r2, [pc, #24]	@ (80004bc <LL_RCC_SetAHBPrescaler+0x28>)
 80004a2:	4013      	ands	r3, r2
 80004a4:	0019      	movs	r1, r3
 80004a6:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	609a      	str	r2, [r3, #8]
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	fffff0ff 	.word	0xfffff0ff

080004c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80004ce:	4013      	ands	r3, r2
 80004d0:	0019      	movs	r1, r3
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	430a      	orrs	r2, r1
 80004d8:	609a      	str	r2, [r3, #8]
}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000
 80004e8:	ffff8fff 	.word	0xffff8fff

080004ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004f0:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f6:	2180      	movs	r1, #128	@ 0x80
 80004f8:	0449      	lsls	r1, r1, #17
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <LL_RCC_PLL_IsReady+0x24>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	049b      	lsls	r3, r3, #18
 8000514:	401a      	ands	r2, r3
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	049b      	lsls	r3, r3, #18
 800051a:	429a      	cmp	r2, r3
 800051c:	d101      	bne.n	8000522 <LL_RCC_PLL_IsReady+0x1a>
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <LL_RCC_PLL_IsReady+0x1c>
 8000522:	2300      	movs	r3, #0
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000544:	4013      	ands	r3, r2
 8000546:	0019      	movs	r1, r3
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	431a      	orrs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	431a      	orrs	r2, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	431a      	orrs	r2, r3
 8000558:	4b03      	ldr	r3, [pc, #12]	@ (8000568 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800055a:	430a      	orrs	r2, r1
 800055c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b004      	add	sp, #16
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	40021000 	.word	0x40021000
 800056c:	1fff808c 	.word	0x1fff808c

08000570 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	0549      	lsls	r1, r1, #21
 800057e:	430a      	orrs	r2, r1
 8000580:	60da      	str	r2, [r3, #12]
}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000596:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	430a      	orrs	r2, r1
 800059e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b004      	add	sp, #16
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2207      	movs	r2, #7
 80005c6:	4393      	bics	r3, r2
 80005c8:	0019      	movs	r1, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	40022000 	.word	0x40022000

080005e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <LL_FLASH_GetLatency+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2207      	movs	r2, #7
 80005ea:	4013      	ands	r3, r2
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40022000 	.word	0x40022000

080005f8 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4013      	ands	r3, r2
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	d101      	bne.n	8000614 <LL_GPIO_IsInputPinSet+0x1c>
 8000610:	2301      	movs	r3, #1
 8000612:	e000      	b.n	8000616 <LL_GPIO_IsInputPinSet+0x1e>
 8000614:	2300      	movs	r3, #0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	619a      	str	r2, [r3, #24]
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}

0800064e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4013      	ands	r3, r2
 8000664:	041a      	lsls	r2, r3, #16
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	43db      	mvns	r3, r3
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	400b      	ands	r3, r1
 800066e:	431a      	orrs	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	619a      	str	r2, [r3, #24]
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b004      	add	sp, #16
 800067a:	bd80      	pop	{r7, pc}

0800067c <SwitchTimingHandlar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SwitchTimingHandlar(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	timeoutPwrOff ++;
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <SwitchTimingHandlar+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <SwitchTimingHandlar+0x28>)
 8000688:	601a      	str	r2, [r3, #0]
	if(leaveSwitch)
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <SwitchTimingHandlar+0x2c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d105      	bne.n	800069e <SwitchTimingHandlar+0x22>
	{
		return;
	}
	counterSwitch ++;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <SwitchTimingHandlar+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <SwitchTimingHandlar+0x30>)
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e000      	b.n	80006a0 <SwitchTimingHandlar+0x24>
		return;
 800069e:	46c0      	nop			@ (mov r8, r8)
}
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000148 	.word	0x20000148
 80006a8:	20000145 	.word	0x20000145
 80006ac:	20000140 	.word	0x20000140

080006b0 <LED_GreenHandler>:

uint8_t greenLEDState = 0;
uint32_t greenLedTimer = 0;
void LED_GreenHandler (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0


	if(greenLEDState == 0)
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <LED_GreenHandler+0x5c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d024      	beq.n	8000706 <LED_GreenHandler+0x56>
	{
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
	}

	if(greenLEDState == 1)
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <LED_GreenHandler+0x5c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d114      	bne.n	80006ee <LED_GreenHandler+0x3e>
	{
		greenLedTimer++;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <LED_GreenHandler+0x60>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <LED_GreenHandler+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]

		if(greenLedTimer > TIME_LED_GREEN_BLINK)
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <LED_GreenHandler+0x60>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	23fa      	movs	r3, #250	@ 0xfa
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d909      	bls.n	80006ee <LED_GreenHandler+0x3e>
		{
			greenLedTimer = 0;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <LED_GreenHandler+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <LED_GreenHandler+0x64>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f7ff ffb0 	bl	800064e <LL_GPIO_TogglePin>
		}
	}

	if(greenLEDState == 2)
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <LED_GreenHandler+0x5c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d108      	bne.n	8000708 <LED_GreenHandler+0x58>
	{
		LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <LED_GreenHandler+0x64>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f7ff ff8d 	bl	800061e <LL_GPIO_SetOutputPin>
 8000704:	e000      	b.n	8000708 <LED_GreenHandler+0x58>
	  return; //	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000706:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000014c 	.word	0x2000014c
 8000710:	20000150 	.word	0x20000150
 8000714:	50000400 	.word	0x50000400

08000718 <HAL_UART_RxCpltCallback>:
int i = 0;
uint8_t power_state = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(rx_byte == 0x0D)
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <HAL_UART_RxCpltCallback+0xa0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b0d      	cmp	r3, #13
 8000726:	d132      	bne.n	800078e <HAL_UART_RxCpltCallback+0x76>
  {
	 for(i = 0; i < CMD_NUM; i++)
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e020      	b.n	8000772 <HAL_UART_RxCpltCallback+0x5a>
	 {
		 char *ptData = NULL;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
		 ptData = strstr((char*)&rx_buff[0], (char*)&cmd_list[i][0]);
 8000734:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	0013      	movs	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	189b      	adds	r3, r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <HAL_UART_RxCpltCallback+0xa8>)
 8000742:	189a      	adds	r2, r3, r2
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <HAL_UART_RxCpltCallback+0xac>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f003 fb11 	bl	8003d70 <strstr>
 800074e:	0003      	movs	r3, r0
 8000750:	60fb      	str	r3, [r7, #12]
		 if(ptData != NULL)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d007      	beq.n	8000768 <HAL_UART_RxCpltCallback+0x50>
		 {
			 get_cmd = i + 1;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <HAL_UART_RxCpltCallback+0xb0>)
 8000764:	701a      	strb	r2, [r3, #0]
			 break;
 8000766:	e008      	b.n	800077a <HAL_UART_RxCpltCallback+0x62>
	 for(i = 0; i < CMD_NUM; i++)
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <HAL_UART_RxCpltCallback+0xa4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	ddda      	ble.n	8000730 <HAL_UART_RxCpltCallback+0x18>
		char tempBuff[32] = {0};
		sprintf(tempBuff, "count:%d;", cnt_reboot);
		Send_RS485_Data(tempBuff);

	 }*/
	 memset((char*)&rx_buff[0], 0x00, sizeof(rx_buff));
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_UART_RxCpltCallback+0xac>)
 800077c:	22ff      	movs	r2, #255	@ 0xff
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f003 faed 	bl	8003d60 <memset>
	 rx_cnt = 0;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <HAL_UART_RxCpltCallback+0xb4>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e00a      	b.n	80007a4 <HAL_UART_RxCpltCallback+0x8c>
  }
  else
  {
	  rx_buff[rx_cnt++] = rx_byte;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <HAL_UART_RxCpltCallback+0xb4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	b2d1      	uxtb	r1, r2
 8000796:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <HAL_UART_RxCpltCallback+0xb4>)
 8000798:	7011      	strb	r1, [r2, #0]
 800079a:	001a      	movs	r2, r3
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_UART_RxCpltCallback+0xa0>)
 800079e:	7819      	ldrb	r1, [r3, #0]
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_UART_RxCpltCallback+0xac>)
 80007a2:	5499      	strb	r1, [r3, r2]
  }
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80007a4:	4904      	ldr	r1, [pc, #16]	@ (80007b8 <HAL_UART_RxCpltCallback+0xa0>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <HAL_UART_RxCpltCallback+0xb8>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fa96 	bl	8001cdc <HAL_UART_Receive_IT>
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000154 	.word	0x20000154
 80007bc:	20000260 	.word	0x20000260
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000158 	.word	0x20000158
 80007c8:	20000258 	.word	0x20000258
 80007cc:	20000257 	.word	0x20000257
 80007d0:	200000ac 	.word	0x200000ac

080007d4 <PowerOn>:

void PowerOn (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	greenLEDState = 2;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <PowerOn+0x3c>)
 80007da:	2202      	movs	r2, #2
 80007dc:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <PowerOn+0x40>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f7ff ff19 	bl	800061e <LL_GPIO_SetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <PowerOn+0x44>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fd9a 	bl	8001328 <HAL_Delay>
	LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <PowerOn+0x40>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f7ff ff0e 	bl	800061e <LL_GPIO_SetOutputPin>
	power_state = 1;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <PowerOn+0x48>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	2000014c 	.word	0x2000014c
 8000814:	50000400 	.word	0x50000400
 8000818:	00001388 	.word	0x00001388
 800081c:	20000264 	.word	0x20000264

08000820 <PowerOff>:

void PowerOff (void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	4a0c      	ldr	r2, [pc, #48]	@ (800085c <PowerOff+0x3c>)
 800082a:	0019      	movs	r1, r3
 800082c:	0010      	movs	r0, r2
 800082e:	f7ff ff02 	bl	8000636 <LL_GPIO_ResetOutputPin>
	HAL_Delay(TIME_PRECHARGE_OFF);
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <PowerOff+0x40>)
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fd77 	bl	8001328 <HAL_Delay>
	LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 800083a:	2380      	movs	r3, #128	@ 0x80
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4a07      	ldr	r2, [pc, #28]	@ (800085c <PowerOff+0x3c>)
 8000840:	0019      	movs	r1, r3
 8000842:	0010      	movs	r0, r2
 8000844:	f7ff fef7 	bl	8000636 <LL_GPIO_ResetOutputPin>
	greenLEDState = 1;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <PowerOff+0x44>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
	power_state = 0;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <PowerOff+0x48>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	50000400 	.word	0x50000400
 8000860:	00001388 	.word	0x00001388
 8000864:	2000014c 	.word	0x2000014c
 8000868:	20000264 	.word	0x20000264

0800086c <Send_RS485_Data>:

void Send_RS485_Data (char *buff)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(buff);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff fc42 	bl	8000100 <strlen>
 800087c:	0002      	movs	r2, r0
 800087e:	240f      	movs	r4, #15
 8000880:	193b      	adds	r3, r7, r4
 8000882:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000884:	23a0      	movs	r3, #160	@ 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2102      	movs	r1, #2
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fec7 	bl	800061e <LL_GPIO_SetOutputPin>
	HAL_Delay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 fd49 	bl	8001328 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, len *2);
 8000896:	0021      	movs	r1, r4
 8000898:	187b      	adds	r3, r7, r1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b29a      	uxth	r2, r3
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <Send_RS485_Data+0x5c>)
 80008a8:	f001 f974 	bl	8001b94 <HAL_UART_Transmit>
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fd3b 	bl	8001328 <HAL_Delay>
	LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 80008b2:	23a0      	movs	r3, #160	@ 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	2102      	movs	r1, #2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff febc 	bl	8000636 <LL_GPIO_ResetOutputPin>
}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b005      	add	sp, #20
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	200000ac 	.word	0x200000ac

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fca3 	bl	800121c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 80008d6:	23fa      	movs	r3, #250	@ 0xfa
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fd24 	bl	8001328 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f9cc 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 fa5c 	bl	8000da0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 fa0c 	bl	8000d04 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80008ec:	49c8      	ldr	r1, [pc, #800]	@ (8000c10 <main+0x344>)
 80008ee:	4bc9      	ldr	r3, [pc, #804]	@ (8000c14 <main+0x348>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 f9f2 	bl	8001cdc <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */
  uint8_t cnt400V[2] = {0};
 80008f8:	2324      	movs	r3, #36	@ 0x24
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
  while(1)
  {
	  if(LL_GPIO_IsInputPinSet(CMP_400V_GPIO_Port,CMP_400V_Pin))
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	015b      	lsls	r3, r3, #5
 8000904:	4ac4      	ldr	r2, [pc, #784]	@ (8000c18 <main+0x34c>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f7ff fe75 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d00a      	beq.n	8000928 <main+0x5c>
	  {
		  cnt400V[0]++;
 8000912:	2124      	movs	r1, #36	@ 0x24
 8000914:	187b      	adds	r3, r7, r1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	187b      	adds	r3, r7, r1
 800091e:	701a      	strb	r2, [r3, #0]
		  cnt400V[1]=0;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	705a      	strb	r2, [r3, #1]
 8000926:	e009      	b.n	800093c <main+0x70>
	  }
	  else
	  {
		  cnt400V[1]++;
 8000928:	2124      	movs	r1, #36	@ 0x24
 800092a:	187b      	adds	r3, r7, r1
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	3301      	adds	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	187b      	adds	r3, r7, r1
 8000934:	705a      	strb	r2, [r3, #1]
		  cnt400V[0]=0;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(33);
 800093c:	2021      	movs	r0, #33	@ 0x21
 800093e:	f000 fcf3 	bl	8001328 <HAL_Delay>

	  if(cnt400V[1] >= COUNT_400V_PULL)
 8000942:	2324      	movs	r3, #36	@ 0x24
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d90c      	bls.n	8000966 <main+0x9a>
	  {
	       LL_GPIO_SetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	019b      	lsls	r3, r3, #6
 8000950:	4ab1      	ldr	r2, [pc, #708]	@ (8000c18 <main+0x34c>)
 8000952:	0019      	movs	r1, r3
 8000954:	0010      	movs	r0, r2
 8000956:	f7ff fe62 	bl	800061e <LL_GPIO_SetOutputPin>
           LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800095a:	4baf      	ldr	r3, [pc, #700]	@ (8000c18 <main+0x34c>)
 800095c:	2180      	movs	r1, #128	@ 0x80
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fe5d 	bl	800061e <LL_GPIO_SetOutputPin>
		  break;
 8000964:	e012      	b.n	800098c <main+0xc0>
	  }
	  else if(cnt400V[0] >= COUNT_400V_PULL)
 8000966:	2324      	movs	r3, #36	@ 0x24
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d9c7      	bls.n	8000900 <main+0x34>
	  {
		  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	019b      	lsls	r3, r3, #6
 8000974:	4aa8      	ldr	r2, [pc, #672]	@ (8000c18 <main+0x34c>)
 8000976:	0019      	movs	r1, r3
 8000978:	0010      	movs	r0, r2
 800097a:	f7ff fe5c 	bl	8000636 <LL_GPIO_ResetOutputPin>
		  LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800097e:	2380      	movs	r3, #128	@ 0x80
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4aa5      	ldr	r2, [pc, #660]	@ (8000c18 <main+0x34c>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f7ff fe49 	bl	800061e <LL_GPIO_SetOutputPin>
		  break;
	  }

  }
  //LL_GPIO_SetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
  HAL_Delay(2000);
 800098c:	23fa      	movs	r3, #250	@ 0xfa
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fcc9 	bl	8001328 <HAL_Delay>
  //LL_GPIO_SetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
  greenLEDState = 1;
 8000996:	4ba1      	ldr	r3, [pc, #644]	@ (8000c1c <main+0x350>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800099c:	4b9e      	ldr	r3, [pc, #632]	@ (8000c18 <main+0x34c>)
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff fe48 	bl	8000636 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4a9b      	ldr	r2, [pc, #620]	@ (8000c18 <main+0x34c>)
 80009ac:	0019      	movs	r1, r3
 80009ae:	0010      	movs	r0, r2
 80009b0:	f7ff fe41 	bl	8000636 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4a97      	ldr	r2, [pc, #604]	@ (8000c18 <main+0x34c>)
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f7ff fe3a 	bl	8000636 <LL_GPIO_ResetOutputPin>
  counterSwitch = 0;
 80009c2:	4b97      	ldr	r3, [pc, #604]	@ (8000c20 <main+0x354>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	019b      	lsls	r3, r3, #6
 80009cc:	4a95      	ldr	r2, [pc, #596]	@ (8000c24 <main+0x358>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f7ff fe11 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d15b      	bne.n	8000a92 <main+0x1c6>
	{
		if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 80009da:	4b8f      	ldr	r3, [pc, #572]	@ (8000c18 <main+0x34c>)
 80009dc:	2104      	movs	r1, #4
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fe0a 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d133      	bne.n	8000a50 <main+0x184>
		{
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 80009e8:	e012      	b.n	8000a10 <main+0x144>
		   {
			  LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 80009ea:	4b8b      	ldr	r3, [pc, #556]	@ (8000c18 <main+0x34c>)
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff fe15 	bl	800061e <LL_GPIO_SetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4a87      	ldr	r2, [pc, #540]	@ (8000c18 <main+0x34c>)
 80009fa:	0019      	movs	r1, r3
 80009fc:	0010      	movs	r0, r2
 80009fe:	f7ff fe1a 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4a84      	ldr	r2, [pc, #528]	@ (8000c18 <main+0x34c>)
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	f7ff fe13 	bl	8000636 <LL_GPIO_ResetOutputPin>
		   while(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port,RD_EN_Pin) == 0)
 8000a10:	4b81      	ldr	r3, [pc, #516]	@ (8000c18 <main+0x34c>)
 8000a12:	2104      	movs	r1, #4
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fdef 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d0e5      	beq.n	80009ea <main+0x11e>
		   }

			  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a1e:	4b7e      	ldr	r3, [pc, #504]	@ (8000c18 <main+0x34c>)
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fe07 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4a7a      	ldr	r2, [pc, #488]	@ (8000c18 <main+0x34c>)
 8000a2e:	0019      	movs	r1, r3
 8000a30:	0010      	movs	r0, r2
 8000a32:	f7ff fe00 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000a36:	2380      	movs	r3, #128	@ 0x80
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4a77      	ldr	r2, [pc, #476]	@ (8000c18 <main+0x34c>)
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0010      	movs	r0, r2
 8000a40:	f7ff fdf9 	bl	8000636 <LL_GPIO_ResetOutputPin>
			  counterSwitch = 0;
 8000a44:	4b76      	ldr	r3, [pc, #472]	@ (8000c20 <main+0x354>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
			  leaveSwitch   = 0;
 8000a4a:	4b77      	ldr	r3, [pc, #476]	@ (8000c28 <main+0x35c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

		}

		if( (counterSwitch > TIME_SWITCH_PRESSHED)&&(leaveSwitch == 0) )
 8000a50:	4b73      	ldr	r3, [pc, #460]	@ (8000c20 <main+0x354>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	23fa      	movs	r3, #250	@ 0xfa
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d920      	bls.n	8000a9e <main+0x1d2>
 8000a5c:	4b72      	ldr	r3, [pc, #456]	@ (8000c28 <main+0x35c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11c      	bne.n	8000a9e <main+0x1d2>
		{
			stateSwitch ^= 1;
 8000a64:	4b71      	ldr	r3, [pc, #452]	@ (8000c2c <main+0x360>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4053      	eors	r3, r2
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c2c <main+0x360>)
 8000a70:	701a      	strb	r2, [r3, #0]

			if(stateSwitch)
 8000a72:	4b6e      	ldr	r3, [pc, #440]	@ (8000c2c <main+0x360>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <main+0x1b4>
			{
				PowerOn ();
 8000a7a:	f7ff feab 	bl	80007d4 <PowerOn>
 8000a7e:	e004      	b.n	8000a8a <main+0x1be>

				//HAL_Delay(CYCLES_TIME_ON  * 1000);
			}
			else
			{
				cnt_reboot = 0;
 8000a80:	4b6b      	ldr	r3, [pc, #428]	@ (8000c30 <main+0x364>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
				PowerOff ();
 8000a86:	f7ff fecb 	bl	8000820 <PowerOff>

				//HAL_Delay(CYCLES_TIME_OFF  * 1000);
			}
			leaveSwitch = 1;
 8000a8a:	4b67      	ldr	r3, [pc, #412]	@ (8000c28 <main+0x35c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e005      	b.n	8000a9e <main+0x1d2>
		 }
	  }
	  else
	  {
		counterSwitch = 0;
 8000a92:	4b63      	ldr	r3, [pc, #396]	@ (8000c20 <main+0x354>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
		leaveSwitch   = 0;
 8000a98:	4b63      	ldr	r3, [pc, #396]	@ (8000c28 <main+0x35c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	  }

	if(get_cmd)
 8000a9e:	4b65      	ldr	r3, [pc, #404]	@ (8000c34 <main+0x368>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d100      	bne.n	8000aa8 <main+0x1dc>
 8000aa6:	e083      	b.n	8000bb0 <main+0x2e4>
	{
		switch(get_cmd)
 8000aa8:	4b62      	ldr	r3, [pc, #392]	@ (8000c34 <main+0x368>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b05      	cmp	r3, #5
 8000aae:	d900      	bls.n	8000ab2 <main+0x1e6>
 8000ab0:	e07b      	b.n	8000baa <main+0x2de>
 8000ab2:	009a      	lsls	r2, r3, #2
 8000ab4:	4b60      	ldr	r3, [pc, #384]	@ (8000c38 <main+0x36c>)
 8000ab6:	18d3      	adds	r3, r2, r3
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	469f      	mov	pc, r3
		{

			case 1:
				if(power_state)
 8000abc:	4b5f      	ldr	r3, [pc, #380]	@ (8000c3c <main+0x370>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d016      	beq.n	8000af2 <main+0x226>
				{
					if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000ac4:	4b54      	ldr	r3, [pc, #336]	@ (8000c18 <main+0x34c>)
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff fd95 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d104      	bne.n	8000adc <main+0x210>
					{
						Send_RS485_Data("power_off:-1;");
 8000ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8000c40 <main+0x374>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fec9 	bl	800086c <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("power_off:1;");
				}
			break;
 8000ada:	e066      	b.n	8000baa <main+0x2de>
						Send_RS485_Data("power_off:0;");
 8000adc:	4b59      	ldr	r3, [pc, #356]	@ (8000c44 <main+0x378>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fec4 	bl	800086c <Send_RS485_Data>
						HAL_Delay(30000);
 8000ae4:	4b58      	ldr	r3, [pc, #352]	@ (8000c48 <main+0x37c>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fc1e 	bl	8001328 <HAL_Delay>
						PowerOff ();
 8000aec:	f7ff fe98 	bl	8000820 <PowerOff>
			break;
 8000af0:	e05b      	b.n	8000baa <main+0x2de>
					Send_RS485_Data("power_off:1;");
 8000af2:	4b56      	ldr	r3, [pc, #344]	@ (8000c4c <main+0x380>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff feb9 	bl	800086c <Send_RS485_Data>
			break;
 8000afa:	e056      	b.n	8000baa <main+0x2de>
			case 2:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000afc:	4b46      	ldr	r3, [pc, #280]	@ (8000c18 <main+0x34c>)
 8000afe:	2104      	movs	r1, #4
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fd79 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d104      	bne.n	8000b14 <main+0x248>
				{
					Send_RS485_Data("bus:1;");
 8000b0a:	4b51      	ldr	r3, [pc, #324]	@ (8000c50 <main+0x384>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fead 	bl	800086c <Send_RS485_Data>
				}
				else
				{
					Send_RS485_Data("bus:0;");
				}
			break;
 8000b12:	e04a      	b.n	8000baa <main+0x2de>
					Send_RS485_Data("bus:0;");
 8000b14:	4b4f      	ldr	r3, [pc, #316]	@ (8000c54 <main+0x388>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fea8 	bl	800086c <Send_RS485_Data>
			break;
 8000b1c:	e045      	b.n	8000baa <main+0x2de>
			case 3:
				if(LL_GPIO_IsInputPinSet(RD_EN_GPIO_Port, RD_EN_Pin) == 0)
 8000b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c18 <main+0x34c>)
 8000b20:	2104      	movs	r1, #4
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fd68 	bl	80005f8 <LL_GPIO_IsInputPinSet>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d104      	bne.n	8000b36 <main+0x26a>
				{
					Send_RS485_Data("reboot:-1;");
 8000b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c58 <main+0x38c>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fe9c 	bl	800086c <Send_RS485_Data>
						reboot_time = HAL_GetTick();
						cnt_reboot ++;
						Send_RS485_Data("reboot:1;");
					}
				}
			break;
 8000b34:	e039      	b.n	8000baa <main+0x2de>
					if(reboot_flag)
 8000b36:	4b49      	ldr	r3, [pc, #292]	@ (8000c5c <main+0x390>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d004      	beq.n	8000b48 <main+0x27c>
					    Send_RS485_Data("reboot:2;");
 8000b3e:	4b48      	ldr	r3, [pc, #288]	@ (8000c60 <main+0x394>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fe93 	bl	800086c <Send_RS485_Data>
			break;
 8000b46:	e030      	b.n	8000baa <main+0x2de>
						reboot_flag = 1;
 8000b48:	4b44      	ldr	r3, [pc, #272]	@ (8000c5c <main+0x390>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
						reboot_state_off = 1;
 8000b4e:	4b45      	ldr	r3, [pc, #276]	@ (8000c64 <main+0x398>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
						reboot_time = HAL_GetTick();
 8000b54:	f000 fbde 	bl	8001314 <HAL_GetTick>
 8000b58:	0002      	movs	r2, r0
 8000b5a:	4b43      	ldr	r3, [pc, #268]	@ (8000c68 <main+0x39c>)
 8000b5c:	601a      	str	r2, [r3, #0]
						cnt_reboot ++;
 8000b5e:	4b34      	ldr	r3, [pc, #208]	@ (8000c30 <main+0x364>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	4b32      	ldr	r3, [pc, #200]	@ (8000c30 <main+0x364>)
 8000b66:	601a      	str	r2, [r3, #0]
						Send_RS485_Data("reboot:1;");
 8000b68:	4b40      	ldr	r3, [pc, #256]	@ (8000c6c <main+0x3a0>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fe7e 	bl	800086c <Send_RS485_Data>
			break;
 8000b70:	e01b      	b.n	8000baa <main+0x2de>
			case 4:
				Send_RS485_Data("power_on:1;");
 8000b72:	4b3f      	ldr	r3, [pc, #252]	@ (8000c70 <main+0x3a4>)
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff fe79 	bl	800086c <Send_RS485_Data>
				PowerOn ();
 8000b7a:	f7ff fe2b 	bl	80007d4 <PowerOn>
			break;
 8000b7e:	e014      	b.n	8000baa <main+0x2de>
			case 5:
				char tempBuff[32] = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	3304      	adds	r3, #4
 8000b88:	221c      	movs	r2, #28
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f003 f8e7 	bl	8003d60 <memset>
				sprintf(tempBuff, "count:%d;", cnt_reboot);
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <main+0x364>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4937      	ldr	r1, [pc, #220]	@ (8000c74 <main+0x3a8>)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f003 f8c0 	bl	8003d20 <siprintf>
				Send_RS485_Data(tempBuff);
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fe62 	bl	800086c <Send_RS485_Data>
			break;
 8000ba8:	46c0      	nop			@ (mov r8, r8)

		}
		get_cmd = 0;
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <main+0x368>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
     }

	if(reboot_flag)
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <main+0x390>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d100      	bne.n	8000bba <main+0x2ee>
 8000bb8:	e706      	b.n	80009c8 <main+0xfc>
	{
	   if(reboot_state_off)
 8000bba:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <main+0x398>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d015      	beq.n	8000bee <main+0x322>
	   {
		   if(HAL_GetTick() > reboot_time + TIME_POWER_OFF)
 8000bc2:	f000 fba7 	bl	8001314 <HAL_GetTick>
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <main+0x39c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	491e      	ldr	r1, [pc, #120]	@ (8000c48 <main+0x37c>)
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4463      	add	r3, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d800      	bhi.n	8000bd8 <main+0x30c>
 8000bd6:	e6f7      	b.n	80009c8 <main+0xfc>
		   {
			   reboot_state_off = 0;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <main+0x398>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			   PowerOff ();
 8000bde:	f7ff fe1f 	bl	8000820 <PowerOff>
			   reboot_time = HAL_GetTick();
 8000be2:	f000 fb97 	bl	8001314 <HAL_GetTick>
 8000be6:	0002      	movs	r2, r0
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <main+0x39c>)
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e6ec      	b.n	80009c8 <main+0xfc>
		   }
	   }
	   else
	   {
		   if(HAL_GetTick() > reboot_time + TIME_POWER_ON)
 8000bee:	f000 fb91 	bl	8001314 <HAL_GetTick>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <main+0x39c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	491f      	ldr	r1, [pc, #124]	@ (8000c78 <main+0x3ac>)
 8000bfa:	468c      	mov	ip, r1
 8000bfc:	4463      	add	r3, ip
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d800      	bhi.n	8000c04 <main+0x338>
 8000c02:	e6e1      	b.n	80009c8 <main+0xfc>
		   {
			   PowerOn ();
 8000c04:	f7ff fde6 	bl	80007d4 <PowerOn>
			   reboot_flag = 0;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <main+0x390>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	if(LL_GPIO_IsInputPinSet(SWITCH_GPIO_Port,SWITCH_Pin) == 0)
 8000c0e:	e6db      	b.n	80009c8 <main+0xfc>
 8000c10:	20000154 	.word	0x20000154
 8000c14:	200000ac 	.word	0x200000ac
 8000c18:	50000400 	.word	0x50000400
 8000c1c:	2000014c 	.word	0x2000014c
 8000c20:	20000140 	.word	0x20000140
 8000c24:	50000800 	.word	0x50000800
 8000c28:	20000145 	.word	0x20000145
 8000c2c:	20000144 	.word	0x20000144
 8000c30:	2000025c 	.word	0x2000025c
 8000c34:	20000258 	.word	0x20000258
 8000c38:	0800471c 	.word	0x0800471c
 8000c3c:	20000264 	.word	0x20000264
 8000c40:	080046a0 	.word	0x080046a0
 8000c44:	080046b0 	.word	0x080046b0
 8000c48:	00007530 	.word	0x00007530
 8000c4c:	080046c0 	.word	0x080046c0
 8000c50:	080046d0 	.word	0x080046d0
 8000c54:	080046d8 	.word	0x080046d8
 8000c58:	080046e0 	.word	0x080046e0
 8000c5c:	20000265 	.word	0x20000265
 8000c60:	080046ec 	.word	0x080046ec
 8000c64:	20000266 	.word	0x20000266
 8000c68:	20000268 	.word	0x20000268
 8000c6c:	080046f8 	.word	0x080046f8
 8000c70:	08004704 	.word	0x08004704
 8000c74:	08004710 	.word	0x08004710
 8000c78:	00002710 	.word	0x00002710

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff fc99 	bl	80005b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	f7ff fcaa 	bl	80005e0 <LL_FLASH_GetLatency>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d1fa      	bne.n	8000c88 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000c92:	f7ff fbbd 	bl	8000410 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	f7ff fbc8 	bl	800042c <LL_RCC_HSI_IsReady>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d1fa      	bne.n	8000c98 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	059b      	lsls	r3, r3, #22
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2002      	movs	r0, #2
 8000cac:	f7ff fc40 	bl	8000530 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cb0:	f7ff fc1c 	bl	80004ec <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000cb4:	f7ff fc5c 	bl	8000570 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	f7ff fc25 	bl	8000508 <LL_RCC_PLL_IsReady>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d1fa      	bne.n	8000cba <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fbe5 	bl	8000494 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff fbc2 	bl	8000454 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	f7ff fbd3 	bl	800047c <LL_RCC_GetSysClkSource>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	2b10      	cmp	r3, #16
 8000cda:	d1fa      	bne.n	8000cd2 <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fbef 	bl	80004c0 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <SystemClock_Config+0x84>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f003 f80d 	bl	8003d04 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	2003      	movs	r0, #3
 8000cec:	f000 fab6 	bl	800125c <HAL_InitTick>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cf4:	f000 f968 	bl	8000fc8 <Error_Handler>
  }
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	03d09000 	.word	0x03d09000

08000d04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d0a:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <MX_USART2_UART_Init+0x98>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0e:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d10:	22e1      	movs	r2, #225	@ 0xe1
 8000d12:	0252      	lsls	r2, r2, #9
 8000d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d40:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 feca 	bl	8001ae8 <HAL_UART_Init>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d58:	f000 f936 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 fddb 	bl	800391c <HAL_UARTEx_SetTxFifoThreshold>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6a:	f000 f92d 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 fe12 	bl	800399c <HAL_UARTEx_SetRxFifoThreshold>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 f924 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <MX_USART2_UART_Init+0x94>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f002 fd90 	bl	80038a8 <HAL_UARTEx_DisableFifoMode>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f91c 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	200000ac 	.word	0x200000ac
 8000d9c:	40004400 	.word	0x40004400

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	003b      	movs	r3, r7
 8000da8:	0018      	movs	r0, r3
 8000daa:	2318      	movs	r3, #24
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f002 ffd6 	bl	8003d60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000db4:	2004      	movs	r0, #4
 8000db6:	f7ff fbe9 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000dba:	2020      	movs	r0, #32
 8000dbc:	f7ff fbe6 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fbe3 	bl	800058c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff fbe0 	bl	800058c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DE2_GPIO_Port, DE2_Pin);
 8000dcc:	23a0      	movs	r3, #160	@ 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f7ff fc2f 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PRECHRG_GPIO_Port, PRECHRG_Pin);
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	4a78      	ldr	r2, [pc, #480]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000dde:	0019      	movs	r1, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f7ff fc28 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MAINS_REL_GPIO_Port, MAINS_REL_Pin);
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	4a75      	ldr	r2, [pc, #468]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000dec:	0019      	movs	r1, r3
 8000dee:	0010      	movs	r0, r2
 8000df0:	f7ff fc21 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SET_SERIAL_GPIO_Port, SET_SERIAL_Pin);
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	019b      	lsls	r3, r3, #6
 8000df8:	4a71      	ldr	r2, [pc, #452]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	0010      	movs	r0, r2
 8000dfe:	f7ff fc1a 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000e02:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fc15 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4a6b      	ldr	r2, [pc, #428]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000e12:	0019      	movs	r1, r3
 8000e14:	0010      	movs	r0, r2
 8000e16:	f7ff fc0e 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4a68      	ldr	r2, [pc, #416]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000e20:	0019      	movs	r1, r3
 8000e22:	0010      	movs	r0, r2
 8000e24:	f7ff fc07 	bl	8000636 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000e28:	003b      	movs	r3, r7
 8000e2a:	2280      	movs	r2, #128	@ 0x80
 8000e2c:	0192      	lsls	r2, r2, #6
 8000e2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2202      	movs	r2, #2
 8000e3a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	4a61      	ldr	r2, [pc, #388]	@ (8000fc4 <MX_GPIO_Init+0x224>)
 8000e40:	0019      	movs	r1, r3
 8000e42:	0010      	movs	r0, r2
 8000e44:	f002 ff03 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DE2_Pin;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2201      	movs	r2, #1
 8000e52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e60:	003b      	movs	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DE2_GPIO_Port, &GPIO_InitStruct);
 8000e66:	003a      	movs	r2, r7
 8000e68:	23a0      	movs	r3, #160	@ 0xa0
 8000e6a:	05db      	lsls	r3, r3, #23
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 feed 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RD_EN_Pin;
 8000e74:	003b      	movs	r3, r7
 8000e76:	2204      	movs	r2, #4
 8000e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2201      	movs	r2, #1
 8000e84:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RD_EN_GPIO_Port, &GPIO_InitStruct);
 8000e86:	003b      	movs	r3, r7
 8000e88:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	f002 fede 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PRECHRG_Pin;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	00d2      	lsls	r2, r2, #3
 8000e98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eac:	003b      	movs	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(PRECHRG_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	4a42      	ldr	r2, [pc, #264]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	0010      	movs	r0, r2
 8000eba:	f002 fec8 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MAINS_REL_Pin;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2201      	movs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MAINS_REL_GPIO_Port, &GPIO_InitStruct);
 8000ede:	003b      	movs	r3, r7
 8000ee0:	4a37      	ldr	r2, [pc, #220]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	f002 feb2 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CMP_400V_Pin;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2280      	movs	r2, #128	@ 0x80
 8000eee:	0152      	lsls	r2, r2, #5
 8000ef0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ef8:	003b      	movs	r3, r7
 8000efa:	2202      	movs	r2, #2
 8000efc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CMP_400V_GPIO_Port, &GPIO_InitStruct);
 8000efe:	003b      	movs	r3, r7
 8000f00:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000f02:	0019      	movs	r1, r3
 8000f04:	0010      	movs	r0, r2
 8000f06:	f002 fea2 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SET_SERIAL_Pin;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	0192      	lsls	r2, r2, #6
 8000f10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2201      	movs	r2, #1
 8000f16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f18:	003b      	movs	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f1e:	003b      	movs	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f24:	003b      	movs	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SET_SERIAL_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	4a24      	ldr	r2, [pc, #144]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000f2e:	0019      	movs	r1, r3
 8000f30:	0010      	movs	r0, r2
 8000f32:	f002 fe8c 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2201      	movs	r2, #1
 8000f40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000f54:	003b      	movs	r3, r7
 8000f56:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000f58:	0019      	movs	r1, r3
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	f002 fe77 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000f60:	003b      	movs	r3, r7
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000f80:	003b      	movs	r3, r7
 8000f82:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000f84:	0019      	movs	r1, r3
 8000f86:	0010      	movs	r0, r2
 8000f88:	f002 fe61 	bl	8003c4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2201      	movs	r2, #1
 8000f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000fac:	003b      	movs	r3, r7
 8000fae:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <MX_GPIO_Init+0x220>)
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	0010      	movs	r0, r2
 8000fb4:	f002 fe4b 	bl	8003c4e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b006      	add	sp, #24
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	50000400 	.word	0x50000400
 8000fc4:	50000800 	.word	0x50000800

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	e7fd      	b.n	8000fd0 <Error_Handler+0x8>

08000fd4 <LL_RCC_SetUSARTClockSource>:
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	0c12      	lsrs	r2, r2, #16
 8000fe4:	43d2      	mvns	r2, r2
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	0011      	movs	r1, r2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	0c1a      	lsrs	r2, r3, #16
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <HAL_MspInit+0x44>)
 800100c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_MspInit+0x44>)
 8001010:	2101      	movs	r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	641a      	str	r2, [r3, #64]	@ 0x40
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <HAL_MspInit+0x44>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	2201      	movs	r2, #1
 800101c:	4013      	ands	r3, r2
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_MspInit+0x44>)
 8001024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_MspInit+0x44>)
 8001028:	2180      	movs	r1, #128	@ 0x80
 800102a:	0549      	lsls	r1, r1, #21
 800102c:	430a      	orrs	r2, r1
 800102e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_MspInit+0x44>)
 8001032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	055b      	lsls	r3, r3, #21
 8001038:	4013      	ands	r3, r2
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b08b      	sub	sp, #44	@ 0x2c
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	2414      	movs	r4, #20
 8001056:	193b      	adds	r3, r7, r4
 8001058:	0018      	movs	r0, r3
 800105a:	2314      	movs	r3, #20
 800105c:	001a      	movs	r2, r3
 800105e:	2100      	movs	r1, #0
 8001060:	f002 fe7e 	bl	8003d60 <memset>
  if(huart->Instance==USART2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_UART_MspInit+0xa8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d13d      	bne.n	80010ea <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800106e:	23c0      	movs	r3, #192	@ 0xc0
 8001070:	031b      	lsls	r3, r3, #12
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ffae 	bl	8000fd4 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <HAL_UART_MspInit+0xac>)
 800107a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <HAL_UART_MspInit+0xac>)
 800107e:	2180      	movs	r1, #128	@ 0x80
 8001080:	0289      	lsls	r1, r1, #10
 8001082:	430a      	orrs	r2, r1
 8001084:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <HAL_UART_MspInit+0xac>)
 8001088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800108a:	2380      	movs	r3, #128	@ 0x80
 800108c:	029b      	lsls	r3, r3, #10
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_UART_MspInit+0xac>)
 8001096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_UART_MspInit+0xac>)
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_UART_MspInit+0xac>)
 80010a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ac:	0021      	movs	r1, r4
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	220c      	movs	r2, #12
 80010b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2202      	movs	r2, #2
 80010b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2201      	movs	r2, #1
 80010ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	187a      	adds	r2, r7, r1
 80010ce:	23a0      	movs	r3, #160	@ 0xa0
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 faf5 	bl	80016c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	201c      	movs	r0, #28
 80010e0:	f000 f9f2 	bl	80014c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e4:	201c      	movs	r0, #28
 80010e6:	f000 fa04 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b00b      	add	sp, #44	@ 0x2c
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	40004400 	.word	0x40004400
 80010f8:	40021000 	.word	0x40021000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	46c0      	nop			@ (mov r8, r8)
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  LED_GreenHandler ();
 8001124:	f7ff fac4 	bl	80006b0 <LED_GreenHandler>
  SwitchTimingHandlar();
 8001128:	f7ff faa8 	bl	800067c <SwitchTimingHandlar>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f8e0 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <USART2_IRQHandler+0x14>)
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fe24 	bl	8001d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	200000ac 	.word	0x200000ac

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f002 fe0c 	bl	8003d9c <__errno>
 8001184:	0003      	movs	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	2301      	movs	r3, #1
 800118c:	425b      	negs	r3, r3
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	18d2      	adds	r2, r2, r3
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <_sbrk+0x64>)
 80011a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b006      	add	sp, #24
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20009000 	.word	0x20009000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	2000026c 	.word	0x2000026c
 80011b8:	200003c0 	.word	0x200003c0

080011bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c8:	480d      	ldr	r0, [pc, #52]	@ (8001200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011cc:	f7ff fff6 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	@ (8001208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <LoopForever+0xe>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001214 <LoopForever+0x16>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011f6:	f002 fdd7 	bl	8003da8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011fa:	f7ff fb67 	bl	80008cc <main>

080011fe <LoopForever>:

LoopForever:
  b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   r0, =_estack
 8001200:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800120c:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 8001210:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001214:	200003bc 	.word	0x200003bc

08001218 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_IRQHandler>
	...

0800121c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <HAL_Init+0x3c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Init+0x3c>)
 800122e:	2180      	movs	r1, #128	@ 0x80
 8001230:	0049      	lsls	r1, r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001236:	2003      	movs	r0, #3
 8001238:	f000 f810 	bl	800125c <HAL_InitTick>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d003      	beq.n	8001248 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e001      	b.n	800124c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff fedc 	bl	8001004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40022000 	.word	0x40022000

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <HAL_InitTick+0x88>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d02b      	beq.n	80012cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <HAL_InitTick+0x8c>)
 8001276:	681c      	ldr	r4, [r3, #0]
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_InitTick+0x88>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	0019      	movs	r1, r3
 800127e:	23fa      	movs	r3, #250	@ 0xfa
 8001280:	0098      	lsls	r0, r3, #2
 8001282:	f7fe ff4f 	bl	8000124 <__udivsi3>
 8001286:	0003      	movs	r3, r0
 8001288:	0019      	movs	r1, r3
 800128a:	0020      	movs	r0, r4
 800128c:	f7fe ff4a 	bl	8000124 <__udivsi3>
 8001290:	0003      	movs	r3, r0
 8001292:	0018      	movs	r0, r3
 8001294:	f000 f93d 	bl	8001512 <HAL_SYSTICK_Config>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d112      	bne.n	80012c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d80a      	bhi.n	80012b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	2301      	movs	r3, #1
 80012a6:	425b      	negs	r3, r3
 80012a8:	2200      	movs	r2, #0
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 f90c 	bl	80014c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HAL_InitTick+0x90>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e00d      	b.n	80012d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e008      	b.n	80012d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c2:	230f      	movs	r3, #15
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e003      	b.n	80012d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012cc:	230f      	movs	r3, #15
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b005      	add	sp, #20
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	2000003c 	.word	0x2000003c
 80012e8:	20000034 	.word	0x20000034
 80012ec:	20000038 	.word	0x20000038

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	001a      	movs	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	18d2      	adds	r2, r2, r3
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_IncTick+0x20>)
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	2000003c 	.word	0x2000003c
 8001310:	20000270 	.word	0x20000270

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	@ (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	20000270 	.word	0x20000270

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fff0 	bl	8001314 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	001a      	movs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	189b      	adds	r3, r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	f7ff ffe0 	bl	8001314 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	2000003c 	.word	0x2000003c

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	0002      	movs	r2, r0
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b7f      	cmp	r3, #127	@ 0x7f
 8001382:	d809      	bhi.n	8001398 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	001a      	movs	r2, r3
 800138a:	231f      	movs	r3, #31
 800138c:	401a      	ands	r2, r3
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_EnableIRQ+0x30>)
 8001390:	2101      	movs	r1, #1
 8001392:	4091      	lsls	r1, r2
 8001394:	000a      	movs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001398:	46c0      	nop			@ (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80013b8:	d828      	bhi.n	800140c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001478 <__NVIC_SetPriority+0xd4>)
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	33c0      	adds	r3, #192	@ 0xc0
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	589b      	ldr	r3, [r3, r2]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	0011      	movs	r1, r2
 80013d0:	2203      	movs	r2, #3
 80013d2:	400a      	ands	r2, r1
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	21ff      	movs	r1, #255	@ 0xff
 80013d8:	4091      	lsls	r1, r2
 80013da:	000a      	movs	r2, r1
 80013dc:	43d2      	mvns	r2, r2
 80013de:	401a      	ands	r2, r3
 80013e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	22ff      	movs	r2, #255	@ 0xff
 80013e8:	401a      	ands	r2, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	2303      	movs	r3, #3
 80013f2:	4003      	ands	r3, r0
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	481f      	ldr	r0, [pc, #124]	@ (8001478 <__NVIC_SetPriority+0xd4>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	430a      	orrs	r2, r1
 8001404:	33c0      	adds	r3, #192	@ 0xc0
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140a:	e031      	b.n	8001470 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <__NVIC_SetPriority+0xd8>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0019      	movs	r1, r3
 8001414:	230f      	movs	r3, #15
 8001416:	400b      	ands	r3, r1
 8001418:	3b08      	subs	r3, #8
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3306      	adds	r3, #6
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	3304      	adds	r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1dfa      	adds	r2, r7, #7
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	0011      	movs	r1, r2
 800142c:	2203      	movs	r2, #3
 800142e:	400a      	ands	r2, r1
 8001430:	00d2      	lsls	r2, r2, #3
 8001432:	21ff      	movs	r1, #255	@ 0xff
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	43d2      	mvns	r2, r2
 800143a:	401a      	ands	r2, r3
 800143c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	22ff      	movs	r2, #255	@ 0xff
 8001444:	401a      	ands	r2, r3
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	2303      	movs	r3, #3
 800144e:	4003      	ands	r3, r0
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <__NVIC_SetPriority+0xd8>)
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	001c      	movs	r4, r3
 800145c:	230f      	movs	r3, #15
 800145e:	4023      	ands	r3, r4
 8001460:	3b08      	subs	r3, #8
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	430a      	orrs	r2, r1
 8001466:	3306      	adds	r3, #6
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	18c3      	adds	r3, r0, r3
 800146c:	3304      	adds	r3, #4
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b003      	add	sp, #12
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1e5a      	subs	r2, r3, #1
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	045b      	lsls	r3, r3, #17
 8001490:	429a      	cmp	r2, r3
 8001492:	d301      	bcc.n	8001498 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001494:	2301      	movs	r3, #1
 8001496:	e010      	b.n	80014ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <SysTick_Config+0x44>)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	3a01      	subs	r2, #1
 800149e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a0:	2301      	movs	r3, #1
 80014a2:	425b      	negs	r3, r3
 80014a4:	2103      	movs	r1, #3
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff ff7c 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <SysTick_Config+0x44>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <SysTick_Config+0x44>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	210f      	movs	r1, #15
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	0002      	movs	r2, r0
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	0018      	movs	r0, r3
 8001506:	f7ff ff33 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff ffaf 	bl	8001480 <SysTick_Config>
 8001522:	0003      	movs	r3, r0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e050      	b.n	80015e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2225      	movs	r2, #37	@ 0x25
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d008      	beq.n	800155c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2224      	movs	r2, #36	@ 0x24
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e041      	b.n	80015e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	210e      	movs	r1, #14
 8001568:	438a      	bics	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	491c      	ldr	r1, [pc, #112]	@ (80015e8 <HAL_DMA_Abort+0xbc>)
 8001578:	400a      	ands	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_DMA_Abort+0xc0>)
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	221c      	movs	r2, #28
 8001596:	4013      	ands	r3, r2
 8001598:	2201      	movs	r2, #1
 800159a:	409a      	lsls	r2, r3
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_DMA_Abort+0xc0>)
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015be:	490a      	ldr	r1, [pc, #40]	@ (80015e8 <HAL_DMA_Abort+0xbc>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2225      	movs	r2, #37	@ 0x25
 80015d2:	2101      	movs	r1, #1
 80015d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2224      	movs	r2, #36	@ 0x24
 80015da:	2100      	movs	r1, #0
 80015dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	fffffeff 	.word	0xfffffeff
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f8:	210f      	movs	r1, #15
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2225      	movs	r2, #37	@ 0x25
 8001604:	5c9b      	ldrb	r3, [r3, r2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d006      	beq.n	800161a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2204      	movs	r2, #4
 8001610:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e049      	b.n	80016ae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	210e      	movs	r1, #14
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	438a      	bics	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001644:	491d      	ldr	r1, [pc, #116]	@ (80016bc <HAL_DMA_Abort_IT+0xcc>)
 8001646:	400a      	ands	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800164a:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <HAL_DMA_Abort_IT+0xd0>)
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	221c      	movs	r2, #28
 8001654:	4013      	ands	r3, r2
 8001656:	2201      	movs	r2, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <HAL_DMA_Abort_IT+0xd0>)
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001668:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00c      	beq.n	800168c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800167c:	490f      	ldr	r1, [pc, #60]	@ (80016bc <HAL_DMA_Abort_IT+0xcc>)
 800167e:	400a      	ands	r2, r1
 8001680:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800168a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2225      	movs	r2, #37	@ 0x25
 8001690:	2101      	movs	r1, #1
 8001692:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	@ 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	0010      	movs	r0, r2
 80016ac:	4798      	blx	r3
    }
  }
  return status;
 80016ae:	230f      	movs	r3, #15
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	781b      	ldrb	r3, [r3, #0]
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	fffffeff 	.word	0xfffffeff
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e147      	b.n	8001964 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4091      	lsls	r1, r2
 80016de:	000a      	movs	r2, r1
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d100      	bne.n	80016ec <HAL_GPIO_Init+0x28>
 80016ea:	e138      	b.n	800195e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_Init+0x40>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	4013      	ands	r3, r2
 8001700:	2b02      	cmp	r3, #2
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	409a      	lsls	r2, r3
 8001712:	0013      	movs	r3, r2
 8001714:	43da      	mvns	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
 8001740:	0013      	movs	r3, r2
 8001742:	43da      	mvns	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	2201      	movs	r2, #1
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
 8001758:	0013      	movs	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	4013      	ands	r3, r2
 800176e:	2b03      	cmp	r3, #3
 8001770:	d017      	beq.n	80017a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2203      	movs	r2, #3
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d123      	bne.n	80017f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	58d3      	ldr	r3, [r2, r3]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2207      	movs	r2, #7
 80017c0:	4013      	ands	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2107      	movs	r1, #7
 80017da:	400b      	ands	r3, r1
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	6939      	ldr	r1, [r7, #16]
 80017f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	43da      	mvns	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	401a      	ands	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	23c0      	movs	r3, #192	@ 0xc0
 8001830:	029b      	lsls	r3, r3, #10
 8001832:	4013      	ands	r3, r2
 8001834:	d100      	bne.n	8001838 <HAL_GPIO_Init+0x174>
 8001836:	e092      	b.n	800195e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001838:	4a50      	ldr	r2, [pc, #320]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3318      	adds	r3, #24
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	589b      	ldr	r3, [r3, r2]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2203      	movs	r2, #3
 800184a:	4013      	ands	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	220f      	movs	r2, #15
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	43da      	mvns	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	23a0      	movs	r3, #160	@ 0xa0
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	429a      	cmp	r2, r3
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x1ca>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a45      	ldr	r2, [pc, #276]	@ (8001980 <HAL_GPIO_Init+0x2bc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x1c6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a44      	ldr	r2, [pc, #272]	@ (8001984 <HAL_GPIO_Init+0x2c0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x1c2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <HAL_GPIO_Init+0x2c4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x1be>
 800187e:	2303      	movs	r3, #3
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x1cc>
 8001882:	2305      	movs	r3, #5
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x1cc>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x1cc>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x1cc>
 800188e:	2300      	movs	r3, #0
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	2103      	movs	r1, #3
 8001894:	400a      	ands	r2, r1
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	4093      	lsls	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018a0:	4936      	ldr	r1, [pc, #216]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3318      	adds	r3, #24
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ae:	4b33      	ldr	r3, [pc, #204]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	035b      	lsls	r3, r3, #13
 80018c6:	4013      	ands	r3, r2
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d2:	4b2a      	ldr	r3, [pc, #168]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018d8:	4b28      	ldr	r3, [pc, #160]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	039b      	lsls	r3, r3, #14
 80018f0:	4013      	ands	r3, r2
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fc:	4b1f      	ldr	r3, [pc, #124]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001902:	4a1e      	ldr	r2, [pc, #120]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 8001904:	2384      	movs	r3, #132	@ 0x84
 8001906:	58d3      	ldr	r3, [r2, r3]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43da      	mvns	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	029b      	lsls	r3, r3, #10
 800191c:	4013      	ands	r3, r2
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001928:	4914      	ldr	r1, [pc, #80]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 800192a:	2284      	movs	r2, #132	@ 0x84
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001930:	4a12      	ldr	r2, [pc, #72]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	58d3      	ldr	r3, [r2, r3]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001956:	4909      	ldr	r1, [pc, #36]	@ (800197c <HAL_GPIO_Init+0x2b8>)
 8001958:	2280      	movs	r2, #128	@ 0x80
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	40da      	lsrs	r2, r3
 800196c:	1e13      	subs	r3, r2, #0
 800196e:	d000      	beq.n	8001972 <HAL_GPIO_Init+0x2ae>
 8001970:	e6b0      	b.n	80016d4 <HAL_GPIO_Init+0x10>
  }
}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	46c0      	nop			@ (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b006      	add	sp, #24
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021800 	.word	0x40021800
 8001980:	50000400 	.word	0x50000400
 8001984:	50000800 	.word	0x50000800
 8001988:	50000c00 	.word	0x50000c00

0800198c <LL_RCC_GetAPB1Prescaler>:
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	23e0      	movs	r3, #224	@ 0xe0
 8001996:	01db      	lsls	r3, r3, #7
 8001998:	4013      	ands	r3, r2
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019aa:	4b3c      	ldr	r3, [pc, #240]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2238      	movs	r2, #56	@ 0x38
 80019b0:	4013      	ands	r3, r2
 80019b2:	d10f      	bne.n	80019d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019b4:	4b39      	ldr	r3, [pc, #228]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0adb      	lsrs	r3, r3, #11
 80019ba:	2207      	movs	r2, #7
 80019bc:	4013      	ands	r3, r2
 80019be:	2201      	movs	r2, #1
 80019c0:	409a      	lsls	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	4835      	ldr	r0, [pc, #212]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019ca:	f7fe fbab 	bl	8000124 <__udivsi3>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e05d      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d4:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2238      	movs	r2, #56	@ 0x38
 80019da:	4013      	ands	r3, r2
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e0:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x100>)
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2238      	movs	r2, #56	@ 0x38
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d138      	bne.n	8001a64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019f2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2203      	movs	r2, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019fc:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	2207      	movs	r2, #7
 8001a04:	4013      	ands	r3, r2
 8001a06:	3301      	adds	r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d10d      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	4824      	ldr	r0, [pc, #144]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a14:	f7fe fb86 	bl	8000124 <__udivsi3>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	227f      	movs	r2, #127	@ 0x7f
 8001a24:	4013      	ands	r3, r2
 8001a26:	434b      	muls	r3, r1
 8001a28:	617b      	str	r3, [r7, #20]
        break;
 8001a2a:	e00d      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	481c      	ldr	r0, [pc, #112]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a30:	f7fe fb78 	bl	8000124 <__udivsi3>
 8001a34:	0003      	movs	r3, r0
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	227f      	movs	r2, #127	@ 0x7f
 8001a40:	4013      	ands	r3, r2
 8001a42:	434b      	muls	r3, r1
 8001a44:	617b      	str	r3, [r7, #20]
        break;
 8001a46:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0f5b      	lsrs	r3, r3, #29
 8001a4e:	2207      	movs	r2, #7
 8001a50:	4013      	ands	r3, r2
 8001a52:	3301      	adds	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	6978      	ldr	r0, [r7, #20]
 8001a5a:	f7fe fb63 	bl	8000124 <__udivsi3>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	e015      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a64:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2238      	movs	r2, #56	@ 0x38
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d103      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2238      	movs	r2, #56	@ 0x38
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b18      	cmp	r3, #24
 8001a82:	d103      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a84:	23fa      	movs	r3, #250	@ 0xfa
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e001      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a90:	693b      	ldr	r3, [r7, #16]
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b006      	add	sp, #24
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	00f42400 	.word	0x00f42400
 8001aa4:	007a1200 	.word	0x007a1200

08001aa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aac:	4b02      	ldr	r3, [pc, #8]	@ (8001ab8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	20000034 	.word	0x20000034

08001abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ac0:	f7ff fff2 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001ac4:	0004      	movs	r4, r0
 8001ac6:	f7ff ff61 	bl	800198c <LL_RCC_GetAPB1Prescaler>
 8001aca:	0003      	movs	r3, r0
 8001acc:	0b1a      	lsrs	r2, r3, #12
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	58d3      	ldr	r3, [r2, r3]
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	40dc      	lsrs	r4, r3
 8001ada:	0023      	movs	r3, r4
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	08004734 	.word	0x08004734

08001ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e046      	b.n	8001b88 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2288      	movs	r2, #136	@ 0x88
 8001afe:	589b      	ldr	r3, [r3, r2]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2284      	movs	r2, #132	@ 0x84
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f7ff fa9c 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2288      	movs	r2, #136	@ 0x88
 8001b18:	2124      	movs	r1, #36	@ 0x24
 8001b1a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2101      	movs	r1, #1
 8001b28:	438a      	bics	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 fe0e 	bl	8002758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fc66 	bl	8002410 <UART_SetConfig>
 8001b44:	0003      	movs	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e01c      	b.n	8001b88 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	490d      	ldr	r1, [pc, #52]	@ (8001b90 <HAL_UART_Init+0xa8>)
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	212a      	movs	r1, #42	@ 0x2a
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0018      	movs	r0, r3
 8001b82:	f000 fe9d 	bl	80028c0 <UART_CheckIdleState>
 8001b86:	0003      	movs	r3, r0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	ffffb7ff 	.word	0xffffb7ff

08001b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	1dbb      	adds	r3, r7, #6
 8001ba2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2288      	movs	r2, #136	@ 0x88
 8001ba8:	589b      	ldr	r3, [r3, r2]
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d000      	beq.n	8001bb0 <HAL_UART_Transmit+0x1c>
 8001bae:	e090      	b.n	8001cd2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_UART_Transmit+0x2a>
 8001bb6:	1dbb      	adds	r3, r7, #6
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e088      	b.n	8001cd4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	015b      	lsls	r3, r3, #5
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d109      	bne.n	8001be2 <HAL_UART_Transmit+0x4e>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d001      	beq.n	8001be2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e078      	b.n	8001cd4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2290      	movs	r2, #144	@ 0x90
 8001be6:	2100      	movs	r1, #0
 8001be8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2288      	movs	r2, #136	@ 0x88
 8001bee:	2121      	movs	r1, #33	@ 0x21
 8001bf0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bf2:	f7ff fb8f 	bl	8001314 <HAL_GetTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1dba      	adds	r2, r7, #6
 8001bfe:	2154      	movs	r1, #84	@ 0x54
 8001c00:	8812      	ldrh	r2, [r2, #0]
 8001c02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1dba      	adds	r2, r7, #6
 8001c08:	2156      	movs	r1, #86	@ 0x56
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d108      	bne.n	8001c2c <HAL_UART_Transmit+0x98>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	e003      	b.n	8001c34 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c34:	e030      	b.n	8001c98 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	0013      	movs	r3, r2
 8001c40:	2200      	movs	r2, #0
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	f000 fee6 	bl	8002a14 <UART_WaitOnFlagUntilTimeout>
 8001c48:	1e03      	subs	r3, r0, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2288      	movs	r2, #136	@ 0x88
 8001c50:	2120      	movs	r1, #32
 8001c52:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e03d      	b.n	8001cd4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10b      	bne.n	8001c76 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	001a      	movs	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	05d2      	lsls	r2, r2, #23
 8001c6a:	0dd2      	lsrs	r2, r2, #23
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	3302      	adds	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e007      	b.n	8001c86 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2256      	movs	r2, #86	@ 0x56
 8001c8a:	5a9b      	ldrh	r3, [r3, r2]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b299      	uxth	r1, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2256      	movs	r2, #86	@ 0x56
 8001c96:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2256      	movs	r2, #86	@ 0x56
 8001c9c:	5a9b      	ldrh	r3, [r3, r2]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1c8      	bne.n	8001c36 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	0013      	movs	r3, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2140      	movs	r1, #64	@ 0x40
 8001cb2:	f000 feaf 	bl	8002a14 <UART_WaitOnFlagUntilTimeout>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2288      	movs	r2, #136	@ 0x88
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e006      	b.n	8001cd4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2288      	movs	r2, #136	@ 0x88
 8001cca:	2120      	movs	r1, #32
 8001ccc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
  }
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b008      	add	sp, #32
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	1dbb      	adds	r3, r7, #6
 8001ce8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	228c      	movs	r2, #140	@ 0x8c
 8001cee:	589b      	ldr	r3, [r3, r2]
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d145      	bne.n	8001d80 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_UART_Receive_IT+0x26>
 8001cfa:	1dbb      	adds	r3, r7, #6
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e03d      	b.n	8001d82 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	015b      	lsls	r3, r3, #5
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d109      	bne.n	8001d26 <HAL_UART_Receive_IT+0x4a>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d001      	beq.n	8001d26 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e02d      	b.n	8001d82 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	4013      	ands	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d3e:	613b      	str	r3, [r7, #16]
  return(result);
 8001d40:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f383 8810 	msr	PRIMASK, r3
}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	04c9      	lsls	r1, r1, #19
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f383 8810 	msr	PRIMASK, r3
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d6e:	1dbb      	adds	r3, r7, #6
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 febc 	bl	8002af4 <UART_Start_Receive_IT>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	e000      	b.n	8001d82 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
  }
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b008      	add	sp, #32
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b0aa      	sub	sp, #168	@ 0xa8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	22a4      	movs	r2, #164	@ 0xa4
 8001d9c:	18b9      	adds	r1, r7, r2
 8001d9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	20a0      	movs	r0, #160	@ 0xa0
 8001da8:	1839      	adds	r1, r7, r0
 8001daa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	249c      	movs	r4, #156	@ 0x9c
 8001db4:	1939      	adds	r1, r7, r4
 8001db6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001db8:	0011      	movs	r1, r2
 8001dba:	18bb      	adds	r3, r7, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4aa2      	ldr	r2, [pc, #648]	@ (8002048 <HAL_UART_IRQHandler+0x2bc>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2298      	movs	r2, #152	@ 0x98
 8001dc4:	18bd      	adds	r5, r7, r2
 8001dc6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001dc8:	18bb      	adds	r3, r7, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11a      	bne.n	8001e06 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d015      	beq.n	8001e06 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001dda:	183b      	adds	r3, r7, r0
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2220      	movs	r2, #32
 8001de0:	4013      	ands	r3, r2
 8001de2:	d105      	bne.n	8001df0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	055b      	lsls	r3, r3, #21
 8001dec:	4013      	ands	r3, r2
 8001dee:	d00a      	beq.n	8001e06 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d100      	bne.n	8001dfa <HAL_UART_IRQHandler+0x6e>
 8001df8:	e2dc      	b.n	80023b4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	0010      	movs	r0, r2
 8001e02:	4798      	blx	r3
      }
      return;
 8001e04:	e2d6      	b.n	80023b4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e06:	2398      	movs	r3, #152	@ 0x98
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d100      	bne.n	8001e12 <HAL_UART_IRQHandler+0x86>
 8001e10:	e122      	b.n	8002058 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001e12:	239c      	movs	r3, #156	@ 0x9c
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a8c      	ldr	r2, [pc, #560]	@ (800204c <HAL_UART_IRQHandler+0x2c0>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d106      	bne.n	8001e2c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001e1e:	23a0      	movs	r3, #160	@ 0xa0
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a8a      	ldr	r2, [pc, #552]	@ (8002050 <HAL_UART_IRQHandler+0x2c4>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	d100      	bne.n	8001e2c <HAL_UART_IRQHandler+0xa0>
 8001e2a:	e115      	b.n	8002058 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e2c:	23a4      	movs	r3, #164	@ 0xa4
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d012      	beq.n	8001e5e <HAL_UART_IRQHandler+0xd2>
 8001e38:	23a0      	movs	r3, #160	@ 0xa0
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	2380      	movs	r3, #128	@ 0x80
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2290      	movs	r2, #144	@ 0x90
 8001e52:	589b      	ldr	r3, [r3, r2]
 8001e54:	2201      	movs	r2, #1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2190      	movs	r1, #144	@ 0x90
 8001e5c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e5e:	23a4      	movs	r3, #164	@ 0xa4
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d011      	beq.n	8001e8e <HAL_UART_IRQHandler+0x102>
 8001e6a:	239c      	movs	r3, #156	@ 0x9c
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	d00b      	beq.n	8001e8e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2290      	movs	r2, #144	@ 0x90
 8001e82:	589b      	ldr	r3, [r3, r2]
 8001e84:	2204      	movs	r2, #4
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2190      	movs	r1, #144	@ 0x90
 8001e8c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e8e:	23a4      	movs	r3, #164	@ 0xa4
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2204      	movs	r2, #4
 8001e96:	4013      	ands	r3, r2
 8001e98:	d011      	beq.n	8001ebe <HAL_UART_IRQHandler+0x132>
 8001e9a:	239c      	movs	r3, #156	@ 0x9c
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2290      	movs	r2, #144	@ 0x90
 8001eb2:	589b      	ldr	r3, [r3, r2]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2190      	movs	r1, #144	@ 0x90
 8001ebc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001ebe:	23a4      	movs	r3, #164	@ 0xa4
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d017      	beq.n	8001efa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001eca:	23a0      	movs	r3, #160	@ 0xa0
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d105      	bne.n	8001ee2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001ed6:	239c      	movs	r3, #156	@ 0x9c
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5b      	ldr	r2, [pc, #364]	@ (800204c <HAL_UART_IRQHandler+0x2c0>)
 8001ede:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001ee0:	d00b      	beq.n	8001efa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2290      	movs	r2, #144	@ 0x90
 8001eee:	589b      	ldr	r3, [r3, r2]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2190      	movs	r1, #144	@ 0x90
 8001ef8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001efa:	23a4      	movs	r3, #164	@ 0xa4
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_UART_IRQHandler+0x1a4>
 8001f08:	23a0      	movs	r3, #160	@ 0xa0
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	04db      	lsls	r3, r3, #19
 8001f12:	4013      	ands	r3, r2
 8001f14:	d00c      	beq.n	8001f30 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2280      	movs	r2, #128	@ 0x80
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2290      	movs	r2, #144	@ 0x90
 8001f24:	589b      	ldr	r3, [r3, r2]
 8001f26:	2220      	movs	r2, #32
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2190      	movs	r1, #144	@ 0x90
 8001f2e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2290      	movs	r2, #144	@ 0x90
 8001f34:	589b      	ldr	r3, [r3, r2]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d100      	bne.n	8001f3c <HAL_UART_IRQHandler+0x1b0>
 8001f3a:	e23d      	b.n	80023b8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001f3c:	23a4      	movs	r3, #164	@ 0xa4
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2220      	movs	r2, #32
 8001f44:	4013      	ands	r3, r2
 8001f46:	d015      	beq.n	8001f74 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001f48:	23a0      	movs	r3, #160	@ 0xa0
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	4013      	ands	r3, r2
 8001f52:	d106      	bne.n	8001f62 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001f54:	239c      	movs	r3, #156	@ 0x9c
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	055b      	lsls	r3, r3, #21
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d008      	beq.n	8001f74 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	0010      	movs	r0, r2
 8001f72:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2290      	movs	r2, #144	@ 0x90
 8001f78:	589b      	ldr	r3, [r3, r2]
 8001f7a:	2194      	movs	r1, #148	@ 0x94
 8001f7c:	187a      	adds	r2, r7, r1
 8001f7e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2240      	movs	r2, #64	@ 0x40
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b40      	cmp	r3, #64	@ 0x40
 8001f8c:	d004      	beq.n	8001f98 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2228      	movs	r2, #40	@ 0x28
 8001f94:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f96:	d04c      	beq.n	8002032 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fece 	bl	8002d3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b40      	cmp	r3, #64	@ 0x40
 8001fac:	d13c      	bne.n	8002028 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fae:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fb6:	2090      	movs	r0, #144	@ 0x90
 8001fb8:	183a      	adds	r2, r7, r0
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fc2:	f383 8810 	msr	PRIMASK, r3
}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2140      	movs	r1, #64	@ 0x40
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	183b      	adds	r3, r7, r0
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fe0:	f383 8810 	msr	PRIMASK, r3
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	589b      	ldr	r3, [r3, r2]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	589b      	ldr	r3, [r3, r2]
 8001ff6:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <HAL_UART_IRQHandler+0x2c8>)
 8001ff8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2280      	movs	r2, #128	@ 0x80
 8001ffe:	589b      	ldr	r3, [r3, r2]
 8002000:	0018      	movs	r0, r3
 8002002:	f7ff faf5 	bl	80015f0 <HAL_DMA_Abort_IT>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d01c      	beq.n	8002044 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	589b      	ldr	r3, [r3, r2]
 8002010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	2180      	movs	r1, #128	@ 0x80
 8002016:	5852      	ldr	r2, [r2, r1]
 8002018:	0010      	movs	r0, r2
 800201a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201c:	e012      	b.n	8002044 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f9e1 	bl	80023e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002026:	e00d      	b.n	8002044 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 f9dc 	bl	80023e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002030:	e008      	b.n	8002044 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f000 f9d7 	bl	80023e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2290      	movs	r2, #144	@ 0x90
 800203e:	2100      	movs	r1, #0
 8002040:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002042:	e1b9      	b.n	80023b8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002044:	46c0      	nop			@ (mov r8, r8)
    return;
 8002046:	e1b7      	b.n	80023b8 <HAL_UART_IRQHandler+0x62c>
 8002048:	0000080f 	.word	0x0000080f
 800204c:	10000001 	.word	0x10000001
 8002050:	04000120 	.word	0x04000120
 8002054:	08002e09 	.word	0x08002e09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d000      	beq.n	8002062 <HAL_UART_IRQHandler+0x2d6>
 8002060:	e13e      	b.n	80022e0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002062:	23a4      	movs	r3, #164	@ 0xa4
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	4013      	ands	r3, r2
 800206c:	d100      	bne.n	8002070 <HAL_UART_IRQHandler+0x2e4>
 800206e:	e137      	b.n	80022e0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002070:	23a0      	movs	r3, #160	@ 0xa0
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2210      	movs	r2, #16
 8002078:	4013      	ands	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_UART_IRQHandler+0x2f2>
 800207c:	e130      	b.n	80022e0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2210      	movs	r2, #16
 8002084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2240      	movs	r2, #64	@ 0x40
 800208e:	4013      	ands	r3, r2
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	d000      	beq.n	8002096 <HAL_UART_IRQHandler+0x30a>
 8002094:	e0a4      	b.n	80021e0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2280      	movs	r2, #128	@ 0x80
 800209a:	589b      	ldr	r3, [r3, r2]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	217e      	movs	r1, #126	@ 0x7e
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d100      	bne.n	80020b0 <HAL_UART_IRQHandler+0x324>
 80020ae:	e185      	b.n	80023bc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	225c      	movs	r2, #92	@ 0x5c
 80020b4:	5a9b      	ldrh	r3, [r3, r2]
 80020b6:	187a      	adds	r2, r7, r1
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d300      	bcc.n	80020c0 <HAL_UART_IRQHandler+0x334>
 80020be:	e17d      	b.n	80023bc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	187a      	adds	r2, r7, r1
 80020c4:	215e      	movs	r1, #94	@ 0x5e
 80020c6:	8812      	ldrh	r2, [r2, #0]
 80020c8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	589b      	ldr	r3, [r3, r2]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2220      	movs	r2, #32
 80020d6:	4013      	ands	r3, r2
 80020d8:	d170      	bne.n	80021bc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020da:	f3ef 8310 	mrs	r3, PRIMASK
 80020de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80020e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020e4:	2301      	movs	r3, #1
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ea:	f383 8810 	msr	PRIMASK, r3
}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	49b4      	ldr	r1, [pc, #720]	@ (80023cc <HAL_UART_IRQHandler+0x640>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002106:	f383 8810 	msr	PRIMASK, r3
}
 800210a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800210c:	f3ef 8310 	mrs	r3, PRIMASK
 8002110:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002114:	677b      	str	r3, [r7, #116]	@ 0x74
 8002116:	2301      	movs	r3, #1
 8002118:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800211c:	f383 8810 	msr	PRIMASK, r3
}
 8002120:	46c0      	nop			@ (mov r8, r8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	438a      	bics	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002134:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002138:	f383 8810 	msr	PRIMASK, r3
}
 800213c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800213e:	f3ef 8310 	mrs	r3, PRIMASK
 8002142:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002146:	673b      	str	r3, [r7, #112]	@ 0x70
 8002148:	2301      	movs	r3, #1
 800214a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800214e:	f383 8810 	msr	PRIMASK, r3
}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2140      	movs	r1, #64	@ 0x40
 8002160:	438a      	bics	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002166:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800216a:	f383 8810 	msr	PRIMASK, r3
}
 800216e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	228c      	movs	r2, #140	@ 0x8c
 8002174:	2120      	movs	r1, #32
 8002176:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800217e:	f3ef 8310 	mrs	r3, PRIMASK
 8002182:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002186:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002188:	2301      	movs	r3, #1
 800218a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800218e:	f383 8810 	msr	PRIMASK, r3
}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2110      	movs	r1, #16
 80021a0:	438a      	bics	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021aa:	f383 8810 	msr	PRIMASK, r3
}
 80021ae:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2280      	movs	r2, #128	@ 0x80
 80021b4:	589b      	ldr	r3, [r3, r2]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7ff f9b8 	bl	800152c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	225c      	movs	r2, #92	@ 0x5c
 80021c6:	5a9a      	ldrh	r2, [r3, r2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	215e      	movs	r1, #94	@ 0x5e
 80021cc:	5a5b      	ldrh	r3, [r3, r1]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0011      	movs	r1, r2
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f90d 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021de:	e0ed      	b.n	80023bc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	225c      	movs	r2, #92	@ 0x5c
 80021e4:	5a99      	ldrh	r1, [r3, r2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	225e      	movs	r2, #94	@ 0x5e
 80021ea:	5a9b      	ldrh	r3, [r3, r2]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	208e      	movs	r0, #142	@ 0x8e
 80021f0:	183b      	adds	r3, r7, r0
 80021f2:	1a8a      	subs	r2, r1, r2
 80021f4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	225e      	movs	r2, #94	@ 0x5e
 80021fa:	5a9b      	ldrh	r3, [r3, r2]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d100      	bne.n	8002204 <HAL_UART_IRQHandler+0x478>
 8002202:	e0dd      	b.n	80023c0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002204:	183b      	adds	r3, r7, r0
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d100      	bne.n	800220e <HAL_UART_IRQHandler+0x482>
 800220c:	e0d8      	b.n	80023c0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800220e:	f3ef 8310 	mrs	r3, PRIMASK
 8002212:	60fb      	str	r3, [r7, #12]
  return(result);
 8002214:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002216:	2488      	movs	r4, #136	@ 0x88
 8002218:	193a      	adds	r2, r7, r4
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f383 8810 	msr	PRIMASK, r3
}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4967      	ldr	r1, [pc, #412]	@ (80023d0 <HAL_UART_IRQHandler+0x644>)
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	193b      	adds	r3, r7, r4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f383 8810 	msr	PRIMASK, r3
}
 8002244:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002246:	f3ef 8310 	mrs	r3, PRIMASK
 800224a:	61bb      	str	r3, [r7, #24]
  return(result);
 800224c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800224e:	2484      	movs	r4, #132	@ 0x84
 8002250:	193a      	adds	r2, r7, r4
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f383 8810 	msr	PRIMASK, r3
}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	495a      	ldr	r1, [pc, #360]	@ (80023d4 <HAL_UART_IRQHandler+0x648>)
 800226c:	400a      	ands	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	193b      	adds	r3, r7, r4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f383 8810 	msr	PRIMASK, r3
}
 800227c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	228c      	movs	r2, #140	@ 0x8c
 8002282:	2120      	movs	r1, #32
 8002284:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002292:	f3ef 8310 	mrs	r3, PRIMASK
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800229a:	2480      	movs	r4, #128	@ 0x80
 800229c:	193a      	adds	r2, r7, r4
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	2301      	movs	r3, #1
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	f383 8810 	msr	PRIMASK, r3
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2110      	movs	r1, #16
 80022b8:	438a      	bics	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	193b      	adds	r3, r7, r4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c4:	f383 8810 	msr	PRIMASK, r3
}
 80022c8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022d0:	183b      	adds	r3, r7, r0
 80022d2:	881a      	ldrh	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f88d 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80022de:	e06f      	b.n	80023c0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80022e0:	23a4      	movs	r3, #164	@ 0xa4
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	035b      	lsls	r3, r3, #13
 80022ea:	4013      	ands	r3, r2
 80022ec:	d010      	beq.n	8002310 <HAL_UART_IRQHandler+0x584>
 80022ee:	239c      	movs	r3, #156	@ 0x9c
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	03db      	lsls	r3, r3, #15
 80022f8:	4013      	ands	r3, r2
 80022fa:	d009      	beq.n	8002310 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	0352      	lsls	r2, r2, #13
 8002304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f001 fab5 	bl	8003878 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800230e:	e05a      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002310:	23a4      	movs	r3, #164	@ 0xa4
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2280      	movs	r2, #128	@ 0x80
 8002318:	4013      	ands	r3, r2
 800231a:	d016      	beq.n	800234a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800231c:	23a0      	movs	r3, #160	@ 0xa0
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2280      	movs	r2, #128	@ 0x80
 8002324:	4013      	ands	r3, r2
 8002326:	d106      	bne.n	8002336 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002328:	239c      	movs	r3, #156	@ 0x9c
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	4013      	ands	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800233a:	2b00      	cmp	r3, #0
 800233c:	d042      	beq.n	80023c4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	0010      	movs	r0, r2
 8002346:	4798      	blx	r3
    }
    return;
 8002348:	e03c      	b.n	80023c4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800234a:	23a4      	movs	r3, #164	@ 0xa4
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2240      	movs	r2, #64	@ 0x40
 8002352:	4013      	ands	r3, r2
 8002354:	d00a      	beq.n	800236c <HAL_UART_IRQHandler+0x5e0>
 8002356:	23a0      	movs	r3, #160	@ 0xa0
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2240      	movs	r2, #64	@ 0x40
 800235e:	4013      	ands	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 fd66 	bl	8002e36 <UART_EndTransmit_IT>
    return;
 800236a:	e02c      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800236c:	23a4      	movs	r3, #164	@ 0xa4
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	4013      	ands	r3, r2
 8002378:	d00b      	beq.n	8002392 <HAL_UART_IRQHandler+0x606>
 800237a:	23a0      	movs	r3, #160	@ 0xa0
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	05db      	lsls	r3, r3, #23
 8002384:	4013      	ands	r3, r2
 8002386:	d004      	beq.n	8002392 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f001 fa84 	bl	8003898 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002390:	e019      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002392:	23a4      	movs	r3, #164	@ 0xa4
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	045b      	lsls	r3, r3, #17
 800239c:	4013      	ands	r3, r2
 800239e:	d012      	beq.n	80023c6 <HAL_UART_IRQHandler+0x63a>
 80023a0:	23a0      	movs	r3, #160	@ 0xa0
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	da0d      	bge.n	80023c6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f001 fa6b 	bl	8003888 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023b2:	e008      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
      return;
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	e006      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
    return;
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	e004      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
      return;
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	e002      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
      return;
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	e000      	b.n	80023c6 <HAL_UART_IRQHandler+0x63a>
    return;
 80023c4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b02a      	add	sp, #168	@ 0xa8
 80023ca:	bdb0      	pop	{r4, r5, r7, pc}
 80023cc:	fffffeff 	.word	0xfffffeff
 80023d0:	fffffedf 	.word	0xfffffedf
 80023d4:	effffffe 	.word	0xeffffffe

080023d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023f0:	46c0      	nop			@ (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	000a      	movs	r2, r1
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002418:	231a      	movs	r3, #26
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4313      	orrs	r3, r2
 8002436:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4abc      	ldr	r2, [pc, #752]	@ (8002730 <UART_SetConfig+0x320>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4ab7      	ldr	r2, [pc, #732]	@ (8002734 <UART_SetConfig+0x324>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	4313      	orrs	r3, r2
 8002474:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4aae      	ldr	r2, [pc, #696]	@ (8002738 <UART_SetConfig+0x328>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002492:	220f      	movs	r2, #15
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4aa4      	ldr	r2, [pc, #656]	@ (800273c <UART_SetConfig+0x32c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d127      	bne.n	80024fe <UART_SetConfig+0xee>
 80024ae:	4ba4      	ldr	r3, [pc, #656]	@ (8002740 <UART_SetConfig+0x330>)
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	2203      	movs	r2, #3
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d017      	beq.n	80024ea <UART_SetConfig+0xda>
 80024ba:	d81b      	bhi.n	80024f4 <UART_SetConfig+0xe4>
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d00a      	beq.n	80024d6 <UART_SetConfig+0xc6>
 80024c0:	d818      	bhi.n	80024f4 <UART_SetConfig+0xe4>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <UART_SetConfig+0xbc>
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d00a      	beq.n	80024e0 <UART_SetConfig+0xd0>
 80024ca:	e013      	b.n	80024f4 <UART_SetConfig+0xe4>
 80024cc:	231b      	movs	r3, #27
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e058      	b.n	8002588 <UART_SetConfig+0x178>
 80024d6:	231b      	movs	r3, #27
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e053      	b.n	8002588 <UART_SetConfig+0x178>
 80024e0:	231b      	movs	r3, #27
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2204      	movs	r2, #4
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e04e      	b.n	8002588 <UART_SetConfig+0x178>
 80024ea:	231b      	movs	r3, #27
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2208      	movs	r2, #8
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e049      	b.n	8002588 <UART_SetConfig+0x178>
 80024f4:	231b      	movs	r3, #27
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2210      	movs	r2, #16
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e044      	b.n	8002588 <UART_SetConfig+0x178>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a90      	ldr	r2, [pc, #576]	@ (8002744 <UART_SetConfig+0x334>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d127      	bne.n	8002558 <UART_SetConfig+0x148>
 8002508:	4b8d      	ldr	r3, [pc, #564]	@ (8002740 <UART_SetConfig+0x330>)
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	220c      	movs	r2, #12
 800250e:	4013      	ands	r3, r2
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d017      	beq.n	8002544 <UART_SetConfig+0x134>
 8002514:	d81b      	bhi.n	800254e <UART_SetConfig+0x13e>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d00a      	beq.n	8002530 <UART_SetConfig+0x120>
 800251a:	d818      	bhi.n	800254e <UART_SetConfig+0x13e>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <UART_SetConfig+0x116>
 8002520:	2b04      	cmp	r3, #4
 8002522:	d00a      	beq.n	800253a <UART_SetConfig+0x12a>
 8002524:	e013      	b.n	800254e <UART_SetConfig+0x13e>
 8002526:	231b      	movs	r3, #27
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e02b      	b.n	8002588 <UART_SetConfig+0x178>
 8002530:	231b      	movs	r3, #27
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e026      	b.n	8002588 <UART_SetConfig+0x178>
 800253a:	231b      	movs	r3, #27
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2204      	movs	r2, #4
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e021      	b.n	8002588 <UART_SetConfig+0x178>
 8002544:	231b      	movs	r3, #27
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2208      	movs	r2, #8
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e01c      	b.n	8002588 <UART_SetConfig+0x178>
 800254e:	231b      	movs	r3, #27
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2210      	movs	r2, #16
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e017      	b.n	8002588 <UART_SetConfig+0x178>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a7a      	ldr	r2, [pc, #488]	@ (8002748 <UART_SetConfig+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d104      	bne.n	800256c <UART_SetConfig+0x15c>
 8002562:	231b      	movs	r3, #27
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e00d      	b.n	8002588 <UART_SetConfig+0x178>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a76      	ldr	r2, [pc, #472]	@ (800274c <UART_SetConfig+0x33c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d104      	bne.n	8002580 <UART_SetConfig+0x170>
 8002576:	231b      	movs	r3, #27
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e003      	b.n	8002588 <UART_SetConfig+0x178>
 8002580:	231b      	movs	r3, #27
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2210      	movs	r2, #16
 8002586:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	429a      	cmp	r2, r3
 8002592:	d000      	beq.n	8002596 <UART_SetConfig+0x186>
 8002594:	e065      	b.n	8002662 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002596:	231b      	movs	r3, #27
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d015      	beq.n	80025cc <UART_SetConfig+0x1bc>
 80025a0:	dc18      	bgt.n	80025d4 <UART_SetConfig+0x1c4>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d00d      	beq.n	80025c2 <UART_SetConfig+0x1b2>
 80025a6:	dc15      	bgt.n	80025d4 <UART_SetConfig+0x1c4>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <UART_SetConfig+0x1a2>
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d005      	beq.n	80025bc <UART_SetConfig+0x1ac>
 80025b0:	e010      	b.n	80025d4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b2:	f7ff fa83 	bl	8001abc <HAL_RCC_GetPCLK1Freq>
 80025b6:	0003      	movs	r3, r0
 80025b8:	617b      	str	r3, [r7, #20]
        break;
 80025ba:	e012      	b.n	80025e2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025bc:	4b64      	ldr	r3, [pc, #400]	@ (8002750 <UART_SetConfig+0x340>)
 80025be:	617b      	str	r3, [r7, #20]
        break;
 80025c0:	e00f      	b.n	80025e2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025c2:	f7ff f9ef 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 80025c6:	0003      	movs	r3, r0
 80025c8:	617b      	str	r3, [r7, #20]
        break;
 80025ca:	e00a      	b.n	80025e2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	617b      	str	r3, [r7, #20]
        break;
 80025d2:	e006      	b.n	80025e2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025d8:	231a      	movs	r3, #26
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
        break;
 80025e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d100      	bne.n	80025ea <UART_SetConfig+0x1da>
 80025e8:	e08d      	b.n	8002706 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ee:	4b59      	ldr	r3, [pc, #356]	@ (8002754 <UART_SetConfig+0x344>)
 80025f0:	0052      	lsls	r2, r2, #1
 80025f2:	5ad3      	ldrh	r3, [r2, r3]
 80025f4:	0019      	movs	r1, r3
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7fd fd94 	bl	8000124 <__udivsi3>
 80025fc:	0003      	movs	r3, r0
 80025fe:	005a      	lsls	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	18d2      	adds	r2, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0019      	movs	r1, r3
 800260e:	0010      	movs	r0, r2
 8002610:	f7fd fd88 	bl	8000124 <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	d91c      	bls.n	8002658 <UART_SetConfig+0x248>
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	025b      	lsls	r3, r3, #9
 8002624:	429a      	cmp	r2, r3
 8002626:	d217      	bcs.n	8002658 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	b29a      	uxth	r2, r3
 800262c:	200e      	movs	r0, #14
 800262e:	183b      	adds	r3, r7, r0
 8002630:	210f      	movs	r1, #15
 8002632:	438a      	bics	r2, r1
 8002634:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	2207      	movs	r2, #7
 800263e:	4013      	ands	r3, r2
 8002640:	b299      	uxth	r1, r3
 8002642:	183b      	adds	r3, r7, r0
 8002644:	183a      	adds	r2, r7, r0
 8002646:	8812      	ldrh	r2, [r2, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	183a      	adds	r2, r7, r0
 8002652:	8812      	ldrh	r2, [r2, #0]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	e056      	b.n	8002706 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002658:	231a      	movs	r3, #26
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e051      	b.n	8002706 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002662:	231b      	movs	r3, #27
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d015      	beq.n	8002698 <UART_SetConfig+0x288>
 800266c:	dc18      	bgt.n	80026a0 <UART_SetConfig+0x290>
 800266e:	2b04      	cmp	r3, #4
 8002670:	d00d      	beq.n	800268e <UART_SetConfig+0x27e>
 8002672:	dc15      	bgt.n	80026a0 <UART_SetConfig+0x290>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <UART_SetConfig+0x26e>
 8002678:	2b02      	cmp	r3, #2
 800267a:	d005      	beq.n	8002688 <UART_SetConfig+0x278>
 800267c:	e010      	b.n	80026a0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800267e:	f7ff fa1d 	bl	8001abc <HAL_RCC_GetPCLK1Freq>
 8002682:	0003      	movs	r3, r0
 8002684:	617b      	str	r3, [r7, #20]
        break;
 8002686:	e012      	b.n	80026ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002688:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <UART_SetConfig+0x340>)
 800268a:	617b      	str	r3, [r7, #20]
        break;
 800268c:	e00f      	b.n	80026ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800268e:	f7ff f989 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8002692:	0003      	movs	r3, r0
 8002694:	617b      	str	r3, [r7, #20]
        break;
 8002696:	e00a      	b.n	80026ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	617b      	str	r3, [r7, #20]
        break;
 800269e:	e006      	b.n	80026ae <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80026a4:	231a      	movs	r3, #26
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
        break;
 80026ac:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d028      	beq.n	8002706 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b8:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <UART_SetConfig+0x344>)
 80026ba:	0052      	lsls	r2, r2, #1
 80026bc:	5ad3      	ldrh	r3, [r2, r3]
 80026be:	0019      	movs	r1, r3
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f7fd fd2f 	bl	8000124 <__udivsi3>
 80026c6:	0003      	movs	r3, r0
 80026c8:	001a      	movs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	18d2      	adds	r2, r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0019      	movs	r1, r3
 80026d8:	0010      	movs	r0, r2
 80026da:	f7fd fd23 	bl	8000124 <__udivsi3>
 80026de:	0003      	movs	r3, r0
 80026e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d90a      	bls.n	80026fe <UART_SetConfig+0x2ee>
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	025b      	lsls	r3, r3, #9
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d205      	bcs.n	80026fe <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	e003      	b.n	8002706 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80026fe:	231a      	movs	r3, #26
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	226a      	movs	r2, #106	@ 0x6a
 800270a:	2101      	movs	r1, #1
 800270c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2268      	movs	r2, #104	@ 0x68
 8002712:	2101      	movs	r1, #1
 8002714:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002722:	231a      	movs	r3, #26
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b008      	add	sp, #32
 800272e:	bd80      	pop	{r7, pc}
 8002730:	cfff69f3 	.word	0xcfff69f3
 8002734:	ffffcfff 	.word	0xffffcfff
 8002738:	11fff4ff 	.word	0x11fff4ff
 800273c:	40013800 	.word	0x40013800
 8002740:	40021000 	.word	0x40021000
 8002744:	40004400 	.word	0x40004400
 8002748:	40004800 	.word	0x40004800
 800274c:	40004c00 	.word	0x40004c00
 8002750:	00f42400 	.word	0x00f42400
 8002754:	08004754 	.word	0x08004754

08002758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	2208      	movs	r2, #8
 8002766:	4013      	ands	r3, r2
 8002768:	d00b      	beq.n	8002782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a4a      	ldr	r2, [pc, #296]	@ (800289c <UART_AdvFeatureConfig+0x144>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	d00b      	beq.n	80027a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a43      	ldr	r2, [pc, #268]	@ (80028a0 <UART_AdvFeatureConfig+0x148>)
 8002794:	4013      	ands	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	2202      	movs	r2, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	d00b      	beq.n	80027c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a3b      	ldr	r2, [pc, #236]	@ (80028a4 <UART_AdvFeatureConfig+0x14c>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	d00b      	beq.n	80027e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a34      	ldr	r2, [pc, #208]	@ (80028a8 <UART_AdvFeatureConfig+0x150>)
 80027d8:	4013      	ands	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	2210      	movs	r2, #16
 80027ee:	4013      	ands	r3, r2
 80027f0:	d00b      	beq.n	800280a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a2c      	ldr	r2, [pc, #176]	@ (80028ac <UART_AdvFeatureConfig+0x154>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280e:	2220      	movs	r2, #32
 8002810:	4013      	ands	r3, r2
 8002812:	d00b      	beq.n	800282c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <UART_AdvFeatureConfig+0x158>)
 800281c:	4013      	ands	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	2240      	movs	r2, #64	@ 0x40
 8002832:	4013      	ands	r3, r2
 8002834:	d01d      	beq.n	8002872 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <UART_AdvFeatureConfig+0x15c>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	035b      	lsls	r3, r3, #13
 8002856:	429a      	cmp	r2, r3
 8002858:	d10b      	bne.n	8002872 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a15      	ldr	r2, [pc, #84]	@ (80028b8 <UART_AdvFeatureConfig+0x160>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	4013      	ands	r3, r2
 800287a:	d00b      	beq.n	8002894 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a0e      	ldr	r2, [pc, #56]	@ (80028bc <UART_AdvFeatureConfig+0x164>)
 8002884:	4013      	ands	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }
}
 8002894:	46c0      	nop			@ (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b002      	add	sp, #8
 800289a:	bd80      	pop	{r7, pc}
 800289c:	ffff7fff 	.word	0xffff7fff
 80028a0:	fffdffff 	.word	0xfffdffff
 80028a4:	fffeffff 	.word	0xfffeffff
 80028a8:	fffbffff 	.word	0xfffbffff
 80028ac:	ffffefff 	.word	0xffffefff
 80028b0:	ffffdfff 	.word	0xffffdfff
 80028b4:	ffefffff 	.word	0xffefffff
 80028b8:	ff9fffff 	.word	0xff9fffff
 80028bc:	fff7ffff 	.word	0xfff7ffff

080028c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b092      	sub	sp, #72	@ 0x48
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2290      	movs	r2, #144	@ 0x90
 80028cc:	2100      	movs	r1, #0
 80028ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028d0:	f7fe fd20 	bl	8001314 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2208      	movs	r2, #8
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d12d      	bne.n	8002942 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	0391      	lsls	r1, r2, #14
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4a47      	ldr	r2, [pc, #284]	@ (8002a0c <UART_CheckIdleState+0x14c>)
 80028f0:	9200      	str	r2, [sp, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f000 f88e 	bl	8002a14 <UART_WaitOnFlagUntilTimeout>
 80028f8:	1e03      	subs	r3, r0, #0
 80028fa:	d022      	beq.n	8002942 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002906:	2301      	movs	r3, #1
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			@ (mov r8, r8)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	438a      	bics	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2288      	movs	r2, #136	@ 0x88
 8002932:	2120      	movs	r1, #32
 8002934:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2284      	movs	r2, #132	@ 0x84
 800293a:	2100      	movs	r1, #0
 800293c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e060      	b.n	8002a04 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	2b04      	cmp	r3, #4
 800294e:	d146      	bne.n	80029de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	03d1      	lsls	r1, r2, #15
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4a2c      	ldr	r2, [pc, #176]	@ (8002a0c <UART_CheckIdleState+0x14c>)
 800295a:	9200      	str	r2, [sp, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	f000 f859 	bl	8002a14 <UART_WaitOnFlagUntilTimeout>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d03b      	beq.n	80029de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002966:	f3ef 8310 	mrs	r3, PRIMASK
 800296a:	60fb      	str	r3, [r7, #12]
  return(result);
 800296c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f383 8810 	msr	PRIMASK, r3
}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4922      	ldr	r1, [pc, #136]	@ (8002a10 <UART_CheckIdleState+0x150>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002998:	f3ef 8310 	mrs	r3, PRIMASK
 800299c:	61bb      	str	r3, [r7, #24]
  return(result);
 800299e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	438a      	bics	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	228c      	movs	r2, #140	@ 0x8c
 80029ce:	2120      	movs	r1, #32
 80029d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2284      	movs	r2, #132	@ 0x84
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e012      	b.n	8002a04 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2288      	movs	r2, #136	@ 0x88
 80029e2:	2120      	movs	r1, #32
 80029e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	228c      	movs	r2, #140	@ 0x8c
 80029ea:	2120      	movs	r1, #32
 80029ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2284      	movs	r2, #132	@ 0x84
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b010      	add	sp, #64	@ 0x40
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	01ffffff 	.word	0x01ffffff
 8002a10:	fffffedf 	.word	0xfffffedf

08002a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a24:	e051      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	d04e      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2c:	f7fe fc72 	bl	8001314 <HAL_GetTick>
 8002a30:	0002      	movs	r2, r0
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d302      	bcc.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e051      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d03b      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b80      	cmp	r3, #128	@ 0x80
 8002a56:	d038      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b40      	cmp	r3, #64	@ 0x40
 8002a5c:	d035      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2208      	movs	r2, #8
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d111      	bne.n	8002a90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2208      	movs	r2, #8
 8002a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f960 	bl	8002d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2290      	movs	r2, #144	@ 0x90
 8002a80:	2108      	movs	r1, #8
 8002a82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2284      	movs	r2, #132	@ 0x84
 8002a88:	2100      	movs	r1, #0
 8002a8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e02c      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d112      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2280      	movs	r2, #128	@ 0x80
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f943 	bl	8002d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2290      	movs	r2, #144	@ 0x90
 8002aba:	2120      	movs	r1, #32
 8002abc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2284      	movs	r2, #132	@ 0x84
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e00f      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	425a      	negs	r2, r3
 8002ada:	4153      	adcs	r3, r2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	001a      	movs	r2, r3
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d09e      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b004      	add	sp, #16
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b098      	sub	sp, #96	@ 0x60
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	1dbb      	adds	r3, r7, #6
 8002b00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1dba      	adds	r2, r7, #6
 8002b0c:	215c      	movs	r1, #92	@ 0x5c
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1dba      	adds	r2, r7, #6
 8002b16:	215e      	movs	r1, #94	@ 0x5e
 8002b18:	8812      	ldrh	r2, [r2, #0]
 8002b1a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	015b      	lsls	r3, r3, #5
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d10d      	bne.n	8002b4a <UART_Start_Receive_IT+0x56>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <UART_Start_Receive_IT+0x4c>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2260      	movs	r2, #96	@ 0x60
 8002b3a:	497b      	ldr	r1, [pc, #492]	@ (8002d28 <UART_Start_Receive_IT+0x234>)
 8002b3c:	5299      	strh	r1, [r3, r2]
 8002b3e:	e02e      	b.n	8002b9e <UART_Start_Receive_IT+0xaa>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2260      	movs	r2, #96	@ 0x60
 8002b44:	21ff      	movs	r1, #255	@ 0xff
 8002b46:	5299      	strh	r1, [r3, r2]
 8002b48:	e029      	b.n	8002b9e <UART_Start_Receive_IT+0xaa>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <UART_Start_Receive_IT+0x7a>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <UART_Start_Receive_IT+0x70>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2260      	movs	r2, #96	@ 0x60
 8002b5e:	21ff      	movs	r1, #255	@ 0xff
 8002b60:	5299      	strh	r1, [r3, r2]
 8002b62:	e01c      	b.n	8002b9e <UART_Start_Receive_IT+0xaa>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2260      	movs	r2, #96	@ 0x60
 8002b68:	217f      	movs	r1, #127	@ 0x7f
 8002b6a:	5299      	strh	r1, [r3, r2]
 8002b6c:	e017      	b.n	8002b9e <UART_Start_Receive_IT+0xaa>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	055b      	lsls	r3, r3, #21
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d10d      	bne.n	8002b96 <UART_Start_Receive_IT+0xa2>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <UART_Start_Receive_IT+0x98>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2260      	movs	r2, #96	@ 0x60
 8002b86:	217f      	movs	r1, #127	@ 0x7f
 8002b88:	5299      	strh	r1, [r3, r2]
 8002b8a:	e008      	b.n	8002b9e <UART_Start_Receive_IT+0xaa>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2260      	movs	r2, #96	@ 0x60
 8002b90:	213f      	movs	r1, #63	@ 0x3f
 8002b92:	5299      	strh	r1, [r3, r2]
 8002b94:	e003      	b.n	8002b9e <UART_Start_Receive_IT+0xaa>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2260      	movs	r2, #96	@ 0x60
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2290      	movs	r2, #144	@ 0x90
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	228c      	movs	r2, #140	@ 0x8c
 8002baa:	2122      	movs	r1, #34	@ 0x22
 8002bac:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bae:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bb8:	2301      	movs	r3, #1
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bda:	f383 8810 	msr	PRIMASK, r3
}
 8002bde:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	059b      	lsls	r3, r3, #22
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d150      	bne.n	8002c8e <UART_Start_Receive_IT+0x19a>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2268      	movs	r2, #104	@ 0x68
 8002bf0:	5a9b      	ldrh	r3, [r3, r2]
 8002bf2:	1dba      	adds	r2, r7, #6
 8002bf4:	8812      	ldrh	r2, [r2, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d349      	bcc.n	8002c8e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	015b      	lsls	r3, r3, #5
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d107      	bne.n	8002c16 <UART_Start_Receive_IT+0x122>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a46      	ldr	r2, [pc, #280]	@ (8002d2c <UART_Start_Receive_IT+0x238>)
 8002c12:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c14:	e002      	b.n	8002c1c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a45      	ldr	r2, [pc, #276]	@ (8002d30 <UART_Start_Receive_IT+0x23c>)
 8002c1a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d019      	beq.n	8002c58 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c24:	f3ef 8310 	mrs	r3, PRIMASK
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c2e:	2301      	movs	r3, #1
 8002c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	46c0      	nop			@ (mov r8, r8)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	@ 0x80
 8002c46:	0049      	lsls	r1, r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c58:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c62:	2301      	movs	r3, #1
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2180      	movs	r1, #128	@ 0x80
 8002c7a:	0549      	lsls	r1, r1, #21
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	f383 8810 	msr	PRIMASK, r3
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	e047      	b.n	8002d1e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	015b      	lsls	r3, r3, #5
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d107      	bne.n	8002caa <UART_Start_Receive_IT+0x1b6>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a23      	ldr	r2, [pc, #140]	@ (8002d34 <UART_Start_Receive_IT+0x240>)
 8002ca6:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ca8:	e002      	b.n	8002cb0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <UART_Start_Receive_IT+0x244>)
 8002cae:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d019      	beq.n	8002cec <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cbe:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2190      	movs	r1, #144	@ 0x90
 8002cda:	0049      	lsls	r1, r1, #1
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	e018      	b.n	8002d1e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cec:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8002cf2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f383 8810 	msr	PRIMASK, r3
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2120      	movs	r1, #32
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f383 8810 	msr	PRIMASK, r3
}
 8002d1c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b018      	add	sp, #96	@ 0x60
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	000001ff 	.word	0x000001ff
 8002d2c:	08003531 	.word	0x08003531
 8002d30:	08003201 	.word	0x08003201
 8002d34:	08003049 	.word	0x08003049
 8002d38:	08002e91 	.word	0x08002e91

08002d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	@ 0x38
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d44:	f3ef 8310 	mrs	r3, PRIMASK
 8002d48:	617b      	str	r3, [r7, #20]
  return(result);
 8002d4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f383 8810 	msr	PRIMASK, r3
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4926      	ldr	r1, [pc, #152]	@ (8002e00 <UART_EndRxTransfer+0xc4>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d76:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7a:	623b      	str	r3, [r7, #32]
  return(result);
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d80:	2301      	movs	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	f383 8810 	msr	PRIMASK, r3
}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	491b      	ldr	r1, [pc, #108]	@ (8002e04 <UART_EndRxTransfer+0xc8>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d118      	bne.n	8002de2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db0:	f3ef 8310 	mrs	r3, PRIMASK
 8002db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002db6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dba:	2301      	movs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f383 8810 	msr	PRIMASK, r3
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	438a      	bics	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f383 8810 	msr	PRIMASK, r3
}
 8002de0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	228c      	movs	r2, #140	@ 0x8c
 8002de6:	2120      	movs	r1, #32
 8002de8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b00e      	add	sp, #56	@ 0x38
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	fffffedf 	.word	0xfffffedf
 8002e04:	effffffe 	.word	0xeffffffe

08002e08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	225e      	movs	r2, #94	@ 0x5e
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2256      	movs	r2, #86	@ 0x56
 8002e22:	2100      	movs	r1, #0
 8002e24:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7ff fadd 	bl	80023e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e44:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2140      	movs	r1, #64	@ 0x40
 8002e60:	438a      	bics	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2288      	movs	r2, #136	@ 0x88
 8002e74:	2120      	movs	r1, #32
 8002e76:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff faa9 	bl	80023d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b006      	add	sp, #24
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b094      	sub	sp, #80	@ 0x50
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002e98:	204e      	movs	r0, #78	@ 0x4e
 8002e9a:	183b      	adds	r3, r7, r0
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	2160      	movs	r1, #96	@ 0x60
 8002ea0:	5a52      	ldrh	r2, [r2, r1]
 8002ea2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	228c      	movs	r2, #140	@ 0x8c
 8002ea8:	589b      	ldr	r3, [r3, r2]
 8002eaa:	2b22      	cmp	r3, #34	@ 0x22
 8002eac:	d000      	beq.n	8002eb0 <UART_RxISR_8BIT+0x20>
 8002eae:	e0ba      	b.n	8003026 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eb6:	214c      	movs	r1, #76	@ 0x4c
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b2d9      	uxtb	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	400a      	ands	r2, r1
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	225e      	movs	r2, #94	@ 0x5e
 8002ee0:	5a9b      	ldrh	r3, [r3, r2]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b299      	uxth	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	225e      	movs	r2, #94	@ 0x5e
 8002eec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	225e      	movs	r2, #94	@ 0x5e
 8002ef2:	5a9b      	ldrh	r3, [r3, r2]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d000      	beq.n	8002efc <UART_RxISR_8BIT+0x6c>
 8002efa:	e09c      	b.n	8003036 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efc:	f3ef 8310 	mrs	r3, PRIMASK
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f06:	2301      	movs	r3, #1
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0c:	f383 8810 	msr	PRIMASK, r3
}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4948      	ldr	r1, [pc, #288]	@ (8003040 <UART_RxISR_8BIT+0x1b0>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f38:	2301      	movs	r3, #1
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	f383 8810 	msr	PRIMASK, r3
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	438a      	bics	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	228c      	movs	r2, #140	@ 0x8c
 8002f64:	2120      	movs	r1, #32
 8002f66:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d018      	beq.n	8002fb4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f82:	f3ef 8310 	mrs	r3, PRIMASK
 8002f86:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f88:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4928      	ldr	r1, [pc, #160]	@ (8003044 <UART_RxISR_8BIT+0x1b4>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002faa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f383 8810 	msr	PRIMASK, r3
}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d12f      	bne.n	800301c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fc8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fcc:	2301      	movs	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f383 8810 	msr	PRIMASK, r3
}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	438a      	bics	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f383 8810 	msr	PRIMASK, r3
}
 8002ff2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d103      	bne.n	800300a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2210      	movs	r2, #16
 8003008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	225c      	movs	r2, #92	@ 0x5c
 800300e:	5a9a      	ldrh	r2, [r3, r2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff f9ef 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800301a:	e00c      	b.n	8003036 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0018      	movs	r0, r3
 8003020:	f7fd fb7a 	bl	8000718 <HAL_UART_RxCpltCallback>
}
 8003024:	e007      	b.n	8003036 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2108      	movs	r1, #8
 8003032:	430a      	orrs	r2, r1
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b014      	add	sp, #80	@ 0x50
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	fffffedf 	.word	0xfffffedf
 8003044:	fbffffff 	.word	0xfbffffff

08003048 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b094      	sub	sp, #80	@ 0x50
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003050:	204e      	movs	r0, #78	@ 0x4e
 8003052:	183b      	adds	r3, r7, r0
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	2160      	movs	r1, #96	@ 0x60
 8003058:	5a52      	ldrh	r2, [r2, r1]
 800305a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	228c      	movs	r2, #140	@ 0x8c
 8003060:	589b      	ldr	r3, [r3, r2]
 8003062:	2b22      	cmp	r3, #34	@ 0x22
 8003064:	d000      	beq.n	8003068 <UART_RxISR_16BIT+0x20>
 8003066:	e0ba      	b.n	80031de <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306e:	214c      	movs	r1, #76	@ 0x4c
 8003070:	187b      	adds	r3, r7, r1
 8003072:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800307a:	187b      	adds	r3, r7, r1
 800307c:	183a      	adds	r2, r7, r0
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	4013      	ands	r3, r2
 8003084:	b29a      	uxth	r2, r3
 8003086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308e:	1c9a      	adds	r2, r3, #2
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	225e      	movs	r2, #94	@ 0x5e
 8003098:	5a9b      	ldrh	r3, [r3, r2]
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b299      	uxth	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	225e      	movs	r2, #94	@ 0x5e
 80030a4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	225e      	movs	r2, #94	@ 0x5e
 80030aa:	5a9b      	ldrh	r3, [r3, r2]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d000      	beq.n	80030b4 <UART_RxISR_16BIT+0x6c>
 80030b2:	e09c      	b.n	80031ee <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b4:	f3ef 8310 	mrs	r3, PRIMASK
 80030b8:	623b      	str	r3, [r7, #32]
  return(result);
 80030ba:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030be:	2301      	movs	r3, #1
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			@ (mov r8, r8)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4948      	ldr	r1, [pc, #288]	@ (80031f8 <UART_RxISR_16BIT+0x1b0>)
 80030d6:	400a      	ands	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e0:	f383 8810 	msr	PRIMASK, r3
}
 80030e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80030f0:	2301      	movs	r3, #1
 80030f2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	f383 8810 	msr	PRIMASK, r3
}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	438a      	bics	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800310e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	f383 8810 	msr	PRIMASK, r3
}
 8003116:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	228c      	movs	r2, #140	@ 0x8c
 800311c:	2120      	movs	r1, #32
 800311e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	4013      	ands	r3, r2
 8003138:	d018      	beq.n	800316c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313a:	f3ef 8310 	mrs	r3, PRIMASK
 800313e:	617b      	str	r3, [r7, #20]
  return(result);
 8003140:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003144:	2301      	movs	r3, #1
 8003146:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f383 8810 	msr	PRIMASK, r3
}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4928      	ldr	r1, [pc, #160]	@ (80031fc <UART_RxISR_16BIT+0x1b4>)
 800315c:	400a      	ands	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003162:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d12f      	bne.n	80031d4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317a:	f3ef 8310 	mrs	r3, PRIMASK
 800317e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003180:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003184:	2301      	movs	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2110      	movs	r1, #16
 800319c:	438a      	bics	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f383 8810 	msr	PRIMASK, r3
}
 80031aa:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2210      	movs	r2, #16
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d103      	bne.n	80031c2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2210      	movs	r2, #16
 80031c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	225c      	movs	r2, #92	@ 0x5c
 80031c6:	5a9a      	ldrh	r2, [r3, r2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0011      	movs	r1, r2
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff f913 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031d2:	e00c      	b.n	80031ee <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7fd fa9e 	bl	8000718 <HAL_UART_RxCpltCallback>
}
 80031dc:	e007      	b.n	80031ee <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2108      	movs	r1, #8
 80031ea:	430a      	orrs	r2, r1
 80031ec:	619a      	str	r2, [r3, #24]
}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b014      	add	sp, #80	@ 0x50
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	fffffedf 	.word	0xfffffedf
 80031fc:	fbffffff 	.word	0xfbffffff

08003200 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b0a0      	sub	sp, #128	@ 0x80
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003208:	237a      	movs	r3, #122	@ 0x7a
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	2160      	movs	r1, #96	@ 0x60
 8003210:	5a52      	ldrh	r2, [r2, r1]
 8003212:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	228c      	movs	r2, #140	@ 0x8c
 8003230:	589b      	ldr	r3, [r3, r2]
 8003232:	2b22      	cmp	r3, #34	@ 0x22
 8003234:	d000      	beq.n	8003238 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003236:	e165      	b.n	8003504 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003238:	236e      	movs	r3, #110	@ 0x6e
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	2168      	movs	r1, #104	@ 0x68
 8003240:	5a52      	ldrh	r2, [r2, r1]
 8003242:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003244:	e10c      	b.n	8003460 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800324c:	216c      	movs	r1, #108	@ 0x6c
 800324e:	187b      	adds	r3, r7, r1
 8003250:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003252:	187b      	adds	r3, r7, r1
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	237a      	movs	r3, #122	@ 0x7a
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b2d9      	uxtb	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	400a      	ands	r2, r1
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	225e      	movs	r2, #94	@ 0x5e
 8003278:	5a9b      	ldrh	r3, [r3, r2]
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b299      	uxth	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	225e      	movs	r2, #94	@ 0x5e
 8003284:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800328e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003290:	2207      	movs	r2, #7
 8003292:	4013      	ands	r3, r2
 8003294:	d049      	beq.n	800332a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003296:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003298:	2201      	movs	r2, #1
 800329a:	4013      	ands	r3, r2
 800329c:	d010      	beq.n	80032c0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800329e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	d00b      	beq.n	80032c0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2290      	movs	r2, #144	@ 0x90
 80032b4:	589b      	ldr	r3, [r3, r2]
 80032b6:	2201      	movs	r2, #1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2190      	movs	r1, #144	@ 0x90
 80032be:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032c2:	2202      	movs	r2, #2
 80032c4:	4013      	ands	r3, r2
 80032c6:	d00f      	beq.n	80032e8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80032c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ca:	2201      	movs	r2, #1
 80032cc:	4013      	ands	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2202      	movs	r2, #2
 80032d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2290      	movs	r2, #144	@ 0x90
 80032dc:	589b      	ldr	r3, [r3, r2]
 80032de:	2204      	movs	r2, #4
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2190      	movs	r1, #144	@ 0x90
 80032e6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ea:	2204      	movs	r2, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	d00f      	beq.n	8003310 <UART_RxISR_8BIT_FIFOEN+0x110>
 80032f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032f2:	2201      	movs	r2, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	d00b      	beq.n	8003310 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2204      	movs	r2, #4
 80032fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2290      	movs	r2, #144	@ 0x90
 8003304:	589b      	ldr	r3, [r3, r2]
 8003306:	2202      	movs	r2, #2
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2190      	movs	r1, #144	@ 0x90
 800330e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2290      	movs	r2, #144	@ 0x90
 8003314:	589b      	ldr	r3, [r3, r2]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff f863 	bl	80023e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2290      	movs	r2, #144	@ 0x90
 8003326:	2100      	movs	r1, #0
 8003328:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	225e      	movs	r2, #94	@ 0x5e
 800332e:	5a9b      	ldrh	r3, [r3, r2]
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d000      	beq.n	8003338 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003336:	e093      	b.n	8003460 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003338:	f3ef 8310 	mrs	r3, PRIMASK
 800333c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800333e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003342:	2301      	movs	r3, #1
 8003344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003348:	f383 8810 	msr	PRIMASK, r3
}
 800334c:	46c0      	nop			@ (mov r8, r8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4970      	ldr	r1, [pc, #448]	@ (800351c <UART_RxISR_8BIT_FIFOEN+0x31c>)
 800335a:	400a      	ands	r2, r1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003360:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336a:	f3ef 8310 	mrs	r3, PRIMASK
 800336e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8003370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003372:	667b      	str	r3, [r7, #100]	@ 0x64
 8003374:	2301      	movs	r3, #1
 8003376:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4965      	ldr	r1, [pc, #404]	@ (8003520 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800338c:	400a      	ands	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	228c      	movs	r2, #140	@ 0x8c
 80033a0:	2120      	movs	r1, #32
 80033a2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	4013      	ands	r3, r2
 80033bc:	d018      	beq.n	80033f0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80033c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033c8:	2301      	movs	r3, #1
 80033ca:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4951      	ldr	r1, [pc, #324]	@ (8003524 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d12f      	bne.n	8003458 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	623b      	str	r3, [r7, #32]
  return(result);
 8003404:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003408:	2301      	movs	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2110      	movs	r1, #16
 8003420:	438a      	bics	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2210      	movs	r2, #16
 8003438:	4013      	ands	r3, r2
 800343a:	2b10      	cmp	r3, #16
 800343c:	d103      	bne.n	8003446 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2210      	movs	r2, #16
 8003444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	225c      	movs	r2, #92	@ 0x5c
 800344a:	5a9a      	ldrh	r2, [r3, r2]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f7fe ffd1 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
 8003456:	e003      	b.n	8003460 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd f95c 	bl	8000718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003460:	236e      	movs	r3, #110	@ 0x6e
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <UART_RxISR_8BIT_FIFOEN+0x274>
 800346a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800346c:	2220      	movs	r2, #32
 800346e:	4013      	ands	r3, r2
 8003470:	d000      	beq.n	8003474 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003472:	e6e8      	b.n	8003246 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003474:	205a      	movs	r0, #90	@ 0x5a
 8003476:	183b      	adds	r3, r7, r0
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	215e      	movs	r1, #94	@ 0x5e
 800347c:	5a52      	ldrh	r2, [r2, r1]
 800347e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003480:	0001      	movs	r1, r0
 8003482:	187b      	adds	r3, r7, r1
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d044      	beq.n	8003514 <UART_RxISR_8BIT_FIFOEN+0x314>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2268      	movs	r2, #104	@ 0x68
 800348e:	5a9b      	ldrh	r3, [r3, r2]
 8003490:	187a      	adds	r2, r7, r1
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d23d      	bcs.n	8003514 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003498:	f3ef 8310 	mrs	r3, PRIMASK
 800349c:	60bb      	str	r3, [r7, #8]
  return(result);
 800349e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80034a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a2:	2301      	movs	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f383 8810 	msr	PRIMASK, r3
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	491b      	ldr	r1, [pc, #108]	@ (8003528 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80034ba:	400a      	ands	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a17      	ldr	r2, [pc, #92]	@ (800352c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80034ce:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d0:	f3ef 8310 	mrs	r3, PRIMASK
 80034d4:	617b      	str	r3, [r7, #20]
  return(result);
 80034d6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80034d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80034da:	2301      	movs	r3, #1
 80034dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2120      	movs	r1, #32
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f383 8810 	msr	PRIMASK, r3
}
 8003500:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003502:	e007      	b.n	8003514 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2108      	movs	r1, #8
 8003510:	430a      	orrs	r2, r1
 8003512:	619a      	str	r2, [r3, #24]
}
 8003514:	46c0      	nop			@ (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b020      	add	sp, #128	@ 0x80
 800351a:	bd80      	pop	{r7, pc}
 800351c:	fffffeff 	.word	0xfffffeff
 8003520:	effffffe 	.word	0xeffffffe
 8003524:	fbffffff 	.word	0xfbffffff
 8003528:	efffffff 	.word	0xefffffff
 800352c:	08002e91 	.word	0x08002e91

08003530 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0a2      	sub	sp, #136	@ 0x88
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003538:	2382      	movs	r3, #130	@ 0x82
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	2160      	movs	r1, #96	@ 0x60
 8003540:	5a52      	ldrh	r2, [r2, r1]
 8003542:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2284      	movs	r2, #132	@ 0x84
 800354c:	18ba      	adds	r2, r7, r2
 800354e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	228c      	movs	r2, #140	@ 0x8c
 8003564:	589b      	ldr	r3, [r3, r2]
 8003566:	2b22      	cmp	r3, #34	@ 0x22
 8003568:	d000      	beq.n	800356c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800356a:	e16f      	b.n	800384c <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800356c:	2376      	movs	r3, #118	@ 0x76
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	2168      	movs	r1, #104	@ 0x68
 8003574:	5a52      	ldrh	r2, [r2, r1]
 8003576:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003578:	e114      	b.n	80037a4 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003580:	2174      	movs	r1, #116	@ 0x74
 8003582:	187b      	adds	r3, r7, r1
 8003584:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800358c:	187b      	adds	r3, r7, r1
 800358e:	2282      	movs	r2, #130	@ 0x82
 8003590:	18ba      	adds	r2, r7, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	4013      	ands	r3, r2
 8003598:	b29a      	uxth	r2, r3
 800359a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800359c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	225e      	movs	r2, #94	@ 0x5e
 80035ac:	5a9b      	ldrh	r3, [r3, r2]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b299      	uxth	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	225e      	movs	r2, #94	@ 0x5e
 80035b8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2184      	movs	r1, #132	@ 0x84
 80035c2:	187a      	adds	r2, r7, r1
 80035c4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2207      	movs	r2, #7
 80035cc:	4013      	ands	r3, r2
 80035ce:	d04e      	beq.n	800366e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2201      	movs	r2, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	d010      	beq.n	80035fc <UART_RxISR_16BIT_FIFOEN+0xcc>
 80035da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4013      	ands	r3, r2
 80035e2:	d00b      	beq.n	80035fc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2201      	movs	r2, #1
 80035ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2290      	movs	r2, #144	@ 0x90
 80035f0:	589b      	ldr	r3, [r3, r2]
 80035f2:	2201      	movs	r2, #1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2190      	movs	r1, #144	@ 0x90
 80035fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035fc:	2384      	movs	r3, #132	@ 0x84
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2202      	movs	r2, #2
 8003604:	4013      	ands	r3, r2
 8003606:	d00f      	beq.n	8003628 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800360a:	2201      	movs	r2, #1
 800360c:	4013      	ands	r3, r2
 800360e:	d00b      	beq.n	8003628 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2202      	movs	r2, #2
 8003616:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2290      	movs	r2, #144	@ 0x90
 800361c:	589b      	ldr	r3, [r3, r2]
 800361e:	2204      	movs	r2, #4
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2190      	movs	r1, #144	@ 0x90
 8003626:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003628:	2384      	movs	r3, #132	@ 0x84
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2204      	movs	r2, #4
 8003630:	4013      	ands	r3, r2
 8003632:	d00f      	beq.n	8003654 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003636:	2201      	movs	r2, #1
 8003638:	4013      	ands	r3, r2
 800363a:	d00b      	beq.n	8003654 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2204      	movs	r2, #4
 8003642:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2290      	movs	r2, #144	@ 0x90
 8003648:	589b      	ldr	r3, [r3, r2]
 800364a:	2202      	movs	r2, #2
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2190      	movs	r1, #144	@ 0x90
 8003652:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2290      	movs	r2, #144	@ 0x90
 8003658:	589b      	ldr	r3, [r3, r2]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f7fe fec1 	bl	80023e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2290      	movs	r2, #144	@ 0x90
 800366a:	2100      	movs	r1, #0
 800366c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	225e      	movs	r2, #94	@ 0x5e
 8003672:	5a9b      	ldrh	r3, [r3, r2]
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d000      	beq.n	800367c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800367a:	e093      	b.n	80037a4 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367c:	f3ef 8310 	mrs	r3, PRIMASK
 8003680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003684:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003686:	2301      	movs	r3, #1
 8003688:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4971      	ldr	r1, [pc, #452]	@ (8003864 <UART_RxISR_16BIT_FIFOEN+0x334>)
 800369e:	400a      	ands	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ae:	f3ef 8310 	mrs	r3, PRIMASK
 80036b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80036b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036b8:	2301      	movs	r3, #1
 80036ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4966      	ldr	r1, [pc, #408]	@ (8003868 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036d6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	228c      	movs	r2, #140	@ 0x8c
 80036e4:	2120      	movs	r1, #32
 80036e6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	2380      	movs	r3, #128	@ 0x80
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	4013      	ands	r3, r2
 8003700:	d018      	beq.n	8003734 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003702:	f3ef 8310 	mrs	r3, PRIMASK
 8003706:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800370a:	667b      	str	r3, [r7, #100]	@ 0x64
 800370c:	2301      	movs	r3, #1
 800370e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	f383 8810 	msr	PRIMASK, r3
}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4952      	ldr	r1, [pc, #328]	@ (800386c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003724:	400a      	ands	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d12f      	bne.n	800379c <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003742:	f3ef 8310 	mrs	r3, PRIMASK
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374a:	663b      	str	r3, [r7, #96]	@ 0x60
 800374c:	2301      	movs	r3, #1
 800374e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2110      	movs	r1, #16
 8003764:	438a      	bics	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2210      	movs	r2, #16
 800377c:	4013      	ands	r3, r2
 800377e:	2b10      	cmp	r3, #16
 8003780:	d103      	bne.n	800378a <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2210      	movs	r2, #16
 8003788:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	225c      	movs	r2, #92	@ 0x5c
 800378e:	5a9a      	ldrh	r2, [r3, r2]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0011      	movs	r1, r2
 8003794:	0018      	movs	r0, r3
 8003796:	f7fe fe2f 	bl	80023f8 <HAL_UARTEx_RxEventCallback>
 800379a:	e003      	b.n	80037a4 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fc ffba 	bl	8000718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80037a4:	2376      	movs	r3, #118	@ 0x76
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <UART_RxISR_16BIT_FIFOEN+0x28c>
 80037ae:	2384      	movs	r3, #132	@ 0x84
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2220      	movs	r2, #32
 80037b6:	4013      	ands	r3, r2
 80037b8:	d000      	beq.n	80037bc <UART_RxISR_16BIT_FIFOEN+0x28c>
 80037ba:	e6de      	b.n	800357a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80037bc:	205e      	movs	r0, #94	@ 0x5e
 80037be:	183b      	adds	r3, r7, r0
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	215e      	movs	r1, #94	@ 0x5e
 80037c4:	5a52      	ldrh	r2, [r2, r1]
 80037c6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80037c8:	0001      	movs	r1, r0
 80037ca:	187b      	adds	r3, r7, r1
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d044      	beq.n	800385c <UART_RxISR_16BIT_FIFOEN+0x32c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2268      	movs	r2, #104	@ 0x68
 80037d6:	5a9b      	ldrh	r3, [r3, r2]
 80037d8:	187a      	adds	r2, r7, r1
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d23d      	bcs.n	800385c <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80037e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ea:	2301      	movs	r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	491b      	ldr	r1, [pc, #108]	@ (8003870 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003802:	400a      	ands	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003808:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a17      	ldr	r2, [pc, #92]	@ (8003874 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003816:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	61bb      	str	r3, [r7, #24]
  return(result);
 800381e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003820:	657b      	str	r3, [r7, #84]	@ 0x54
 8003822:	2301      	movs	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2120      	movs	r1, #32
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800384a:	e007      	b.n	800385c <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2108      	movs	r1, #8
 8003858:	430a      	orrs	r2, r1
 800385a:	619a      	str	r2, [r3, #24]
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b022      	add	sp, #136	@ 0x88
 8003862:	bd80      	pop	{r7, pc}
 8003864:	fffffeff 	.word	0xfffffeff
 8003868:	effffffe 	.word	0xeffffffe
 800386c:	fbffffff 	.word	0xfbffffff
 8003870:	efffffff 	.word	0xefffffff
 8003874:	08003049 	.word	0x08003049

08003878 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003890:	46c0      	nop			@ (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2284      	movs	r2, #132	@ 0x84
 80038b4:	5c9b      	ldrb	r3, [r3, r2]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_UARTEx_DisableFifoMode+0x16>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e027      	b.n	800390e <HAL_UARTEx_DisableFifoMode+0x66>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2284      	movs	r2, #132	@ 0x84
 80038c2:	2101      	movs	r1, #1
 80038c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2288      	movs	r2, #136	@ 0x88
 80038ca:	2124      	movs	r1, #36	@ 0x24
 80038cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	438a      	bics	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003918 <HAL_UARTEx_DisableFifoMode+0x70>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2288      	movs	r2, #136	@ 0x88
 8003900:	2120      	movs	r1, #32
 8003902:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2284      	movs	r2, #132	@ 0x84
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b004      	add	sp, #16
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	dfffffff 	.word	0xdfffffff

0800391c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2284      	movs	r2, #132	@ 0x84
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003930:	2302      	movs	r3, #2
 8003932:	e02e      	b.n	8003992 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2284      	movs	r2, #132	@ 0x84
 8003938:	2101      	movs	r1, #1
 800393a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2288      	movs	r2, #136	@ 0x88
 8003940:	2124      	movs	r1, #36	@ 0x24
 8003942:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2101      	movs	r1, #1
 8003958:	438a      	bics	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	08d9      	lsrs	r1, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0018      	movs	r0, r3
 8003974:	f000 f854 	bl	8003a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2288      	movs	r2, #136	@ 0x88
 8003984:	2120      	movs	r1, #32
 8003986:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2284      	movs	r2, #132	@ 0x84
 800398c:	2100      	movs	r1, #0
 800398e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2284      	movs	r2, #132	@ 0x84
 80039aa:	5c9b      	ldrb	r3, [r3, r2]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e02f      	b.n	8003a14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2284      	movs	r2, #132	@ 0x84
 80039b8:	2101      	movs	r1, #1
 80039ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2288      	movs	r2, #136	@ 0x88
 80039c0:	2124      	movs	r1, #36	@ 0x24
 80039c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	438a      	bics	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 f813 	bl	8003a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2288      	movs	r2, #136	@ 0x88
 8003a06:	2120      	movs	r1, #32
 8003a08:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2284      	movs	r2, #132	@ 0x84
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	f1ffffff 	.word	0xf1ffffff

08003a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d108      	bne.n	8003a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	226a      	movs	r2, #106	@ 0x6a
 8003a34:	2101      	movs	r1, #1
 8003a36:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2268      	movs	r2, #104	@ 0x68
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a40:	e043      	b.n	8003aca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a42:	260f      	movs	r6, #15
 8003a44:	19bb      	adds	r3, r7, r6
 8003a46:	2208      	movs	r2, #8
 8003a48:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a4a:	200e      	movs	r0, #14
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	2208      	movs	r2, #8
 8003a50:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	0e5b      	lsrs	r3, r3, #25
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	240d      	movs	r4, #13
 8003a5e:	193b      	adds	r3, r7, r4
 8003a60:	2107      	movs	r1, #7
 8003a62:	400a      	ands	r2, r1
 8003a64:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	0f5b      	lsrs	r3, r3, #29
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	250c      	movs	r5, #12
 8003a72:	197b      	adds	r3, r7, r5
 8003a74:	2107      	movs	r1, #7
 8003a76:	400a      	ands	r2, r1
 8003a78:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	197a      	adds	r2, r7, r5
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	4914      	ldr	r1, [pc, #80]	@ (8003ad4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a84:	5c8a      	ldrb	r2, [r1, r2]
 8003a86:	435a      	muls	r2, r3
 8003a88:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a8a:	197b      	adds	r3, r7, r5
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ad8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003a90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a92:	0019      	movs	r1, r3
 8003a94:	f7fc fbd0 	bl	8000238 <__divsi3>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	b299      	uxth	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	226a      	movs	r2, #106	@ 0x6a
 8003aa0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aa2:	19bb      	adds	r3, r7, r6
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	193a      	adds	r2, r7, r4
 8003aa8:	7812      	ldrb	r2, [r2, #0]
 8003aaa:	490a      	ldr	r1, [pc, #40]	@ (8003ad4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003aac:	5c8a      	ldrb	r2, [r1, r2]
 8003aae:	435a      	muls	r2, r3
 8003ab0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	4a08      	ldr	r2, [pc, #32]	@ (8003ad8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ab8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aba:	0019      	movs	r1, r3
 8003abc:	f7fc fbbc 	bl	8000238 <__divsi3>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	b299      	uxth	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2268      	movs	r2, #104	@ 0x68
 8003ac8:	5299      	strh	r1, [r3, r2]
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b005      	add	sp, #20
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	0800476c 	.word	0x0800476c
 8003ad8:	08004774 	.word	0x08004774

08003adc <LL_GPIO_SetPinMode>:
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6819      	ldr	r1, [r3, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	435b      	muls	r3, r3
 8003af0:	001a      	movs	r2, r3
 8003af2:	0013      	movs	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	43db      	mvns	r3, r3
 8003afa:	400b      	ands	r3, r1
 8003afc:	001a      	movs	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	435b      	muls	r3, r3
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	434b      	muls	r3, r1
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b004      	add	sp, #16
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <LL_GPIO_SetPinOutputType>:
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	43d2      	mvns	r2, r2
 8003b28:	401a      	ands	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	434b      	muls	r3, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <LL_GPIO_SetPinSpeed>:
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6899      	ldr	r1, [r3, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	435b      	muls	r3, r3
 8003b52:	001a      	movs	r2, r3
 8003b54:	0013      	movs	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	001a      	movs	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	435b      	muls	r3, r3
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	434b      	muls	r3, r1
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	609a      	str	r2, [r3, #8]
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b004      	add	sp, #16
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <LL_GPIO_SetPinPull>:
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68d9      	ldr	r1, [r3, #12]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	435b      	muls	r3, r3
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	189b      	adds	r3, r3, r2
 8003b92:	43db      	mvns	r3, r3
 8003b94:	400b      	ands	r3, r1
 8003b96:	001a      	movs	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	435b      	muls	r3, r3
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	434b      	muls	r3, r1
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	60da      	str	r2, [r3, #12]
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}

08003bae <LL_GPIO_SetAFPin_0_7>:
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a19      	ldr	r1, [r3, #32]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	435b      	muls	r3, r3
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4353      	muls	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	435a      	muls	r2, r3
 8003bca:	0013      	movs	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	400b      	ands	r3, r1
 8003bd4:	001a      	movs	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	435b      	muls	r3, r3
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	434b      	muls	r3, r1
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	434b      	muls	r3, r1
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	434b      	muls	r3, r1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b004      	add	sp, #16
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <LL_GPIO_SetAFPin_8_15>:
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	0a12      	lsrs	r2, r2, #8
 8003c0c:	4353      	muls	r3, r2
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	0a12      	lsrs	r2, r2, #8
 8003c12:	4353      	muls	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	0a12      	lsrs	r2, r2, #8
 8003c18:	435a      	muls	r2, r3
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	43db      	mvns	r3, r3
 8003c22:	400b      	ands	r3, r1
 8003c24:	001a      	movs	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	0a09      	lsrs	r1, r1, #8
 8003c2e:	434b      	muls	r3, r1
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	0a09      	lsrs	r1, r1, #8
 8003c34:	434b      	muls	r3, r1
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	0a09      	lsrs	r1, r1, #8
 8003c3a:	434b      	muls	r3, r1
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	434b      	muls	r3, r1
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b004      	add	sp, #16
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003c5c:	e047      	b.n	8003cee <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4091      	lsls	r1, r2
 8003c68:	000a      	movs	r2, r1
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d039      	beq.n	8003ce8 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d003      	beq.n	8003c84 <LL_GPIO_Init+0x36>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d10d      	bne.n	8003ca0 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff ff56 	bl	8003b3e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff ff3a 	bl	8003b14 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff ff64 	bl	8003b76 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d111      	bne.n	8003cda <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2bff      	cmp	r3, #255	@ 0xff
 8003cba:	d807      	bhi.n	8003ccc <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7ff ff72 	bl	8003bae <LL_GPIO_SetAFPin_0_7>
 8003cca:	e006      	b.n	8003cda <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff ff8d 	bl	8003bf4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7ff fefa 	bl	8003adc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	40da      	lsrs	r2, r3
 8003cf6:	1e13      	subs	r3, r2, #0
 8003cf8:	d1b1      	bne.n	8003c5e <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b004      	add	sp, #16
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <LL_SetSystemCoreClock+0x18>)
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	20000034 	.word	0x20000034

08003d20 <siprintf>:
 8003d20:	b40e      	push	{r1, r2, r3}
 8003d22:	b500      	push	{lr}
 8003d24:	490b      	ldr	r1, [pc, #44]	@ (8003d54 <siprintf+0x34>)
 8003d26:	b09c      	sub	sp, #112	@ 0x70
 8003d28:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d2a:	9002      	str	r0, [sp, #8]
 8003d2c:	9006      	str	r0, [sp, #24]
 8003d2e:	9107      	str	r1, [sp, #28]
 8003d30:	9104      	str	r1, [sp, #16]
 8003d32:	4809      	ldr	r0, [pc, #36]	@ (8003d58 <siprintf+0x38>)
 8003d34:	4909      	ldr	r1, [pc, #36]	@ (8003d5c <siprintf+0x3c>)
 8003d36:	cb04      	ldmia	r3!, {r2}
 8003d38:	9105      	str	r1, [sp, #20]
 8003d3a:	6800      	ldr	r0, [r0, #0]
 8003d3c:	a902      	add	r1, sp, #8
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	f000 f9b4 	bl	80040ac <_svfiprintf_r>
 8003d44:	2200      	movs	r2, #0
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	b01c      	add	sp, #112	@ 0x70
 8003d4c:	bc08      	pop	{r3}
 8003d4e:	b003      	add	sp, #12
 8003d50:	4718      	bx	r3
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	7fffffff 	.word	0x7fffffff
 8003d58:	20000040 	.word	0x20000040
 8003d5c:	ffff0208 	.word	0xffff0208

08003d60 <memset>:
 8003d60:	0003      	movs	r3, r0
 8003d62:	1882      	adds	r2, r0, r2
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d100      	bne.n	8003d6a <memset+0xa>
 8003d68:	4770      	bx	lr
 8003d6a:	7019      	strb	r1, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	e7f9      	b.n	8003d64 <memset+0x4>

08003d70 <strstr>:
 8003d70:	780a      	ldrb	r2, [r1, #0]
 8003d72:	b530      	push	{r4, r5, lr}
 8003d74:	2a00      	cmp	r2, #0
 8003d76:	d10c      	bne.n	8003d92 <strstr+0x22>
 8003d78:	bd30      	pop	{r4, r5, pc}
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d108      	bne.n	8003d90 <strstr+0x20>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	5ccc      	ldrb	r4, [r1, r3]
 8003d82:	2c00      	cmp	r4, #0
 8003d84:	d0f8      	beq.n	8003d78 <strstr+0x8>
 8003d86:	5cc5      	ldrb	r5, [r0, r3]
 8003d88:	42a5      	cmp	r5, r4
 8003d8a:	d101      	bne.n	8003d90 <strstr+0x20>
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	e7f7      	b.n	8003d80 <strstr+0x10>
 8003d90:	3001      	adds	r0, #1
 8003d92:	7803      	ldrb	r3, [r0, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <strstr+0xa>
 8003d98:	0018      	movs	r0, r3
 8003d9a:	e7ed      	b.n	8003d78 <strstr+0x8>

08003d9c <__errno>:
 8003d9c:	4b01      	ldr	r3, [pc, #4]	@ (8003da4 <__errno+0x8>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	4770      	bx	lr
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	20000040 	.word	0x20000040

08003da8 <__libc_init_array>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	2600      	movs	r6, #0
 8003dac:	4c0c      	ldr	r4, [pc, #48]	@ (8003de0 <__libc_init_array+0x38>)
 8003dae:	4d0d      	ldr	r5, [pc, #52]	@ (8003de4 <__libc_init_array+0x3c>)
 8003db0:	1b64      	subs	r4, r4, r5
 8003db2:	10a4      	asrs	r4, r4, #2
 8003db4:	42a6      	cmp	r6, r4
 8003db6:	d109      	bne.n	8003dcc <__libc_init_array+0x24>
 8003db8:	2600      	movs	r6, #0
 8003dba:	f000 fc65 	bl	8004688 <_init>
 8003dbe:	4c0a      	ldr	r4, [pc, #40]	@ (8003de8 <__libc_init_array+0x40>)
 8003dc0:	4d0a      	ldr	r5, [pc, #40]	@ (8003dec <__libc_init_array+0x44>)
 8003dc2:	1b64      	subs	r4, r4, r5
 8003dc4:	10a4      	asrs	r4, r4, #2
 8003dc6:	42a6      	cmp	r6, r4
 8003dc8:	d105      	bne.n	8003dd6 <__libc_init_array+0x2e>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	00b3      	lsls	r3, r6, #2
 8003dce:	58eb      	ldr	r3, [r5, r3]
 8003dd0:	4798      	blx	r3
 8003dd2:	3601      	adds	r6, #1
 8003dd4:	e7ee      	b.n	8003db4 <__libc_init_array+0xc>
 8003dd6:	00b3      	lsls	r3, r6, #2
 8003dd8:	58eb      	ldr	r3, [r5, r3]
 8003dda:	4798      	blx	r3
 8003ddc:	3601      	adds	r6, #1
 8003dde:	e7f2      	b.n	8003dc6 <__libc_init_array+0x1e>
 8003de0:	080047b0 	.word	0x080047b0
 8003de4:	080047b0 	.word	0x080047b0
 8003de8:	080047b4 	.word	0x080047b4
 8003dec:	080047b0 	.word	0x080047b0

08003df0 <__retarget_lock_acquire_recursive>:
 8003df0:	4770      	bx	lr

08003df2 <__retarget_lock_release_recursive>:
 8003df2:	4770      	bx	lr

08003df4 <_free_r>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	0005      	movs	r5, r0
 8003df8:	1e0c      	subs	r4, r1, #0
 8003dfa:	d010      	beq.n	8003e1e <_free_r+0x2a>
 8003dfc:	3c04      	subs	r4, #4
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da00      	bge.n	8003e06 <_free_r+0x12>
 8003e04:	18e4      	adds	r4, r4, r3
 8003e06:	0028      	movs	r0, r5
 8003e08:	f000 f8e0 	bl	8003fcc <__malloc_lock>
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e84 <_free_r+0x90>)
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <_free_r+0x2c>
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6014      	str	r4, [r2, #0]
 8003e18:	0028      	movs	r0, r5
 8003e1a:	f000 f8df 	bl	8003fdc <__malloc_unlock>
 8003e1e:	bd70      	pop	{r4, r5, r6, pc}
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d908      	bls.n	8003e36 <_free_r+0x42>
 8003e24:	6820      	ldr	r0, [r4, #0]
 8003e26:	1821      	adds	r1, r4, r0
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	d1f3      	bne.n	8003e14 <_free_r+0x20>
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	1809      	adds	r1, r1, r0
 8003e32:	6021      	str	r1, [r4, #0]
 8003e34:	e7ee      	b.n	8003e14 <_free_r+0x20>
 8003e36:	001a      	movs	r2, r3
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <_free_r+0x4e>
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	d9f9      	bls.n	8003e36 <_free_r+0x42>
 8003e42:	6811      	ldr	r1, [r2, #0]
 8003e44:	1850      	adds	r0, r2, r1
 8003e46:	42a0      	cmp	r0, r4
 8003e48:	d10b      	bne.n	8003e62 <_free_r+0x6e>
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	1809      	adds	r1, r1, r0
 8003e4e:	1850      	adds	r0, r2, r1
 8003e50:	6011      	str	r1, [r2, #0]
 8003e52:	4283      	cmp	r3, r0
 8003e54:	d1e0      	bne.n	8003e18 <_free_r+0x24>
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	1841      	adds	r1, r0, r1
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	6053      	str	r3, [r2, #4]
 8003e60:	e7da      	b.n	8003e18 <_free_r+0x24>
 8003e62:	42a0      	cmp	r0, r4
 8003e64:	d902      	bls.n	8003e6c <_free_r+0x78>
 8003e66:	230c      	movs	r3, #12
 8003e68:	602b      	str	r3, [r5, #0]
 8003e6a:	e7d5      	b.n	8003e18 <_free_r+0x24>
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	1821      	adds	r1, r4, r0
 8003e70:	428b      	cmp	r3, r1
 8003e72:	d103      	bne.n	8003e7c <_free_r+0x88>
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	1809      	adds	r1, r1, r0
 8003e7a:	6021      	str	r1, [r4, #0]
 8003e7c:	6063      	str	r3, [r4, #4]
 8003e7e:	6054      	str	r4, [r2, #4]
 8003e80:	e7ca      	b.n	8003e18 <_free_r+0x24>
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	200003b8 	.word	0x200003b8

08003e88 <sbrk_aligned>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ec8 <sbrk_aligned+0x40>)
 8003e8c:	000d      	movs	r5, r1
 8003e8e:	6831      	ldr	r1, [r6, #0]
 8003e90:	0004      	movs	r4, r0
 8003e92:	2900      	cmp	r1, #0
 8003e94:	d102      	bne.n	8003e9c <sbrk_aligned+0x14>
 8003e96:	f000 fb99 	bl	80045cc <_sbrk_r>
 8003e9a:	6030      	str	r0, [r6, #0]
 8003e9c:	0029      	movs	r1, r5
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	f000 fb94 	bl	80045cc <_sbrk_r>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d103      	bne.n	8003eb0 <sbrk_aligned+0x28>
 8003ea8:	2501      	movs	r5, #1
 8003eaa:	426d      	negs	r5, r5
 8003eac:	0028      	movs	r0, r5
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	1cc5      	adds	r5, r0, #3
 8003eb4:	439d      	bics	r5, r3
 8003eb6:	42a8      	cmp	r0, r5
 8003eb8:	d0f8      	beq.n	8003eac <sbrk_aligned+0x24>
 8003eba:	1a29      	subs	r1, r5, r0
 8003ebc:	0020      	movs	r0, r4
 8003ebe:	f000 fb85 	bl	80045cc <_sbrk_r>
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d1f2      	bne.n	8003eac <sbrk_aligned+0x24>
 8003ec6:	e7ef      	b.n	8003ea8 <sbrk_aligned+0x20>
 8003ec8:	200003b4 	.word	0x200003b4

08003ecc <_malloc_r>:
 8003ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ece:	2203      	movs	r2, #3
 8003ed0:	1ccb      	adds	r3, r1, #3
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	0005      	movs	r5, r0
 8003ed8:	001f      	movs	r7, r3
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d234      	bcs.n	8003f48 <_malloc_r+0x7c>
 8003ede:	270c      	movs	r7, #12
 8003ee0:	42b9      	cmp	r1, r7
 8003ee2:	d833      	bhi.n	8003f4c <_malloc_r+0x80>
 8003ee4:	0028      	movs	r0, r5
 8003ee6:	f000 f871 	bl	8003fcc <__malloc_lock>
 8003eea:	4e37      	ldr	r6, [pc, #220]	@ (8003fc8 <_malloc_r+0xfc>)
 8003eec:	6833      	ldr	r3, [r6, #0]
 8003eee:	001c      	movs	r4, r3
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	d12f      	bne.n	8003f54 <_malloc_r+0x88>
 8003ef4:	0039      	movs	r1, r7
 8003ef6:	0028      	movs	r0, r5
 8003ef8:	f7ff ffc6 	bl	8003e88 <sbrk_aligned>
 8003efc:	0004      	movs	r4, r0
 8003efe:	1c43      	adds	r3, r0, #1
 8003f00:	d15f      	bne.n	8003fc2 <_malloc_r+0xf6>
 8003f02:	6834      	ldr	r4, [r6, #0]
 8003f04:	9400      	str	r4, [sp, #0]
 8003f06:	9b00      	ldr	r3, [sp, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d14a      	bne.n	8003fa2 <_malloc_r+0xd6>
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	d052      	beq.n	8003fb6 <_malloc_r+0xea>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	0028      	movs	r0, r5
 8003f14:	18e3      	adds	r3, r4, r3
 8003f16:	9900      	ldr	r1, [sp, #0]
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	f000 fb57 	bl	80045cc <_sbrk_r>
 8003f1e:	9b01      	ldr	r3, [sp, #4]
 8003f20:	4283      	cmp	r3, r0
 8003f22:	d148      	bne.n	8003fb6 <_malloc_r+0xea>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	0028      	movs	r0, r5
 8003f28:	1aff      	subs	r7, r7, r3
 8003f2a:	0039      	movs	r1, r7
 8003f2c:	f7ff ffac 	bl	8003e88 <sbrk_aligned>
 8003f30:	3001      	adds	r0, #1
 8003f32:	d040      	beq.n	8003fb6 <_malloc_r+0xea>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	19db      	adds	r3, r3, r7
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	6833      	ldr	r3, [r6, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	2a00      	cmp	r2, #0
 8003f40:	d133      	bne.n	8003faa <_malloc_r+0xde>
 8003f42:	9b00      	ldr	r3, [sp, #0]
 8003f44:	6033      	str	r3, [r6, #0]
 8003f46:	e019      	b.n	8003f7c <_malloc_r+0xb0>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	dac9      	bge.n	8003ee0 <_malloc_r+0x14>
 8003f4c:	230c      	movs	r3, #12
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	2000      	movs	r0, #0
 8003f52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f54:	6821      	ldr	r1, [r4, #0]
 8003f56:	1bc9      	subs	r1, r1, r7
 8003f58:	d420      	bmi.n	8003f9c <_malloc_r+0xd0>
 8003f5a:	290b      	cmp	r1, #11
 8003f5c:	d90a      	bls.n	8003f74 <_malloc_r+0xa8>
 8003f5e:	19e2      	adds	r2, r4, r7
 8003f60:	6027      	str	r7, [r4, #0]
 8003f62:	42a3      	cmp	r3, r4
 8003f64:	d104      	bne.n	8003f70 <_malloc_r+0xa4>
 8003f66:	6032      	str	r2, [r6, #0]
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	6011      	str	r1, [r2, #0]
 8003f6c:	6053      	str	r3, [r2, #4]
 8003f6e:	e005      	b.n	8003f7c <_malloc_r+0xb0>
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	e7f9      	b.n	8003f68 <_malloc_r+0x9c>
 8003f74:	6862      	ldr	r2, [r4, #4]
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	d10e      	bne.n	8003f98 <_malloc_r+0xcc>
 8003f7a:	6032      	str	r2, [r6, #0]
 8003f7c:	0028      	movs	r0, r5
 8003f7e:	f000 f82d 	bl	8003fdc <__malloc_unlock>
 8003f82:	0020      	movs	r0, r4
 8003f84:	2207      	movs	r2, #7
 8003f86:	300b      	adds	r0, #11
 8003f88:	1d23      	adds	r3, r4, #4
 8003f8a:	4390      	bics	r0, r2
 8003f8c:	1ac2      	subs	r2, r0, r3
 8003f8e:	4298      	cmp	r0, r3
 8003f90:	d0df      	beq.n	8003f52 <_malloc_r+0x86>
 8003f92:	1a1b      	subs	r3, r3, r0
 8003f94:	50a3      	str	r3, [r4, r2]
 8003f96:	e7dc      	b.n	8003f52 <_malloc_r+0x86>
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	e7ef      	b.n	8003f7c <_malloc_r+0xb0>
 8003f9c:	0023      	movs	r3, r4
 8003f9e:	6864      	ldr	r4, [r4, #4]
 8003fa0:	e7a6      	b.n	8003ef0 <_malloc_r+0x24>
 8003fa2:	9c00      	ldr	r4, [sp, #0]
 8003fa4:	6863      	ldr	r3, [r4, #4]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	e7ad      	b.n	8003f06 <_malloc_r+0x3a>
 8003faa:	001a      	movs	r2, r3
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	42a3      	cmp	r3, r4
 8003fb0:	d1fb      	bne.n	8003faa <_malloc_r+0xde>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e7da      	b.n	8003f6c <_malloc_r+0xa0>
 8003fb6:	230c      	movs	r3, #12
 8003fb8:	0028      	movs	r0, r5
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	f000 f80e 	bl	8003fdc <__malloc_unlock>
 8003fc0:	e7c6      	b.n	8003f50 <_malloc_r+0x84>
 8003fc2:	6007      	str	r7, [r0, #0]
 8003fc4:	e7da      	b.n	8003f7c <_malloc_r+0xb0>
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	200003b8 	.word	0x200003b8

08003fcc <__malloc_lock>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	4802      	ldr	r0, [pc, #8]	@ (8003fd8 <__malloc_lock+0xc>)
 8003fd0:	f7ff ff0e 	bl	8003df0 <__retarget_lock_acquire_recursive>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	200003b0 	.word	0x200003b0

08003fdc <__malloc_unlock>:
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	4802      	ldr	r0, [pc, #8]	@ (8003fe8 <__malloc_unlock+0xc>)
 8003fe0:	f7ff ff07 	bl	8003df2 <__retarget_lock_release_recursive>
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	200003b0 	.word	0x200003b0

08003fec <__ssputs_r>:
 8003fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fee:	688e      	ldr	r6, [r1, #8]
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	001f      	movs	r7, r3
 8003ff4:	000c      	movs	r4, r1
 8003ff6:	680b      	ldr	r3, [r1, #0]
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	9203      	str	r2, [sp, #12]
 8003ffc:	42be      	cmp	r6, r7
 8003ffe:	d830      	bhi.n	8004062 <__ssputs_r+0x76>
 8004000:	210c      	movs	r1, #12
 8004002:	5e62      	ldrsh	r2, [r4, r1]
 8004004:	2190      	movs	r1, #144	@ 0x90
 8004006:	00c9      	lsls	r1, r1, #3
 8004008:	420a      	tst	r2, r1
 800400a:	d028      	beq.n	800405e <__ssputs_r+0x72>
 800400c:	2003      	movs	r0, #3
 800400e:	6921      	ldr	r1, [r4, #16]
 8004010:	1a5b      	subs	r3, r3, r1
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	6963      	ldr	r3, [r4, #20]
 8004016:	4343      	muls	r3, r0
 8004018:	9801      	ldr	r0, [sp, #4]
 800401a:	0fdd      	lsrs	r5, r3, #31
 800401c:	18ed      	adds	r5, r5, r3
 800401e:	1c7b      	adds	r3, r7, #1
 8004020:	181b      	adds	r3, r3, r0
 8004022:	106d      	asrs	r5, r5, #1
 8004024:	42ab      	cmp	r3, r5
 8004026:	d900      	bls.n	800402a <__ssputs_r+0x3e>
 8004028:	001d      	movs	r5, r3
 800402a:	0552      	lsls	r2, r2, #21
 800402c:	d528      	bpl.n	8004080 <__ssputs_r+0x94>
 800402e:	0029      	movs	r1, r5
 8004030:	9802      	ldr	r0, [sp, #8]
 8004032:	f7ff ff4b 	bl	8003ecc <_malloc_r>
 8004036:	1e06      	subs	r6, r0, #0
 8004038:	d02c      	beq.n	8004094 <__ssputs_r+0xa8>
 800403a:	9a01      	ldr	r2, [sp, #4]
 800403c:	6921      	ldr	r1, [r4, #16]
 800403e:	f000 fae2 	bl	8004606 <memcpy>
 8004042:	89a2      	ldrh	r2, [r4, #12]
 8004044:	4b18      	ldr	r3, [pc, #96]	@ (80040a8 <__ssputs_r+0xbc>)
 8004046:	401a      	ands	r2, r3
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	4313      	orrs	r3, r2
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	9b01      	ldr	r3, [sp, #4]
 8004050:	6126      	str	r6, [r4, #16]
 8004052:	18f6      	adds	r6, r6, r3
 8004054:	6026      	str	r6, [r4, #0]
 8004056:	003e      	movs	r6, r7
 8004058:	6165      	str	r5, [r4, #20]
 800405a:	1aed      	subs	r5, r5, r3
 800405c:	60a5      	str	r5, [r4, #8]
 800405e:	42be      	cmp	r6, r7
 8004060:	d900      	bls.n	8004064 <__ssputs_r+0x78>
 8004062:	003e      	movs	r6, r7
 8004064:	0032      	movs	r2, r6
 8004066:	9903      	ldr	r1, [sp, #12]
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	f000 fa9b 	bl	80045a4 <memmove>
 800406e:	2000      	movs	r0, #0
 8004070:	68a3      	ldr	r3, [r4, #8]
 8004072:	1b9b      	subs	r3, r3, r6
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	199b      	adds	r3, r3, r6
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	b005      	add	sp, #20
 800407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004080:	002a      	movs	r2, r5
 8004082:	9802      	ldr	r0, [sp, #8]
 8004084:	f000 fac8 	bl	8004618 <_realloc_r>
 8004088:	1e06      	subs	r6, r0, #0
 800408a:	d1e0      	bne.n	800404e <__ssputs_r+0x62>
 800408c:	6921      	ldr	r1, [r4, #16]
 800408e:	9802      	ldr	r0, [sp, #8]
 8004090:	f7ff feb0 	bl	8003df4 <_free_r>
 8004094:	230c      	movs	r3, #12
 8004096:	2001      	movs	r0, #1
 8004098:	9a02      	ldr	r2, [sp, #8]
 800409a:	4240      	negs	r0, r0
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	89a2      	ldrh	r2, [r4, #12]
 80040a0:	3334      	adds	r3, #52	@ 0x34
 80040a2:	4313      	orrs	r3, r2
 80040a4:	81a3      	strh	r3, [r4, #12]
 80040a6:	e7e9      	b.n	800407c <__ssputs_r+0x90>
 80040a8:	fffffb7f 	.word	0xfffffb7f

080040ac <_svfiprintf_r>:
 80040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ae:	b0a1      	sub	sp, #132	@ 0x84
 80040b0:	9003      	str	r0, [sp, #12]
 80040b2:	001d      	movs	r5, r3
 80040b4:	898b      	ldrh	r3, [r1, #12]
 80040b6:	000f      	movs	r7, r1
 80040b8:	0016      	movs	r6, r2
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	d511      	bpl.n	80040e2 <_svfiprintf_r+0x36>
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10e      	bne.n	80040e2 <_svfiprintf_r+0x36>
 80040c4:	2140      	movs	r1, #64	@ 0x40
 80040c6:	f7ff ff01 	bl	8003ecc <_malloc_r>
 80040ca:	6038      	str	r0, [r7, #0]
 80040cc:	6138      	str	r0, [r7, #16]
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d105      	bne.n	80040de <_svfiprintf_r+0x32>
 80040d2:	230c      	movs	r3, #12
 80040d4:	9a03      	ldr	r2, [sp, #12]
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	2001      	movs	r0, #1
 80040da:	4240      	negs	r0, r0
 80040dc:	e0cf      	b.n	800427e <_svfiprintf_r+0x1d2>
 80040de:	2340      	movs	r3, #64	@ 0x40
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	2300      	movs	r3, #0
 80040e4:	ac08      	add	r4, sp, #32
 80040e6:	6163      	str	r3, [r4, #20]
 80040e8:	3320      	adds	r3, #32
 80040ea:	7663      	strb	r3, [r4, #25]
 80040ec:	3310      	adds	r3, #16
 80040ee:	76a3      	strb	r3, [r4, #26]
 80040f0:	9507      	str	r5, [sp, #28]
 80040f2:	0035      	movs	r5, r6
 80040f4:	782b      	ldrb	r3, [r5, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <_svfiprintf_r+0x52>
 80040fa:	2b25      	cmp	r3, #37	@ 0x25
 80040fc:	d148      	bne.n	8004190 <_svfiprintf_r+0xe4>
 80040fe:	1bab      	subs	r3, r5, r6
 8004100:	9305      	str	r3, [sp, #20]
 8004102:	42b5      	cmp	r5, r6
 8004104:	d00b      	beq.n	800411e <_svfiprintf_r+0x72>
 8004106:	0032      	movs	r2, r6
 8004108:	0039      	movs	r1, r7
 800410a:	9803      	ldr	r0, [sp, #12]
 800410c:	f7ff ff6e 	bl	8003fec <__ssputs_r>
 8004110:	3001      	adds	r0, #1
 8004112:	d100      	bne.n	8004116 <_svfiprintf_r+0x6a>
 8004114:	e0ae      	b.n	8004274 <_svfiprintf_r+0x1c8>
 8004116:	6963      	ldr	r3, [r4, #20]
 8004118:	9a05      	ldr	r2, [sp, #20]
 800411a:	189b      	adds	r3, r3, r2
 800411c:	6163      	str	r3, [r4, #20]
 800411e:	782b      	ldrb	r3, [r5, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d100      	bne.n	8004126 <_svfiprintf_r+0x7a>
 8004124:	e0a6      	b.n	8004274 <_svfiprintf_r+0x1c8>
 8004126:	2201      	movs	r2, #1
 8004128:	2300      	movs	r3, #0
 800412a:	4252      	negs	r2, r2
 800412c:	6062      	str	r2, [r4, #4]
 800412e:	a904      	add	r1, sp, #16
 8004130:	3254      	adds	r2, #84	@ 0x54
 8004132:	1852      	adds	r2, r2, r1
 8004134:	1c6e      	adds	r6, r5, #1
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	60e3      	str	r3, [r4, #12]
 800413a:	60a3      	str	r3, [r4, #8]
 800413c:	7013      	strb	r3, [r2, #0]
 800413e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004140:	4b54      	ldr	r3, [pc, #336]	@ (8004294 <_svfiprintf_r+0x1e8>)
 8004142:	2205      	movs	r2, #5
 8004144:	0018      	movs	r0, r3
 8004146:	7831      	ldrb	r1, [r6, #0]
 8004148:	9305      	str	r3, [sp, #20]
 800414a:	f000 fa51 	bl	80045f0 <memchr>
 800414e:	1c75      	adds	r5, r6, #1
 8004150:	2800      	cmp	r0, #0
 8004152:	d11f      	bne.n	8004194 <_svfiprintf_r+0xe8>
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	06d3      	lsls	r3, r2, #27
 8004158:	d504      	bpl.n	8004164 <_svfiprintf_r+0xb8>
 800415a:	2353      	movs	r3, #83	@ 0x53
 800415c:	a904      	add	r1, sp, #16
 800415e:	185b      	adds	r3, r3, r1
 8004160:	2120      	movs	r1, #32
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	0713      	lsls	r3, r2, #28
 8004166:	d504      	bpl.n	8004172 <_svfiprintf_r+0xc6>
 8004168:	2353      	movs	r3, #83	@ 0x53
 800416a:	a904      	add	r1, sp, #16
 800416c:	185b      	adds	r3, r3, r1
 800416e:	212b      	movs	r1, #43	@ 0x2b
 8004170:	7019      	strb	r1, [r3, #0]
 8004172:	7833      	ldrb	r3, [r6, #0]
 8004174:	2b2a      	cmp	r3, #42	@ 0x2a
 8004176:	d016      	beq.n	80041a6 <_svfiprintf_r+0xfa>
 8004178:	0035      	movs	r5, r6
 800417a:	2100      	movs	r1, #0
 800417c:	200a      	movs	r0, #10
 800417e:	68e3      	ldr	r3, [r4, #12]
 8004180:	782a      	ldrb	r2, [r5, #0]
 8004182:	1c6e      	adds	r6, r5, #1
 8004184:	3a30      	subs	r2, #48	@ 0x30
 8004186:	2a09      	cmp	r2, #9
 8004188:	d950      	bls.n	800422c <_svfiprintf_r+0x180>
 800418a:	2900      	cmp	r1, #0
 800418c:	d111      	bne.n	80041b2 <_svfiprintf_r+0x106>
 800418e:	e017      	b.n	80041c0 <_svfiprintf_r+0x114>
 8004190:	3501      	adds	r5, #1
 8004192:	e7af      	b.n	80040f4 <_svfiprintf_r+0x48>
 8004194:	9b05      	ldr	r3, [sp, #20]
 8004196:	6822      	ldr	r2, [r4, #0]
 8004198:	1ac0      	subs	r0, r0, r3
 800419a:	2301      	movs	r3, #1
 800419c:	4083      	lsls	r3, r0
 800419e:	4313      	orrs	r3, r2
 80041a0:	002e      	movs	r6, r5
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	e7cc      	b.n	8004140 <_svfiprintf_r+0x94>
 80041a6:	9b07      	ldr	r3, [sp, #28]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	9107      	str	r1, [sp, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db01      	blt.n	80041b6 <_svfiprintf_r+0x10a>
 80041b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041b4:	e004      	b.n	80041c0 <_svfiprintf_r+0x114>
 80041b6:	425b      	negs	r3, r3
 80041b8:	60e3      	str	r3, [r4, #12]
 80041ba:	2302      	movs	r3, #2
 80041bc:	4313      	orrs	r3, r2
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	782b      	ldrb	r3, [r5, #0]
 80041c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80041c4:	d10c      	bne.n	80041e0 <_svfiprintf_r+0x134>
 80041c6:	786b      	ldrb	r3, [r5, #1]
 80041c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80041ca:	d134      	bne.n	8004236 <_svfiprintf_r+0x18a>
 80041cc:	9b07      	ldr	r3, [sp, #28]
 80041ce:	3502      	adds	r5, #2
 80041d0:	1d1a      	adds	r2, r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	9207      	str	r2, [sp, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da01      	bge.n	80041de <_svfiprintf_r+0x132>
 80041da:	2301      	movs	r3, #1
 80041dc:	425b      	negs	r3, r3
 80041de:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e0:	4e2d      	ldr	r6, [pc, #180]	@ (8004298 <_svfiprintf_r+0x1ec>)
 80041e2:	2203      	movs	r2, #3
 80041e4:	0030      	movs	r0, r6
 80041e6:	7829      	ldrb	r1, [r5, #0]
 80041e8:	f000 fa02 	bl	80045f0 <memchr>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d006      	beq.n	80041fe <_svfiprintf_r+0x152>
 80041f0:	2340      	movs	r3, #64	@ 0x40
 80041f2:	1b80      	subs	r0, r0, r6
 80041f4:	4083      	lsls	r3, r0
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	3501      	adds	r5, #1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	7829      	ldrb	r1, [r5, #0]
 8004200:	2206      	movs	r2, #6
 8004202:	4826      	ldr	r0, [pc, #152]	@ (800429c <_svfiprintf_r+0x1f0>)
 8004204:	1c6e      	adds	r6, r5, #1
 8004206:	7621      	strb	r1, [r4, #24]
 8004208:	f000 f9f2 	bl	80045f0 <memchr>
 800420c:	2800      	cmp	r0, #0
 800420e:	d038      	beq.n	8004282 <_svfiprintf_r+0x1d6>
 8004210:	4b23      	ldr	r3, [pc, #140]	@ (80042a0 <_svfiprintf_r+0x1f4>)
 8004212:	2b00      	cmp	r3, #0
 8004214:	d122      	bne.n	800425c <_svfiprintf_r+0x1b0>
 8004216:	2207      	movs	r2, #7
 8004218:	9b07      	ldr	r3, [sp, #28]
 800421a:	3307      	adds	r3, #7
 800421c:	4393      	bics	r3, r2
 800421e:	3308      	adds	r3, #8
 8004220:	9307      	str	r3, [sp, #28]
 8004222:	6963      	ldr	r3, [r4, #20]
 8004224:	9a04      	ldr	r2, [sp, #16]
 8004226:	189b      	adds	r3, r3, r2
 8004228:	6163      	str	r3, [r4, #20]
 800422a:	e762      	b.n	80040f2 <_svfiprintf_r+0x46>
 800422c:	4343      	muls	r3, r0
 800422e:	0035      	movs	r5, r6
 8004230:	2101      	movs	r1, #1
 8004232:	189b      	adds	r3, r3, r2
 8004234:	e7a4      	b.n	8004180 <_svfiprintf_r+0xd4>
 8004236:	2300      	movs	r3, #0
 8004238:	200a      	movs	r0, #10
 800423a:	0019      	movs	r1, r3
 800423c:	3501      	adds	r5, #1
 800423e:	6063      	str	r3, [r4, #4]
 8004240:	782a      	ldrb	r2, [r5, #0]
 8004242:	1c6e      	adds	r6, r5, #1
 8004244:	3a30      	subs	r2, #48	@ 0x30
 8004246:	2a09      	cmp	r2, #9
 8004248:	d903      	bls.n	8004252 <_svfiprintf_r+0x1a6>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0c8      	beq.n	80041e0 <_svfiprintf_r+0x134>
 800424e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004250:	e7c6      	b.n	80041e0 <_svfiprintf_r+0x134>
 8004252:	4341      	muls	r1, r0
 8004254:	0035      	movs	r5, r6
 8004256:	2301      	movs	r3, #1
 8004258:	1889      	adds	r1, r1, r2
 800425a:	e7f1      	b.n	8004240 <_svfiprintf_r+0x194>
 800425c:	aa07      	add	r2, sp, #28
 800425e:	9200      	str	r2, [sp, #0]
 8004260:	0021      	movs	r1, r4
 8004262:	003a      	movs	r2, r7
 8004264:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <_svfiprintf_r+0x1f8>)
 8004266:	9803      	ldr	r0, [sp, #12]
 8004268:	e000      	b.n	800426c <_svfiprintf_r+0x1c0>
 800426a:	bf00      	nop
 800426c:	9004      	str	r0, [sp, #16]
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	3301      	adds	r3, #1
 8004272:	d1d6      	bne.n	8004222 <_svfiprintf_r+0x176>
 8004274:	89bb      	ldrh	r3, [r7, #12]
 8004276:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004278:	065b      	lsls	r3, r3, #25
 800427a:	d500      	bpl.n	800427e <_svfiprintf_r+0x1d2>
 800427c:	e72c      	b.n	80040d8 <_svfiprintf_r+0x2c>
 800427e:	b021      	add	sp, #132	@ 0x84
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004282:	aa07      	add	r2, sp, #28
 8004284:	9200      	str	r2, [sp, #0]
 8004286:	0021      	movs	r1, r4
 8004288:	003a      	movs	r2, r7
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <_svfiprintf_r+0x1f8>)
 800428c:	9803      	ldr	r0, [sp, #12]
 800428e:	f000 f87b 	bl	8004388 <_printf_i>
 8004292:	e7eb      	b.n	800426c <_svfiprintf_r+0x1c0>
 8004294:	0800477c 	.word	0x0800477c
 8004298:	08004782 	.word	0x08004782
 800429c:	08004786 	.word	0x08004786
 80042a0:	00000000 	.word	0x00000000
 80042a4:	08003fed 	.word	0x08003fed

080042a8 <_printf_common>:
 80042a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042aa:	0016      	movs	r6, r2
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	688a      	ldr	r2, [r1, #8]
 80042b0:	690b      	ldr	r3, [r1, #16]
 80042b2:	000c      	movs	r4, r1
 80042b4:	9000      	str	r0, [sp, #0]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	da00      	bge.n	80042bc <_printf_common+0x14>
 80042ba:	0013      	movs	r3, r2
 80042bc:	0022      	movs	r2, r4
 80042be:	6033      	str	r3, [r6, #0]
 80042c0:	3243      	adds	r2, #67	@ 0x43
 80042c2:	7812      	ldrb	r2, [r2, #0]
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d001      	beq.n	80042cc <_printf_common+0x24>
 80042c8:	3301      	adds	r3, #1
 80042ca:	6033      	str	r3, [r6, #0]
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	d502      	bpl.n	80042d8 <_printf_common+0x30>
 80042d2:	6833      	ldr	r3, [r6, #0]
 80042d4:	3302      	adds	r3, #2
 80042d6:	6033      	str	r3, [r6, #0]
 80042d8:	6822      	ldr	r2, [r4, #0]
 80042da:	2306      	movs	r3, #6
 80042dc:	0015      	movs	r5, r2
 80042de:	401d      	ands	r5, r3
 80042e0:	421a      	tst	r2, r3
 80042e2:	d027      	beq.n	8004334 <_printf_common+0x8c>
 80042e4:	0023      	movs	r3, r4
 80042e6:	3343      	adds	r3, #67	@ 0x43
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	4193      	sbcs	r3, r2
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	0692      	lsls	r2, r2, #26
 80042f2:	d430      	bmi.n	8004356 <_printf_common+0xae>
 80042f4:	0022      	movs	r2, r4
 80042f6:	9901      	ldr	r1, [sp, #4]
 80042f8:	9800      	ldr	r0, [sp, #0]
 80042fa:	9d08      	ldr	r5, [sp, #32]
 80042fc:	3243      	adds	r2, #67	@ 0x43
 80042fe:	47a8      	blx	r5
 8004300:	3001      	adds	r0, #1
 8004302:	d025      	beq.n	8004350 <_printf_common+0xa8>
 8004304:	2206      	movs	r2, #6
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	2500      	movs	r5, #0
 800430a:	4013      	ands	r3, r2
 800430c:	2b04      	cmp	r3, #4
 800430e:	d105      	bne.n	800431c <_printf_common+0x74>
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	68e5      	ldr	r5, [r4, #12]
 8004314:	1aed      	subs	r5, r5, r3
 8004316:	43eb      	mvns	r3, r5
 8004318:	17db      	asrs	r3, r3, #31
 800431a:	401d      	ands	r5, r3
 800431c:	68a3      	ldr	r3, [r4, #8]
 800431e:	6922      	ldr	r2, [r4, #16]
 8004320:	4293      	cmp	r3, r2
 8004322:	dd01      	ble.n	8004328 <_printf_common+0x80>
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	18ed      	adds	r5, r5, r3
 8004328:	2600      	movs	r6, #0
 800432a:	42b5      	cmp	r5, r6
 800432c:	d120      	bne.n	8004370 <_printf_common+0xc8>
 800432e:	2000      	movs	r0, #0
 8004330:	e010      	b.n	8004354 <_printf_common+0xac>
 8004332:	3501      	adds	r5, #1
 8004334:	68e3      	ldr	r3, [r4, #12]
 8004336:	6832      	ldr	r2, [r6, #0]
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	42ab      	cmp	r3, r5
 800433c:	ddd2      	ble.n	80042e4 <_printf_common+0x3c>
 800433e:	0022      	movs	r2, r4
 8004340:	2301      	movs	r3, #1
 8004342:	9901      	ldr	r1, [sp, #4]
 8004344:	9800      	ldr	r0, [sp, #0]
 8004346:	9f08      	ldr	r7, [sp, #32]
 8004348:	3219      	adds	r2, #25
 800434a:	47b8      	blx	r7
 800434c:	3001      	adds	r0, #1
 800434e:	d1f0      	bne.n	8004332 <_printf_common+0x8a>
 8004350:	2001      	movs	r0, #1
 8004352:	4240      	negs	r0, r0
 8004354:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004356:	2030      	movs	r0, #48	@ 0x30
 8004358:	18e1      	adds	r1, r4, r3
 800435a:	3143      	adds	r1, #67	@ 0x43
 800435c:	7008      	strb	r0, [r1, #0]
 800435e:	0021      	movs	r1, r4
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	3145      	adds	r1, #69	@ 0x45
 8004364:	7809      	ldrb	r1, [r1, #0]
 8004366:	18a2      	adds	r2, r4, r2
 8004368:	3243      	adds	r2, #67	@ 0x43
 800436a:	3302      	adds	r3, #2
 800436c:	7011      	strb	r1, [r2, #0]
 800436e:	e7c1      	b.n	80042f4 <_printf_common+0x4c>
 8004370:	0022      	movs	r2, r4
 8004372:	2301      	movs	r3, #1
 8004374:	9901      	ldr	r1, [sp, #4]
 8004376:	9800      	ldr	r0, [sp, #0]
 8004378:	9f08      	ldr	r7, [sp, #32]
 800437a:	321a      	adds	r2, #26
 800437c:	47b8      	blx	r7
 800437e:	3001      	adds	r0, #1
 8004380:	d0e6      	beq.n	8004350 <_printf_common+0xa8>
 8004382:	3601      	adds	r6, #1
 8004384:	e7d1      	b.n	800432a <_printf_common+0x82>
	...

08004388 <_printf_i>:
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	b08b      	sub	sp, #44	@ 0x2c
 800438c:	9206      	str	r2, [sp, #24]
 800438e:	000a      	movs	r2, r1
 8004390:	3243      	adds	r2, #67	@ 0x43
 8004392:	9307      	str	r3, [sp, #28]
 8004394:	9005      	str	r0, [sp, #20]
 8004396:	9203      	str	r2, [sp, #12]
 8004398:	7e0a      	ldrb	r2, [r1, #24]
 800439a:	000c      	movs	r4, r1
 800439c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800439e:	2a78      	cmp	r2, #120	@ 0x78
 80043a0:	d809      	bhi.n	80043b6 <_printf_i+0x2e>
 80043a2:	2a62      	cmp	r2, #98	@ 0x62
 80043a4:	d80b      	bhi.n	80043be <_printf_i+0x36>
 80043a6:	2a00      	cmp	r2, #0
 80043a8:	d100      	bne.n	80043ac <_printf_i+0x24>
 80043aa:	e0bc      	b.n	8004526 <_printf_i+0x19e>
 80043ac:	497b      	ldr	r1, [pc, #492]	@ (800459c <_printf_i+0x214>)
 80043ae:	9104      	str	r1, [sp, #16]
 80043b0:	2a58      	cmp	r2, #88	@ 0x58
 80043b2:	d100      	bne.n	80043b6 <_printf_i+0x2e>
 80043b4:	e090      	b.n	80044d8 <_printf_i+0x150>
 80043b6:	0025      	movs	r5, r4
 80043b8:	3542      	adds	r5, #66	@ 0x42
 80043ba:	702a      	strb	r2, [r5, #0]
 80043bc:	e022      	b.n	8004404 <_printf_i+0x7c>
 80043be:	0010      	movs	r0, r2
 80043c0:	3863      	subs	r0, #99	@ 0x63
 80043c2:	2815      	cmp	r0, #21
 80043c4:	d8f7      	bhi.n	80043b6 <_printf_i+0x2e>
 80043c6:	f7fb fea3 	bl	8000110 <__gnu_thumb1_case_shi>
 80043ca:	0016      	.short	0x0016
 80043cc:	fff6001f 	.word	0xfff6001f
 80043d0:	fff6fff6 	.word	0xfff6fff6
 80043d4:	001ffff6 	.word	0x001ffff6
 80043d8:	fff6fff6 	.word	0xfff6fff6
 80043dc:	fff6fff6 	.word	0xfff6fff6
 80043e0:	003600a1 	.word	0x003600a1
 80043e4:	fff60080 	.word	0xfff60080
 80043e8:	00b2fff6 	.word	0x00b2fff6
 80043ec:	0036fff6 	.word	0x0036fff6
 80043f0:	fff6fff6 	.word	0xfff6fff6
 80043f4:	0084      	.short	0x0084
 80043f6:	0025      	movs	r5, r4
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	3542      	adds	r5, #66	@ 0x42
 80043fc:	1d11      	adds	r1, r2, #4
 80043fe:	6019      	str	r1, [r3, #0]
 8004400:	6813      	ldr	r3, [r2, #0]
 8004402:	702b      	strb	r3, [r5, #0]
 8004404:	2301      	movs	r3, #1
 8004406:	e0a0      	b.n	800454a <_printf_i+0x1c2>
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	6809      	ldr	r1, [r1, #0]
 800440c:	1d02      	adds	r2, r0, #4
 800440e:	060d      	lsls	r5, r1, #24
 8004410:	d50b      	bpl.n	800442a <_printf_i+0xa2>
 8004412:	6806      	ldr	r6, [r0, #0]
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	2e00      	cmp	r6, #0
 8004418:	da03      	bge.n	8004422 <_printf_i+0x9a>
 800441a:	232d      	movs	r3, #45	@ 0x2d
 800441c:	9a03      	ldr	r2, [sp, #12]
 800441e:	4276      	negs	r6, r6
 8004420:	7013      	strb	r3, [r2, #0]
 8004422:	4b5e      	ldr	r3, [pc, #376]	@ (800459c <_printf_i+0x214>)
 8004424:	270a      	movs	r7, #10
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	e018      	b.n	800445c <_printf_i+0xd4>
 800442a:	6806      	ldr	r6, [r0, #0]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	0649      	lsls	r1, r1, #25
 8004430:	d5f1      	bpl.n	8004416 <_printf_i+0x8e>
 8004432:	b236      	sxth	r6, r6
 8004434:	e7ef      	b.n	8004416 <_printf_i+0x8e>
 8004436:	6808      	ldr	r0, [r1, #0]
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	c940      	ldmia	r1!, {r6}
 800443c:	0605      	lsls	r5, r0, #24
 800443e:	d402      	bmi.n	8004446 <_printf_i+0xbe>
 8004440:	0640      	lsls	r0, r0, #25
 8004442:	d500      	bpl.n	8004446 <_printf_i+0xbe>
 8004444:	b2b6      	uxth	r6, r6
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	4b54      	ldr	r3, [pc, #336]	@ (800459c <_printf_i+0x214>)
 800444a:	270a      	movs	r7, #10
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004450:	d100      	bne.n	8004454 <_printf_i+0xcc>
 8004452:	3f02      	subs	r7, #2
 8004454:	0023      	movs	r3, r4
 8004456:	2200      	movs	r2, #0
 8004458:	3343      	adds	r3, #67	@ 0x43
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	60a3      	str	r3, [r4, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	db03      	blt.n	800446c <_printf_i+0xe4>
 8004464:	2104      	movs	r1, #4
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	438a      	bics	r2, r1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	2e00      	cmp	r6, #0
 800446e:	d102      	bne.n	8004476 <_printf_i+0xee>
 8004470:	9d03      	ldr	r5, [sp, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <_printf_i+0x108>
 8004476:	9d03      	ldr	r5, [sp, #12]
 8004478:	0030      	movs	r0, r6
 800447a:	0039      	movs	r1, r7
 800447c:	f7fb fed8 	bl	8000230 <__aeabi_uidivmod>
 8004480:	9b04      	ldr	r3, [sp, #16]
 8004482:	3d01      	subs	r5, #1
 8004484:	5c5b      	ldrb	r3, [r3, r1]
 8004486:	702b      	strb	r3, [r5, #0]
 8004488:	0033      	movs	r3, r6
 800448a:	0006      	movs	r6, r0
 800448c:	429f      	cmp	r7, r3
 800448e:	d9f3      	bls.n	8004478 <_printf_i+0xf0>
 8004490:	2f08      	cmp	r7, #8
 8004492:	d109      	bne.n	80044a8 <_printf_i+0x120>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	07db      	lsls	r3, r3, #31
 8004498:	d506      	bpl.n	80044a8 <_printf_i+0x120>
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	dc02      	bgt.n	80044a8 <_printf_i+0x120>
 80044a2:	2330      	movs	r3, #48	@ 0x30
 80044a4:	3d01      	subs	r5, #1
 80044a6:	702b      	strb	r3, [r5, #0]
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	1b5b      	subs	r3, r3, r5
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	9b07      	ldr	r3, [sp, #28]
 80044b0:	0021      	movs	r1, r4
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	9805      	ldr	r0, [sp, #20]
 80044b6:	9b06      	ldr	r3, [sp, #24]
 80044b8:	aa09      	add	r2, sp, #36	@ 0x24
 80044ba:	f7ff fef5 	bl	80042a8 <_printf_common>
 80044be:	3001      	adds	r0, #1
 80044c0:	d148      	bne.n	8004554 <_printf_i+0x1cc>
 80044c2:	2001      	movs	r0, #1
 80044c4:	4240      	negs	r0, r0
 80044c6:	b00b      	add	sp, #44	@ 0x2c
 80044c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ca:	2220      	movs	r2, #32
 80044cc:	6809      	ldr	r1, [r1, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	6022      	str	r2, [r4, #0]
 80044d2:	2278      	movs	r2, #120	@ 0x78
 80044d4:	4932      	ldr	r1, [pc, #200]	@ (80045a0 <_printf_i+0x218>)
 80044d6:	9104      	str	r1, [sp, #16]
 80044d8:	0021      	movs	r1, r4
 80044da:	3145      	adds	r1, #69	@ 0x45
 80044dc:	700a      	strb	r2, [r1, #0]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	c940      	ldmia	r1!, {r6}
 80044e4:	0610      	lsls	r0, r2, #24
 80044e6:	d402      	bmi.n	80044ee <_printf_i+0x166>
 80044e8:	0650      	lsls	r0, r2, #25
 80044ea:	d500      	bpl.n	80044ee <_printf_i+0x166>
 80044ec:	b2b6      	uxth	r6, r6
 80044ee:	6019      	str	r1, [r3, #0]
 80044f0:	07d3      	lsls	r3, r2, #31
 80044f2:	d502      	bpl.n	80044fa <_printf_i+0x172>
 80044f4:	2320      	movs	r3, #32
 80044f6:	4313      	orrs	r3, r2
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d001      	beq.n	8004502 <_printf_i+0x17a>
 80044fe:	2710      	movs	r7, #16
 8004500:	e7a8      	b.n	8004454 <_printf_i+0xcc>
 8004502:	2220      	movs	r2, #32
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	4393      	bics	r3, r2
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	e7f8      	b.n	80044fe <_printf_i+0x176>
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	680d      	ldr	r5, [r1, #0]
 8004510:	1d10      	adds	r0, r2, #4
 8004512:	6949      	ldr	r1, [r1, #20]
 8004514:	6018      	str	r0, [r3, #0]
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	062e      	lsls	r6, r5, #24
 800451a:	d501      	bpl.n	8004520 <_printf_i+0x198>
 800451c:	6019      	str	r1, [r3, #0]
 800451e:	e002      	b.n	8004526 <_printf_i+0x19e>
 8004520:	066d      	lsls	r5, r5, #25
 8004522:	d5fb      	bpl.n	800451c <_printf_i+0x194>
 8004524:	8019      	strh	r1, [r3, #0]
 8004526:	2300      	movs	r3, #0
 8004528:	9d03      	ldr	r5, [sp, #12]
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	e7bf      	b.n	80044ae <_printf_i+0x126>
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	1d11      	adds	r1, r2, #4
 8004532:	6019      	str	r1, [r3, #0]
 8004534:	6815      	ldr	r5, [r2, #0]
 8004536:	2100      	movs	r1, #0
 8004538:	0028      	movs	r0, r5
 800453a:	6862      	ldr	r2, [r4, #4]
 800453c:	f000 f858 	bl	80045f0 <memchr>
 8004540:	2800      	cmp	r0, #0
 8004542:	d001      	beq.n	8004548 <_printf_i+0x1c0>
 8004544:	1b40      	subs	r0, r0, r5
 8004546:	6060      	str	r0, [r4, #4]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	6123      	str	r3, [r4, #16]
 800454c:	2300      	movs	r3, #0
 800454e:	9a03      	ldr	r2, [sp, #12]
 8004550:	7013      	strb	r3, [r2, #0]
 8004552:	e7ac      	b.n	80044ae <_printf_i+0x126>
 8004554:	002a      	movs	r2, r5
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	9906      	ldr	r1, [sp, #24]
 800455a:	9805      	ldr	r0, [sp, #20]
 800455c:	9d07      	ldr	r5, [sp, #28]
 800455e:	47a8      	blx	r5
 8004560:	3001      	adds	r0, #1
 8004562:	d0ae      	beq.n	80044c2 <_printf_i+0x13a>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	079b      	lsls	r3, r3, #30
 8004568:	d415      	bmi.n	8004596 <_printf_i+0x20e>
 800456a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800456c:	68e0      	ldr	r0, [r4, #12]
 800456e:	4298      	cmp	r0, r3
 8004570:	daa9      	bge.n	80044c6 <_printf_i+0x13e>
 8004572:	0018      	movs	r0, r3
 8004574:	e7a7      	b.n	80044c6 <_printf_i+0x13e>
 8004576:	0022      	movs	r2, r4
 8004578:	2301      	movs	r3, #1
 800457a:	9906      	ldr	r1, [sp, #24]
 800457c:	9805      	ldr	r0, [sp, #20]
 800457e:	9e07      	ldr	r6, [sp, #28]
 8004580:	3219      	adds	r2, #25
 8004582:	47b0      	blx	r6
 8004584:	3001      	adds	r0, #1
 8004586:	d09c      	beq.n	80044c2 <_printf_i+0x13a>
 8004588:	3501      	adds	r5, #1
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	42ab      	cmp	r3, r5
 8004592:	dcf0      	bgt.n	8004576 <_printf_i+0x1ee>
 8004594:	e7e9      	b.n	800456a <_printf_i+0x1e2>
 8004596:	2500      	movs	r5, #0
 8004598:	e7f7      	b.n	800458a <_printf_i+0x202>
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	0800478d 	.word	0x0800478d
 80045a0:	0800479e 	.word	0x0800479e

080045a4 <memmove>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	4288      	cmp	r0, r1
 80045a8:	d806      	bhi.n	80045b8 <memmove+0x14>
 80045aa:	2300      	movs	r3, #0
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d008      	beq.n	80045c2 <memmove+0x1e>
 80045b0:	5ccc      	ldrb	r4, [r1, r3]
 80045b2:	54c4      	strb	r4, [r0, r3]
 80045b4:	3301      	adds	r3, #1
 80045b6:	e7f9      	b.n	80045ac <memmove+0x8>
 80045b8:	188b      	adds	r3, r1, r2
 80045ba:	4298      	cmp	r0, r3
 80045bc:	d2f5      	bcs.n	80045aa <memmove+0x6>
 80045be:	3a01      	subs	r2, #1
 80045c0:	d200      	bcs.n	80045c4 <memmove+0x20>
 80045c2:	bd10      	pop	{r4, pc}
 80045c4:	5c8b      	ldrb	r3, [r1, r2]
 80045c6:	5483      	strb	r3, [r0, r2]
 80045c8:	e7f9      	b.n	80045be <memmove+0x1a>
	...

080045cc <_sbrk_r>:
 80045cc:	2300      	movs	r3, #0
 80045ce:	b570      	push	{r4, r5, r6, lr}
 80045d0:	4d06      	ldr	r5, [pc, #24]	@ (80045ec <_sbrk_r+0x20>)
 80045d2:	0004      	movs	r4, r0
 80045d4:	0008      	movs	r0, r1
 80045d6:	602b      	str	r3, [r5, #0]
 80045d8:	f7fc fdba 	bl	8001150 <_sbrk>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d103      	bne.n	80045e8 <_sbrk_r+0x1c>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d000      	beq.n	80045e8 <_sbrk_r+0x1c>
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	bd70      	pop	{r4, r5, r6, pc}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	200003ac 	.word	0x200003ac

080045f0 <memchr>:
 80045f0:	b2c9      	uxtb	r1, r1
 80045f2:	1882      	adds	r2, r0, r2
 80045f4:	4290      	cmp	r0, r2
 80045f6:	d101      	bne.n	80045fc <memchr+0xc>
 80045f8:	2000      	movs	r0, #0
 80045fa:	4770      	bx	lr
 80045fc:	7803      	ldrb	r3, [r0, #0]
 80045fe:	428b      	cmp	r3, r1
 8004600:	d0fb      	beq.n	80045fa <memchr+0xa>
 8004602:	3001      	adds	r0, #1
 8004604:	e7f6      	b.n	80045f4 <memchr+0x4>

08004606 <memcpy>:
 8004606:	2300      	movs	r3, #0
 8004608:	b510      	push	{r4, lr}
 800460a:	429a      	cmp	r2, r3
 800460c:	d100      	bne.n	8004610 <memcpy+0xa>
 800460e:	bd10      	pop	{r4, pc}
 8004610:	5ccc      	ldrb	r4, [r1, r3]
 8004612:	54c4      	strb	r4, [r0, r3]
 8004614:	3301      	adds	r3, #1
 8004616:	e7f8      	b.n	800460a <memcpy+0x4>

08004618 <_realloc_r>:
 8004618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800461a:	0006      	movs	r6, r0
 800461c:	000c      	movs	r4, r1
 800461e:	0015      	movs	r5, r2
 8004620:	2900      	cmp	r1, #0
 8004622:	d105      	bne.n	8004630 <_realloc_r+0x18>
 8004624:	0011      	movs	r1, r2
 8004626:	f7ff fc51 	bl	8003ecc <_malloc_r>
 800462a:	0004      	movs	r4, r0
 800462c:	0020      	movs	r0, r4
 800462e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004630:	2a00      	cmp	r2, #0
 8004632:	d103      	bne.n	800463c <_realloc_r+0x24>
 8004634:	f7ff fbde 	bl	8003df4 <_free_r>
 8004638:	2400      	movs	r4, #0
 800463a:	e7f7      	b.n	800462c <_realloc_r+0x14>
 800463c:	f000 f81b 	bl	8004676 <_malloc_usable_size_r>
 8004640:	0007      	movs	r7, r0
 8004642:	4285      	cmp	r5, r0
 8004644:	d802      	bhi.n	800464c <_realloc_r+0x34>
 8004646:	0843      	lsrs	r3, r0, #1
 8004648:	42ab      	cmp	r3, r5
 800464a:	d3ef      	bcc.n	800462c <_realloc_r+0x14>
 800464c:	0029      	movs	r1, r5
 800464e:	0030      	movs	r0, r6
 8004650:	f7ff fc3c 	bl	8003ecc <_malloc_r>
 8004654:	9001      	str	r0, [sp, #4]
 8004656:	2800      	cmp	r0, #0
 8004658:	d0ee      	beq.n	8004638 <_realloc_r+0x20>
 800465a:	002a      	movs	r2, r5
 800465c:	42bd      	cmp	r5, r7
 800465e:	d900      	bls.n	8004662 <_realloc_r+0x4a>
 8004660:	003a      	movs	r2, r7
 8004662:	0021      	movs	r1, r4
 8004664:	9801      	ldr	r0, [sp, #4]
 8004666:	f7ff ffce 	bl	8004606 <memcpy>
 800466a:	0021      	movs	r1, r4
 800466c:	0030      	movs	r0, r6
 800466e:	f7ff fbc1 	bl	8003df4 <_free_r>
 8004672:	9c01      	ldr	r4, [sp, #4]
 8004674:	e7da      	b.n	800462c <_realloc_r+0x14>

08004676 <_malloc_usable_size_r>:
 8004676:	1f0b      	subs	r3, r1, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	1f18      	subs	r0, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	da01      	bge.n	8004684 <_malloc_usable_size_r+0xe>
 8004680:	580b      	ldr	r3, [r1, r0]
 8004682:	18c0      	adds	r0, r0, r3
 8004684:	4770      	bx	lr
	...

08004688 <_init>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr

08004694 <_fini>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr
